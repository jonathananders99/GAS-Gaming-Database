function miscDailyChecks(){
  errorCheck("10:00",36,"miscDailyChecks","MiscDailyChecks");
}//end miscDailyChecks


function errorCheck(time,col,functionName,projectName){
  try{main();triggerCreator(time,col,functionName);}//end 1st try
  catch(error){console.log(error);
    if(error.name.toString()==="Exception"&&error.message.toString().indexOf("a server error occurred")!==-1){
      try{Utilities.sleep(5000);triggerCreator(time,col,functionName);}//end 2nd try
      catch(error){console.log(error);
        if(error.name.toString()==="Exception"&&error.message.toString().indexOf("a server error occurred")!==-1){
          try{Utilities.sleep(5000);triggerCreator(time,col,functionName);}//end 3rd try
          catch(error){console.log(error);
            FunctionContainer.discErrorReport(error,functionName,projectName);}}//end 3rd catch
        else{FunctionContainer.discErrorReport(error,functionName,projectName);}}}//end 2nd catch
    else{FunctionContainer.discErrorReport(error,functionName,projectName);}}//end 1st catch
}//end errorCheck


function triggerCreator(ct,tColNum,scriptName){
  var datSheetOriginal=FunctionContainer.tripleTryOpenSheet("", "Dates");var cdd=datSheetOriginal.getRange(1,1,15,datSheetOriginal.getLastColumn()).getValues();var triggerChangesMade = [];var vals = [[],[],[],[],[],[],[],[],[],[],[]];
  triggerChangesMade.push("Old Trigger Id's and Dates:\nTrigger ID: "+cdd[9][tColNum-1].toString()+" For Date: "+cdd[1][tColNum-1].toString()+" ~\nTrigger ID: "+cdd[10][tColNum-1].toString()+" For Date: "+cdd[4][tColNum-1].toString()+" ~\nTrigger ID: "+cdd[11][tColNum-1].toString()+" For Date: "+cdd[5][tColNum-1].toString());
  if(FunctionContainer.dateReplace(cdd[1][tColNum-1].toString())===FunctionContainer.dateReplace(cdd[1][0].toString())&&FunctionContainer.dateReplace(cdd[4][tColNum-1].toString())===FunctionContainer.dateReplace(cdd[0][0].toString())&&FunctionContainer.dateReplace(cdd[5][tColNum-1].toString())===FunctionContainer.dateReplace(cdd[2][0].toString())){
    var t=ScriptApp.getProjectTriggers();for(var i=0;i<t.length;i++){if(t[i].getUniqueId()===cdd[9][tColNum-1].toString()){ScriptApp.deleteTrigger(t[i]);triggerChangesMade.push("\nTrigger Deleted ~ "+cdd[9][tColNum-1].toString()+" for date: "+cdd[1][tColNum-1].toString());}}
    var bruhX3 = cdd[3][0].toString();for(var iii = 0;iii<4;iii++){cdd[iii][0]=cdd[iii][0].toString()}var triggerTime="";var months=["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"];
    for(var m=0;m<months.length;m++){if(bruhX3.indexOf(months[m].toString())!==-1){m=m+1;triggerTime = bruhX3[11].toString()+bruhX3[12].toString()+bruhX3[13].toString()+bruhX3[14].toString()+"-"+m+"-"+bruhX3[8].toString()+bruhX3[9].toString()+" "+ct;break}}
    var tt=datSheetOriginal.getRange(6,tColNum).setValue(triggerTime).setNumberFormat('M/d/yyyy H:mm:ss').getValue();var uniqueTriggerID = ScriptApp.newTrigger(scriptName).timeBased().at(tt).create().getUniqueId();triggerChangesMade.push("\nTrigger Added ~ "+uniqueTriggerID+" For Date: "+tt.toString());
    vals[0] = [cdd[4][tColNum-1]];vals[1] = [cdd[2][tColNum-1]];vals[2] = [cdd[3][tColNum-1]];vals[3] = [cdd[5][tColNum-1]];vals[4] = [tt];vals[5] = [cdd[6][tColNum-1]];vals[6] = [cdd[7][tColNum-1]];vals[7] = [cdd[8][tColNum-1]];
    vals[8] = [cdd[10][tColNum-1]];vals[9] = [cdd[11][tColNum-1]];vals[10] = [uniqueTriggerID];datSheetOriginal.getRange(2,tColNum,vals.length).setValues(vals);}
  else if(FunctionContainer.dateReplace(cdd[1][tColNum-1].toString())===FunctionContainer.dateReplace(cdd[0][0].toString())&&FunctionContainer.dateReplace(cdd[4][tColNum-1].toString())===FunctionContainer.dateReplace(cdd[2][0].toString())&&FunctionContainer.dateReplace(cdd[5][tColNum-1].toString())===FunctionContainer.dateReplace(cdd[3][0].toString())){triggerChangesMade.push("\nNo Trigger Changes Made");}
  else{var t=ScriptApp.getProjectTriggers();for(var i=0;i<t.length;i++){triggerChangesMade.push("\nTrigger Deleted ~ "+t[i].getUniqueId());ScriptApp.deleteTrigger(t[i]);}var cd=datSheetOriginal.getRange(1,1,4).getValues();
    for(var iii = 0;iii<4;iii++){cd[iii]=cd[iii].toString()}var triggerTime="";var months=["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"];for(var m=0;m<months.length;m++){if(cd[0].indexOf(months[m].toString())!==-1){
    m=m+1;triggerTime = cd[0][11].toString()+cd[0][12].toString()+cd[0][13].toString()+cd[0][14].toString()+"-"+m+"-"+cd[0][8].toString()+cd[0][9].toString()+" "+ct;break}}var tt=datSheetOriginal.getRange(2,tColNum).setValue(triggerTime).setNumberFormat('M/d/yyyy H:mm:ss').getValue();
    var uniqueTriggerID = ScriptApp.newTrigger(scriptName).timeBased().at(tt).create().getUniqueId();triggerChangesMade.push("\nTrigger Added ~ "+uniqueTriggerID+" For Date: "+tt.toString());vals[0] = [tt];vals[8] = [uniqueTriggerID];var triggerTime="";
    var months=["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"];for(var m=0;m<months.length;m++){if(cd[2].indexOf(months[m].toString())!==-1){m=m+1;triggerTime = cd[2][11].toString()+cd[2][12].toString()+cd[2][13].toString()+cd[2][14].toString()+"-"+m+"-"+cd[2][8].toString()+cd[2][9].toString()+" "+ct;break}}
    var tt=datSheetOriginal.getRange(5,tColNum).setValue(triggerTime).setNumberFormat('M/d/yyyy H:mm:ss').getValue();var uniqueTriggerID = ScriptApp.newTrigger(scriptName).timeBased().at(tt).create().getUniqueId();triggerChangesMade.push("\nTrigger Added ~ "+uniqueTriggerID+" For Date: "+tt.toString());
    vals[3] = [tt];vals[9] = [uniqueTriggerID];var triggerTime="";var months=["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"];for(var m=0;m<months.length;m++){if(cd[3].indexOf(months[m].toString())!==-1){m=m+1;
    triggerTime = cd[3][11].toString()+cd[3][12].toString()+cd[3][13].toString()+cd[3][14].toString()+"-"+m+"-"+cd[3][8].toString()+cd[3][9].toString()+" "+ct;break}}var tt=datSheetOriginal.getRange(6,tColNum).setValue(triggerTime).setNumberFormat('M/d/yyyy H:mm:ss').getValue();var uniqueTriggerID = ScriptApp.newTrigger(scriptName).timeBased().at(tt).create().getUniqueId();
    triggerChangesMade.push("\nTrigger Added ~ "+uniqueTriggerID+" For Date: "+tt.toString());vals[1] = [cdd[2][tColNum-1]];vals[2] = [cdd[3][tColNum-1]];vals[4] = [tt];vals[5] = [cdd[6][tColNum-1]];vals[6] = [cdd[7][tColNum-1]];vals[7] = [cdd[8][tColNum-1]];vals[10] = [uniqueTriggerID];datSheetOriginal.getRange(2,tColNum,vals.length).setValues(vals);}console.log(triggerChangesMade);
}//end triggerCreator


function main(){
  //all warnings are put into a single text file for full details and a variable to be put into high tech comms as an embedded message
  
  //event checking
  //checks for misc member things
  //checks for misc group things
    //checks to see if someone is in an inactive group
  //checks for scripts not run within 3 days
  //checks for unread emails and if name contains FormResponseUpdate then send warning message to high tech comms chat
  //sends embedded message with basic details and text document if there are any warnings in high-tech-comms
  
  //Phoenix Era Member Data Current Members Sheet
  var curVals = FunctionContainer.getpmdcmscv();
  var pmdcms = curVals[0];
  var pmdcmscv = curVals[1];
  var pmdcmscvn = curVals[2];
  curVals = undefined;
  
  
  //Phoenix Era Member Data Discharged Members Sheet
  curVals = FunctionContainer.getpmddmscv();
  var pmddms = curVals[0];
  var pmddmscv = curVals[1];
  var pmddmscvn = curVals[2];
  curVals = undefined;
  
  
  //Data Lists Lists Sheet
  curVals = FunctionContainer.getdllscv();
  var dlls = curVals[0];
  var dllscv = curVals[1];
  var currentDateNum = dllscv[10][1];
  var currentDate = FunctionContainer.dateReplace(dllscv[10][0]);
  var day3 = currentDateNum-2;
  curVals = undefined;
  

  //Data Lists Dates Sheet Num
  curVals = FunctionContainer.getdldscvNum();
  var dlds = curVals[0];
  var dldscvn = curVals[1];
  curVals = undefined;
  
  
  //Event Debrief Hub all Event debriefs sheet
  curVals = FunctionContainer.getedhaedscv("both", dllscv);
  var edhaeds = curVals[0];
  var edhaedscv = curVals[1];
  var edhaedscvn = curVals[2];
  curVals = undefined;
  
  
  //Member Update Hub all updates sheet
  curVals = FunctionContainer.getmuhauscv("both", dllscv);
  var muhaus = curVals[0];
  var muhauscv = curVals[1];
  var muhauscvn = curVals[2];
  curVals = undefined;
  
  
  //Member Update Hub New Member updates sheet
  curVals = FunctionContainer.getmuhnmuscv("both", dllscv);
  var muhnmuscv = curVals[1];
  var muhnmuscvn = curVals[2];
  curVals = undefined;
  
  
  //Forge Hub Active Maps sheet
  curVals = FunctionContainer.getfhamscv("date", dllscv);
  var fhams = curVals[0];
  var fhamslri = curVals[2];
  var fhamscv = curVals[1];
  curVals = undefined;
  
  
  //Forge Hub Inactive Maps sheet
  curVals = FunctionContainer.getfhimscv("date", dllscv);
  var fhims = curVals[0];
  var fhimslri = curVals[2];
  var fhimscv = curVals[1];
  curVals = undefined;
  
  
  var textFileText = "";
  
  
  //gets all possible creds
  var allPossibleCreds = [];
  for(var i=1; i<100; i+=1){//start 1st for
    for(var x=16; x<23; x+=2){//start 2nd for
      if(dllscv[x][i].toString() !== "N/A"  &&  dllscv[x][i].toString() !== ""){//start 1st if
        allPossibleCreds.push(dllscv[x][i].toString());
      }//end 1st if
    }//end 2nd for
  }//end 1st for
  
  
  
  
  ///*** EVENT CHECKING ***///
  //doubles of data ~ same day, + 8 >= cells match
  //min time event alert ~ dllscv[78][0]
  //max time event alert ~ dllscv[78][1]
  //max events per day alert ~ dllscv[78][2]
  //event alert inclusion by days ~ dllscv[78][3]
  //attendee num alert/how many attendees in one event is too much ~ dllscv[78][4]
  
  
  var eventProblems = "";
  //gets a var for events per day to check
  var eventsPerDay = [[currentDate, 0]];
  //[date, num of events]
  //cycles thru the amount of days are specified in dllscv[78][3]
  for(var i=0; i<dllscv[78][3]-1; i+=1){//start 1st for
    eventsPerDay.push([FunctionContainer.dateReplace(dldscvn[i+4][0]), 0]);
  }//end 1st for
  
  //cycles thru All Event Debriefs
  for(var i=0; i<edhaedscvn.length; i+=1){//start 1st for
    
    //if event is within event alert inclusion
    if(edhaedscvn[i][0] <= currentDateNum  &&  edhaedscvn[i][0] >= currentDateNum-dllscv[78][3]){//start 1st if
      
      var curEventDateNum = edhaedscvn[i][0];
      var curEventDate = FunctionContainer.dateReplace(edhaedscv[i][0]);
      var curEventStartTime = FunctionContainer.timeRetrieval12Cycle(edhaedscvn[i][1]);
      var curEventStartTimeNum = FunctionContainer.getTimeNumFromDate(edhaedscvn[i][1]);
      var curEventEndTime = FunctionContainer.timeRetrieval12Cycle(edhaedscvn[i][2]);
      var curEventEndTimeNum = FunctionContainer.getTimeNumFromDate(edhaedscvn[i][2]);
      var curEventEventTypes = FunctionContainer.splitEmUp(edhaedscvn[i][3]);
      var curEventPartGroups = FunctionContainer.splitEmUp(edhaedscvn[i][4]);
      var curEventWinLoss = edhaedscvn[i][5].toString();
      var curEventLeader = edhaedscvn[i][6].toString();
      var curEvent2ndLeader = FunctionContainer.splitEmUp(edhaedscvn[i][7]);
      var curEventAttendees = FunctionContainer.splitEmUp(edhaedscvn[i][8]);
      var curEventDebrief = edhaedscvn[i][9].toString();
      var curEventNotes = edhaedscvn[i][10].toString();
      var curEventMapsUsed = FunctionContainer.splitEmUp(edhaedscvn[i][11]);
      
      var curProblems = [];
      
      //checks for min attendee alert which is 1
      if(curEventAttendees.length === 1){//start 2nd if
        curProblems.push("\n • Only 1 Attendee");
      }//end 2nd if
      
      //checks for max attendee alert dllscv[78][4]
      if(curEventAttendees.length > dllscv[78][4]){//start 2nd if
        curProblems.push("\n • More than " + dllscv[78][4] + " attendees");
      }//end 2nd if
      
      //if time goes from pm to am it adds 24 for correct calcs
      if(curEventEndTimeNum<curEventStartTimeNum){//start 2nd if
        //add 24
        curEventEndTimeNum = curEventEndTimeNum + 24;
      }//end 2nd if
      
      //checks for min time and max time
      //min time
      if(curEventEndTimeNum-curEventStartTimeNum < dllscv[78][0]/60){//start 2nd if
        curProblems.push("\n • Event lasted less than " + dllscv[78][0] + " minutes");
      }//end 2nd if
      //max time
      if(curEventEndTimeNum-curEventStartTimeNum > dllscv[78][1]/60){//start 2nd if
        curProblems.push("\n • Event lasted more than " + dllscv[78][1] + " minutes");
      }//end 2nd if
      
      //num of events per day count
      for(var x=0; x<eventsPerDay.length; x+=1){//start 2nd for
        if(eventsPerDay[x][0] === curEventDate){//start 2nd if
          eventsPerDay[x][1] = eventsPerDay[x][1]+1;
          x = eventsPerDay.length+1;
        }//end 2nd if
      }//end 2nd for
      
      
      //compares to other events to find duplicates of data
      for(var x=i+1; x<edhaedscvn.length; x+=1){//start 2nd for
        
        //if event is within the time frame given by the inclusion date in dllscv
        if(edhaedscvn[x][0] <= currentDateNum  &&  edhaedscvn[x][0] >= currentDateNum-dllscv[78][3]){//start 2nd if
          var nextEventDateNum = edhaedscvn[x][0];
          var nextEventDate = FunctionContainer.dateReplace(edhaedscv[x][0]);
          var nextEventStartTime = FunctionContainer.timeRetrieval12Cycle(edhaedscvn[x][1]);
          var nextEventEndTime = FunctionContainer.timeRetrieval12Cycle(edhaedscvn[x][2]);
          var nextEventEventTypes = FunctionContainer.splitEmUp(edhaedscvn[x][3]);
          var nextEventPartGroups = FunctionContainer.splitEmUp(edhaedscvn[x][4]);
          var nextEventWinLoss = edhaedscvn[x][5].toString();
          var nextEventLeader = edhaedscvn[x][6].toString();
          var nextEvent2ndLeader = FunctionContainer.splitEmUp(edhaedscvn[x][7]);
          var nextEventAttendees = FunctionContainer.splitEmUp(edhaedscvn[x][8]);
          var nextEventDebrief = edhaedscvn[x][9].toString();
          var nextEventNotes = edhaedscvn[x][10].toString();
          var nextEventMapsUsed = FunctionContainer.splitEmUp(edhaedscvn[x][11]);
          
          var numOfMatches = 0;
          
          //if dates are same
          if(nextEventDateNum.toString() === curEventDateNum.toString()){//start 3rd if
            numOfMatches = numOfMatches + 1;
          }//end 3rd if
          
          //if start time are same
          if(nextEventStartTime.toString() === curEventStartTime.toString()){//start 3rd if
            numOfMatches = numOfMatches + 1;
          }//end 3rd if
          
          //if end time are same
          if(nextEventEndTime.toString() === curEventEndTime.toString()){//start 3rd if
            numOfMatches = numOfMatches + 1;
          }//end 3rd if
          
          //if event types are same
          if(nextEventEventTypes.toString() === curEventEventTypes.toString()){//start 3rd if
            numOfMatches = numOfMatches + 1;
          }//end 3rd if
          
          //if participating groups are same
          if(nextEventPartGroups.toString() === curEventPartGroups.toString()){//start 3rd if
            numOfMatches = numOfMatches + 1;
          }//end 3rd if
          
          //if win/loss are same
          if(nextEventWinLoss.toString() === curEventWinLoss.toString()){//start 3rd if
            numOfMatches = numOfMatches + 1;
          }//end 3rd if
          
          //if leader are same
          if(nextEventLeader.toString() === curEventLeader.toString()){//start 3rd if
            numOfMatches = numOfMatches + 1;
          }//end 3rd if
          
          //if 2nd leaders are same
          if(nextEvent2ndLeader.toString() === curEvent2ndLeader.toString()){//start 3rd if
            numOfMatches = numOfMatches + 1;
          }//end 3rd if
          
          //if attendees are same
          if(nextEventAttendees.toString() === curEventAttendees.toString()){//start 3rd if
            numOfMatches = numOfMatches + 1;
          }//end 3rd if
          
          //if debrief are same
          if(nextEventDebrief.toString() === curEventDebrief.toString()){//start 3rd if
            numOfMatches = numOfMatches + 1;
          }//end 3rd if
          
          //if notes are same
          if(nextEventNotes.toString() === curEventNotes.toString()){//start 3rd if
            numOfMatches = numOfMatches + 1;
          }//end 3rd if
          
          //if maps used are same
          if(nextEventMapsUsed.toString() === curEventMapsUsed.toString()){//start 3rd if
            numOfMatches = numOfMatches + 1;
          }//end 3rd if
          
          
          //if the number of matches is over 8 and match days
          if(nextEventDateNum.toString() === curEventDateNum.toString()  &&  numOfMatches >= 8){//start 3rd if
            curProblems.push("\n • 8 Matched Cells Between Event Date: " + nextEventDate + " ~ Event Leader: " + nextEventLeader
              + " ~ Event Debrief: " + nextEventDebrief);
          }//end 3rd if
          
        }//end 2nd if
        
        
        //event isnt within the time frame
        else{//start 2nd if/else
          x = edhaedscvn.length + 1;
        }//end 2nd if/else
        
      }//end 2nd for
      
      
      
      //if problems were found
      if(curProblems.length>0){//start 2nd if
        eventProblems = eventProblems + "\n\n ~ Event Date: " + curEventDate + " ~ Event Leader: " + curEventLeader 
          + " ~ Event Debrief: " + curEventDebrief + "\nPossible Problems Found: " + FunctionContainer.array1LevelIntoString(curProblems);
      }//end 2nd if
    }//end 1st if
    //done with events that are within the range for alerts
    else{i = edhaedscvn.length+1;}
    
  }//end 1st for
  
  //num of events per day count
  for(var i=0; i<eventsPerDay.length; i+=1){//start 1st for
    if(eventsPerDay[i][1] > dllscv[78][2]){//start 1st if
      eventProblems = eventProblems + "\n\n ~ More Than " + dllscv[78][2] + " Events on Date: " + eventsPerDay[i][0].toString();
    }//end 1st if
  }//end 1st for
  
  
  //if any event problems were found
  if(eventProblems.toString() !== ""){//start 1st if
    textFileText = textFileText + "Event Warnings: " + eventProblems + "\n\n\n";
  }//end 1st if
  
  
  
  
  
  
  
  ///*** MEMBER CHECKS ***///
  //**Done** check if someone has a cred that is tied to a group they arent in
  //**Done** check if someone holds 2 different groups in mora system (camp 01 leader, warband 04 leader)
  //**Done** check if someone has a group leadership role but has no cred for it
  //**Done** check to see if someone is holding both U/I and full version of the same credential
  //**Done** check to see if someone has a cred that no longer exists
  //**Done** check to see if anyone matches gamertags with someone who is discharged and tells them to fill out a member retrieval.
  //**Done** check for mentors having too many mentees (more than 3)
  
  var memberProblems = "";
  
  //cycles thru pmdcmscv
  for(var i=0; i<pmdcmscv.length; i+=1){//start 1st for
    var curGt = pmdcmscv[i][0].toString();
    var curCreds = FunctionContainer.splitEmUp(pmdcmscv[i][4]);
    var curGroups = FunctionContainer.splitEmUp(pmdcmscv[i][3]);
    
    var curProblems = [];
    var check2 = false;
    var check3 = false;
    
    //cycle thru groups first
    for(var x=0; x<curGroups.length; x+=1){//start 2nd for
      
      //check if someone has a group leadership role but has no cred for it
      if(curGroups[x].toString().indexOf("Leadership") !== -1){//start 1st if
        var curIndGroup = curGroups[x].toString().replace(" Leadership", "");
        //finds group in dllscv
        for(var y=0; y<78; y+=1){//start 3rd for
          //if names match
          if(curIndGroup === dllscv[40][y].toString()){//start 2nd if
            //if group type inclusion isnt empty
            if(dllscv[61][dllscv[53][y]].toString() !== ""){//start 3rd if
              var curGroupTypeInclusion = FunctionContainer.splitEmUp(dllscv[61][dllscv[53][y]].toString());
              
              var check = true;
              
              //if the member has any creds
              if(curCreds.length > 0){//start 4th if
                
                //cycles through inclusion creds
                for(var w=0; w<curGroupTypeInclusion.length; w+=1){//start 4th for
                  var curUICred = curGroupTypeInclusion[w].toString() + " U/I";  
                  //cycles thru curCreds
                  for(var z=0; z<curCreds.length; z+=1){//start 5th for
                    //searches for normal cred
                    if(curCreds[z].toString() === curGroupTypeInclusion[w].toString()){//start 5th if
                      check = false;
                    }//end 5th if
                    //searches for U/I cred
                    if(curCreds[z].toString() === curUICred.toString()){//start 5th if
                      check = false;
                    }//end 5th if
                  }//end 5th for
                }//end 4th for
                
                //if no cred is found for the group
                if(check){//start 5th if
                  curProblems.push("\n • Member is in " + curIndGroup + "'s leadership without having any of the corresponding leadership credentials");
                }//end 5th if
                
              }//end 4th if
              
              //if member has no creds
              else if(curCreds.length === 0){//start 4th if/else
                curProblems.push("\n • Member is in " + curIndGroup + "'s leadership without having any of the corresponding leadership credentials");
              }//end 4th if/else
              
            }//end 3rd if
            
          }//end 2nd if
          
        }//end 3rd for
        
      }//end 1st if
      
      
      
      //if its not the last group in the group list and they have more than 1 group
      if(curGroups.length > 1){//start 1st if
        
        
        //checks if someone holds 2 different groups in mora system (camp 01 leader, warband 04 leader)
        for(var y=0; y<55; y+=1){//start 3rd for
          //if group is in member system
          if(curGroups[x].toString().replace(" Leadership", "") === dllscv[40][y].toString()){//start 1st if
            
            //if a previous group is in mora system
            if(check2){//start 2nd if
              check3 = true;
            }//end 2nd if
            
            check2 = true;
          }//end 1st if
        }//end 3rd for
        
      }//end 1st if
      
      
      //if they had a previous group that was in the mora system
      if(check3){//start 1st if
//        curProblems.push("\n • Member is in two groups apart of the mora system which isn't allowed");
      }//end 1st if
      
    }//end 2nd for
    
    
    //check if someone has a cred that is tied to a group they arent in
    //checks to see if creds exist
    //cycles thru creds
    for(var x=0; x<curCreds.length; x+=1){//start 2nd for
      var curCredMinusUI = curCreds[x].toString().replace(" U/I", "");
      
      var curCheck = true;
      for(var y=0; y<allPossibleCreds.length; y+=1){//start 1st for
        if(allPossibleCreds[y].toString() === curCredMinusUI.toString()){//start 1st if
          curCheck = false;
          y = allPossibleCreds.length+1;
        }//end 1st if
      }//end 1st for
      if(curCheck){//start 1st if
        curProblems.push("\n • Member has the credential: '" + curCreds[x].toString() + "' which no longer exists and must be manually removed in phoenix member data credential column (keep normal parse behavior: ex: 'Title1, Title2' removing Title1: 'Title2' ex: 'Title1, Title2, Title3' removing Title2: 'Title1, Title3')");
      }//end 1st if
      
      //checks to see if member also U/I and normal cred
      for(var y=x+1; y<curCreds.length; y+=1){//start 1st for
        if(curCreds[y].toString().replace(" U/I", "") === curCredMinusUI.toString()){//start 1st if
          curProblems.push("\n • Member has the credential: '" + curCreds[x].toString() + "' while also having its U/I or non U/I version at the same time");
        }//end 1st if
      }//end 1st for
      
      //cycles thru the group types 
      for(var y=0; y<4; y+=1){//start 3rd for
        var curGroupTypeCreds = FunctionContainer.splitEmUp(dllscv[61][y]);
        
        //cycles thru curGroupTypeCreds
        for(var z=0; z<curGroupTypeCreds.length; z+=1){//start 4th for
          
          //if names match
          if(curCredMinusUI.toString() === curGroupTypeCreds[z].toString()){//start 1st if
            
            //cycle thru all groups minus councils
            for(var w=0; w<70; w+=1){//start 5th for
              
              //if group is current group type
              if(dllscv[53][w] === y){//start 2nd if
                
                var curGroup = dllscv[40][w].toString() + " Leadership";
                
                //cycle thru curGroups
                for(var r=0; r<curGroups.length; r+=1){//start 6th for
                  
                  //if for loop is at end and names dont match send warning for curCred saying they arent in a group that uses the cred
                  if(curGroups[r].toString() !== curGroup  
                     &&  r === curGroups.length-1
                     &&  w === dllscv[66][y]
                    ){//start 3rd if
                    curProblems.push("\n • Member has the credential: '" + curCreds[x].toString() + "' which is tied to a group type leadership and must be in a group in its associated group type");
                  }//end 3rd if
                  
                  //if group names match bounce out of loop
                  else if(curGroups[r].toString() === curGroup){//start 3rd if/else
                    r = curGroups.length + 1;
                    w = 71;
                    z = curGroupTypeCreds.length + 1;
                    y = 16;
                  }//end 3rd if/else
                  
                }//end 6th for
                
                
              }//end 2nd if
              
            }//end 5th for
            
          }//end 1st if
          
        }//end 4th for
        
      }//end 3rd for
      
      
    }//end 2nd for
    
    
    //searches if member matches any discharged member
    for(var x=0; x<pmddmscv.length; x+=1){//start 2nd for
      if(curGt === pmddmscv[x][0].toString()){//start 1st if
        var curRow = x+2;
        curProblems.push("\n • Member has been in the clan before and needs to have a member retrieval filled out. Discharged member row: " + curRow + "");
      }//end 1st if
    }//end 2nd for
    
    
    //searches for too many mentees
    var curMentees = [];
    for(var x=0; x<pmdcmscv.length; x+=1){//start 2nd for
      if(pmdcmscv[x][25].toString() === curGt){//start 1st if
        curMentees.push(pmdcmscv[x][0].toString());
      }//end 1st if
    }//end 2nd for
    if(curMentees.length > 3){//start 1st if
      curProblems.push("\n • Member has more than 3 mentees and needs to have one removed. All current mentees: " + FunctionContainer.array1LevelIntoString(curMentees) + "");
    }//end 1st if
    
    
    //if problems were found
    if(curProblems.length>0){//start 1st if
      memberProblems = memberProblems + "\n\n ~ Member GT: " + curGt + "\nPossible Problems Found: " 
        + FunctionContainer.array1LevelIntoString(curProblems);
    }//end 1st if
    
    
    //bday check
    if(pmdcmscv[i][26].toString() === FunctionContainer.dateReplaceMonthDay(currentDate)){//start 1st if
      //b^r,Nickname,Channel Name
      FunctionContainer.discordDailyUpdates("b^r," + FunctionContainer.getDiscordNicknameWithRow(i, dllscv, pmdcmscv) + ",official");
    }//end 1st if
    
  }//end 1st for
  
  
  //if any event problems were found
  if(memberProblems.toString() !== ""){//start 1st if
    textFileText = textFileText + "Member Warnings: " + memberProblems + "\n\n\n";
  }//end 1st if
  
  
  
  
  
  ///*** GROUP CHECKS ***///
  //checks to see if the max number of people has been reached in a group
  //checks to see if an inactive group has people in it
  
  var groupProblems = "";
  
  var newValsForMemberProfileUpdate = [];
  //[Group name location in dllscv,start num of people included,end num of people included,total num for member array]
  
  for(var z=0; z<57; z+=1){//start 1st for
  
    //declares necessary vars
    var curProblems = [];
    var curGroupMembers = [];
    var newGroupMembers = [];
    var curGroupLocation = [];
    //[group,,,,,],[position,gamertag,rank,agora,credentials,date enlisted]]
    
    //where all the member in the group will be pooled
    var curGroupcv = [["curGroupMembers",curGroupMembers,[],[],[],[],[],[],[],[],[],[],[],[],[]]];
    /*["sheetcv",[0]
      sheetcv,[1]
      [row to merge,row to merge],[2]
      [if it needs to formated to main or not],[3]
      sheet,[4]
      sheet max rows num,[5]
      [],[6]
      [],[7]
      [],[8]
      [],[9]
      [],[10]
      [],[11]
      [],[12]
      [],[13]
      []][14]
    */
    
    //all groups and their locations in data lists sheet
    var groupLocations = [
      //Upper Echelon
      [dllscv[0][156].toString(),156,1,["curGroupMembers"],0],
      //Phoenix S.W.A.L
      [dllscv[0][39].toString(),39,1,["curGroupMembers"],0],
      //Lochos 13
      [dllscv[1][39].toString(),39,1,["curGroupMembers"],1],
      //Lochos 14
      [dllscv[2][39].toString(),39,1,["curGroupMembers"],2],
      //Lochos 15
      [dllscv[3][39].toString(),39,1,["curGroupMembers"],3],
      //Praetorian Guard
      [dllscv[0][52].toString(),52,1,["curGroupMembers"],0],
      //Seeker Intelligence
      [dllscv[0][65].toString(),65,1,["curGroupMembers"],0],
      //Vicarius Senate
      [dllscv[0][78].toString(),78,1,["curGroupMembers"],0],
      //Special Group 04
      [dllscv[0][91].toString(),91,1,["curGroupMembers"],0],
      //Special Group 05
      [dllscv[0][104].toString(),104,1,["curGroupMembers"],0],
      //Special Group 06
      [dllscv[0][117].toString(),117,1,["curGroupMembers"],0],
      //Special Group 07
      [dllscv[0][130].toString(),130,1,["curGroupMembers"],0],
      //Special Group 08
      [dllscv[0][143].toString(),143,1,["curGroupMembers"],0],
      //Special Sub-Group 01
      [dllscv[1][143].toString(),143,1,["curGroupMembers"],1],
      //Special Sub-Sub-Group 01
      [dllscv[2][143].toString(),143,1,["curGroupMembers"],2],
      //Special Sub-Sub-Group 02
      [dllscv[3][143].toString(),143,1,["curGroupMembers"],3],
      //Special Sub-Group 02
      [dllscv[4][143].toString(),143,1,["curGroupMembers"],4],
      //Special Sub-Sub-Group 03
      [dllscv[5][143].toString(),143,1,["curGroupMembers"],5],
      //Special Sub-Sub-Group 04
      [dllscv[6][143].toString(),143,1,["curGroupMembers"],6],
      //Mora 1
      [dllscv[0][0].toString(),0,1,["curGroupMembers"],0],
      //Camp 01
      [dllscv[1][0].toString(),0,1,["curGroupMembers"],1],
      //Camp 02
      [dllscv[2][0].toString(),0,1,["curGroupMembers"],2],
      //Camp 03
      [dllscv[3][0].toString(),0,1,["curGroupMembers"],3],
      //Lochos 01
      [dllscv[4][0].toString(),0,1,["curGroupMembers"],4],
      //Lochos 02
      [dllscv[5][0].toString(),0,1,["curGroupMembers"],5],
      //Lochos 03
      [dllscv[6][0].toString(),0,1,["curGroupMembers"],6],
      //Lochos 04
      [dllscv[7][0].toString(),0,1,["curGroupMembers"],7],
      //Extra Group 01
      [dllscv[8][0].toString(),0,1,["curGroupMembers"],8],
      //Extra Other Group 01
      [dllscv[9][0].toString(),0,1,["curGroupMembers"],9],
      //Mora 2
      [dllscv[0][13].toString(),13,1,["curGroupMembers"],0],
      //Camp 04
      [dllscv[1][13].toString(),13,1,["curGroupMembers"],1],
      //Camp 05
      [dllscv[2][13].toString(),13,1,["curGroupMembers"],2],
      //Camp 06
      [dllscv[3][13].toString(),13,1,["curGroupMembers"],3],
      //Lochos 05
      [dllscv[4][13].toString(),13,1,["curGroupMembers"],4],
      //Lochos 06
      [dllscv[5][13].toString(),13,1,["curGroupMembers"],5],
      //Lochos 07
      [dllscv[6][13].toString(),13,1,["curGroupMembers"],6],
      //Lochos 08
      [dllscv[7][13].toString(),13,1,["curGroupMembers"],7],
      //Extra Group 02
      [dllscv[8][13].toString(),13,1,["curGroupMembers"],8],
      //Extra Other Group 02
      [dllscv[9][13].toString(),13,1,["curGroupMembers"],9],
      //Mora 3
      [dllscv[0][26].toString(),26,1,["curGroupMembers"],0],
      //Camp 07
      [dllscv[1][26].toString(),26,1,["curGroupMembers"],1],
      //Camp 08
      [dllscv[2][26].toString(),26,1,["curGroupMembers"],2],
      //Camp 09
      [dllscv[3][26].toString(),26,1,["curGroupMembers"],3],
      //Lochos 09
      [dllscv[4][26].toString(),26,1,["curGroupMembers"],4],
      //Lochos 10
      [dllscv[5][26].toString(),26,1,["curGroupMembers"],5],
      //Lochos 11
      [dllscv[6][26].toString(),26,1,["curGroupMembers"],6],
      //Lochos 12
      [dllscv[7][26].toString(),26,1,["curGroupMembers"],7],
      //Extra Group 03
      [dllscv[8][26].toString(),26,1,["curGroupMembers"],8],
      //Extra Other Group 03
      [dllscv[9][26].toString(),26,1,["curGroupMembers"],9],
      //High Council
      [dllscv[0][169].toString(),169,1,["curGroupMembers"],0],
      //Council 02
      [dllscv[0][182].toString(),182,1,["curGroupMembers"],0],
      //Council 03
      [dllscv[0][195].toString(),195,1,["curGroupMembers"],0],
      //Council 04
      [dllscv[0][208].toString(),208,1,["curGroupMembers"],0],
      //Council 05
      [dllscv[0][221].toString(),221,1,["curGroupMembers"],0],
      //Council 06
      [dllscv[0][234].toString(),234,1,["curGroupMembers"],0],
      //Council 07
      [dllscv[0][247].toString(),247,1,["curGroupMembers"],0],
      //Council 08
      [dllscv[0][260].toString(),260,1,["curGroupMembers"],0]];
    //[name of group, location in main array, number of rows below to go through, [sheets of inclusion], row in dllscv]
    
    //gets all members in the group
    FunctionContainer.memberFinderForCheck(curGroupcv,[groupLocations[z]],dllscv,pmdcmscv);
    
    
    //deletes first two objects to leave just the members in curGroupcv[0][1]
    curGroupMembers.shift();
    curGroupMembers.shift();
    
    //gets gts only for members
    for(var i=0; i<curGroupMembers.length; i+=1){//start 2nd for
      newGroupMembers.push(curGroupMembers[i][1].toString());
    }//end 2nd for
    
    var curGroupName = groupLocations[z][0];
    var curGroupMaxSize = dllscv[groupLocations[z][4]][groupLocations[z][1]+2];
    var curGroupStatus = dllscv[groupLocations[z][4]][groupLocations[z][1]+1].toString();
    
    //if group is inactive and has people in that group it sends warning
    if(curGroupStatus === "Inactive"  &&  curGroupMembers.length !== 0){//start 1st if
      curProblems.push("\n • Has members listed as part of the group when the group itself is inactive. Members in Question: " + FunctionContainer.array1LevelIntoString(newGroupMembers));
    }//end 1st if
    
    
    //if group has too many members
    if(curGroupMembers.length > curGroupMaxSize){//start 1st if
      curProblems.push("\n • Has more than the max member size of " + curGroupMaxSize);
    }//end 1st if
    
    
    //if no one is in the group but its active
    if(curGroupStatus === "Active"  &&  curGroupMembers.length === 0){//start 1st if
      curProblems.push("\n • is active with no members apart of the group");
    }//end 1st if
    
    
    //if problems were found
    if(curProblems.length>0){//start 1st if
      groupProblems = groupProblems + "\n\n ~ Group Name: " + curGroupName + "\nPossible Problems Found: " 
        + FunctionContainer.array1LevelIntoString(curProblems);
    }//end 1st if
    
  }//end 1st for
  
  
  //if any event problems were found
  if(groupProblems.toString() !== ""){//start 1st if
    textFileText = textFileText + "Group Warnings: " + groupProblems + "\n\n\n";
  }//end 1st if
  
  
  
  
  
  
  ///*** SCRIPT CHECKS ***///
  var scriptProblems = "";
  
  //cycles thru dldscv
  for(var i=1; i<dldscvn[0].length; i+=1){//start 1st for
    //not blank and is not within 3 days
    if(dldscvn[1][i].toString() !== ""  &&  dldscvn[1][i]<=day3  &&  dldscvn[1][i].toString() !== "Special Trigger"  &&  dldscvn[1][i].toString() !== "NoTrigger"){//start 1st if
      scriptProblems = scriptProblems + "\n ~ " + dldscvn[0][i].toString();
    }//end 1st if
  }//end 1st for
  
  
  
  //checks email
  var emailProblems = "";
  
  //gets all threads
  var allThreads = GmailApp.getInboxThreads();
  
  //cycles thru each thread
  for(var i=0; i<allThreads.length; i+=1){//start 1st for
    var curMessages = allThreads[i].getMessages();
    
    //cycles thru each email
    for(var x=0; x<curMessages.length; x+=1){//start 2nd for
      var curSubject = curMessages[x].getSubject();
      
      //if a form response script had a problem
      if(curSubject.indexOf("Summary of failures for Google Apps Script:") !== -1  &&  curSubject.indexOf("FormResponseUpdate") !== -1){//start 1st if
        
        //if its an unread message 
        //its done like this to lessen the amount of api calls
        if(curMessages[x].isUnread()){//start 2nd if
          emailProblems = emailProblems + "\n\n ~ " + curSubject.replace("Summary of failures for Google Apps Script: ", "") + "\nEmail Date: "
            + FunctionContainer.dateReplace(curMessages[x].getDate()) + "\nEmail Body: " + curMessages[x].getPlainBody().replace(/\n|\r/g, "");
          curMessages[x].star().markRead();
          console.log(emailProblems);
        }//end 2nd if
        
        
      }//end 1st if
      
    }//end 2nd for
    
    //moves thread to archive
    allThreads[i].markRead().moveToArchive();
    
    //waits so it doesnt time out the script
    Utilities.sleep(500);
  }//end 1st for
  
  
  //adds script warning heading to text file if any script warning are found
  if(scriptProblems !== ""  ||  emailProblems !== ""){//start 1st if
    textFileText = textFileText + "Script Warnings\n\n";
  }//end 1st if
  
  //if any script problems were found
  if(scriptProblems !== ""){//start 1st if
    textFileText = textFileText + "Below are scripts that need to be manually retriggered:" + scriptProblems + "\n\n\n";
  }//end 1st if
  
  //if any email problems were found
  if(emailProblems !== ""){//start 1st if
    textFileText = textFileText + "Below are form response scripts that have failed to run and need to be double checked to see if any further action is needed:" 
      + emailProblems;
  }//end 1st if
  
  
  
  
  
  
  
  
  
  ///*** FILE CREATION AND DISCORD FILE URL SEND ***///
  
  //sends doc to high tech comms
  if(textFileText !== ""){//start 1st if
    //creates text file to send thru discord
    var textFileURL = DriveApp.getFolderById(dllscv[107][2].toString())
      .createFile(currentDate + " ~ All Database Checks", textFileText, MimeType.PLAIN_TEXT).getUrl();

    //sends embedded message into high tech comms
    FunctionContainer.discordGeekSquadWarning("Potential Problems Have Been Found", "This [text document](" + textFileURL + ") should contain any needed information to rectify the problem(s). If you require any extra information you will need to find it yourself by looking at a script's executions and code itself or into the data centers");
  }//end 1st if
  
  
  
  
  
}//end main