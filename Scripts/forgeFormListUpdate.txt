function forgeFormListUpdate(){
  errorCheck("4:05",12,"forgeFormListUpdate","ForgeFormListUpdate");
}//end forgeFormListUpdate


function errorCheck(time,col,functionName,projectName){
  try{main();triggerCreator(time,col,functionName);}//end 1st try
  catch(error){console.log(error);
    if(error.name.toString()==="Exception"&&error.message.toString().indexOf("a server error occurred")!==-1){
      try{Utilities.sleep(5000);triggerCreator(time,col,functionName);}//end 2nd try
      catch(error){console.log(error);
        if(error.name.toString()==="Exception"&&error.message.toString().indexOf("a server error occurred")!==-1){
          try{Utilities.sleep(5000);triggerCreator(time,col,functionName);}//end 3rd try
          catch(error){console.log(error);
            FunctionContainer.discErrorReport(error,functionName,projectName);}}//end 3rd catch
        else{FunctionContainer.discErrorReport(error,functionName,projectName);}}}//end 2nd catch
    else{FunctionContainer.discErrorReport(error,functionName,projectName);}}//end 1st catch
}//end errorCheck


function triggerCreator(ct,tColNum,scriptName){
  var datSheetOriginal=FunctionContainer.tripleTryOpenSheet("", "Dates");var cdd=datSheetOriginal.getRange(1,1,15,datSheetOriginal.getLastColumn()).getValues();var triggerChangesMade = [];var vals = [[],[],[],[],[],[],[],[],[],[],[]];
  triggerChangesMade.push("Old Trigger Id's and Dates:\nTrigger ID: "+cdd[9][tColNum-1].toString()+" For Date: "+cdd[1][tColNum-1].toString()+" ~\nTrigger ID: "+cdd[10][tColNum-1].toString()+" For Date: "+cdd[4][tColNum-1].toString()+" ~\nTrigger ID: "+cdd[11][tColNum-1].toString()+" For Date: "+cdd[5][tColNum-1].toString());
  if(FunctionContainer.dateReplace(cdd[1][tColNum-1].toString())===FunctionContainer.dateReplace(cdd[1][0].toString())&&FunctionContainer.dateReplace(cdd[4][tColNum-1].toString())===FunctionContainer.dateReplace(cdd[0][0].toString())&&FunctionContainer.dateReplace(cdd[5][tColNum-1].toString())===FunctionContainer.dateReplace(cdd[2][0].toString())){
    var t=ScriptApp.getProjectTriggers();for(var i=0;i<t.length;i++){if(t[i].getUniqueId()===cdd[9][tColNum-1].toString()){ScriptApp.deleteTrigger(t[i]);triggerChangesMade.push("\nTrigger Deleted ~ "+cdd[9][tColNum-1].toString()+" for date: "+cdd[1][tColNum-1].toString());}}
    var bruhX3 = cdd[3][0].toString();for(var iii = 0;iii<4;iii++){cdd[iii][0]=cdd[iii][0].toString()}var triggerTime="";var months=["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"];
    for(var m=0;m<months.length;m++){if(bruhX3.indexOf(months[m].toString())!==-1){m=m+1;triggerTime = bruhX3[11].toString()+bruhX3[12].toString()+bruhX3[13].toString()+bruhX3[14].toString()+"-"+m+"-"+bruhX3[8].toString()+bruhX3[9].toString()+" "+ct;break}}
    var tt=datSheetOriginal.getRange(6,tColNum).setValue(triggerTime).setNumberFormat('M/d/yyyy H:mm:ss').getValue();var uniqueTriggerID = ScriptApp.newTrigger(scriptName).timeBased().at(tt).create().getUniqueId();triggerChangesMade.push("\nTrigger Added ~ "+uniqueTriggerID+" For Date: "+tt.toString());
    vals[0] = [cdd[4][tColNum-1]];vals[1] = [cdd[2][tColNum-1]];vals[2] = [cdd[3][tColNum-1]];vals[3] = [cdd[5][tColNum-1]];vals[4] = [tt];vals[5] = [cdd[6][tColNum-1]];vals[6] = [cdd[7][tColNum-1]];vals[7] = [cdd[8][tColNum-1]];
    vals[8] = [cdd[10][tColNum-1]];vals[9] = [cdd[11][tColNum-1]];vals[10] = [uniqueTriggerID];datSheetOriginal.getRange(2,tColNum,vals.length).setValues(vals);}
  else if(FunctionContainer.dateReplace(cdd[1][tColNum-1].toString())===FunctionContainer.dateReplace(cdd[0][0].toString())&&FunctionContainer.dateReplace(cdd[4][tColNum-1].toString())===FunctionContainer.dateReplace(cdd[2][0].toString())&&FunctionContainer.dateReplace(cdd[5][tColNum-1].toString())===FunctionContainer.dateReplace(cdd[3][0].toString())){triggerChangesMade.push("\nNo Trigger Changes Made");}
  else{var t=ScriptApp.getProjectTriggers();for(var i=0;i<t.length;i++){triggerChangesMade.push("\nTrigger Deleted ~ "+t[i].getUniqueId());ScriptApp.deleteTrigger(t[i]);}var cd=datSheetOriginal.getRange(1,1,4).getValues();
    for(var iii = 0;iii<4;iii++){cd[iii]=cd[iii].toString()}var triggerTime="";var months=["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"];for(var m=0;m<months.length;m++){if(cd[0].indexOf(months[m].toString())!==-1){
    m=m+1;triggerTime = cd[0][11].toString()+cd[0][12].toString()+cd[0][13].toString()+cd[0][14].toString()+"-"+m+"-"+cd[0][8].toString()+cd[0][9].toString()+" "+ct;break}}var tt=datSheetOriginal.getRange(2,tColNum).setValue(triggerTime).setNumberFormat('M/d/yyyy H:mm:ss').getValue();
    var uniqueTriggerID = ScriptApp.newTrigger(scriptName).timeBased().at(tt).create().getUniqueId();triggerChangesMade.push("\nTrigger Added ~ "+uniqueTriggerID+" For Date: "+tt.toString());vals[0] = [tt];vals[8] = [uniqueTriggerID];var triggerTime="";
    var months=["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"];for(var m=0;m<months.length;m++){if(cd[2].indexOf(months[m].toString())!==-1){m=m+1;triggerTime = cd[2][11].toString()+cd[2][12].toString()+cd[2][13].toString()+cd[2][14].toString()+"-"+m+"-"+cd[2][8].toString()+cd[2][9].toString()+" "+ct;break}}
    var tt=datSheetOriginal.getRange(5,tColNum).setValue(triggerTime).setNumberFormat('M/d/yyyy H:mm:ss').getValue();var uniqueTriggerID = ScriptApp.newTrigger(scriptName).timeBased().at(tt).create().getUniqueId();triggerChangesMade.push("\nTrigger Added ~ "+uniqueTriggerID+" For Date: "+tt.toString());
    vals[3] = [tt];vals[9] = [uniqueTriggerID];var triggerTime="";var months=["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"];for(var m=0;m<months.length;m++){if(cd[3].indexOf(months[m].toString())!==-1){m=m+1;
    triggerTime = cd[3][11].toString()+cd[3][12].toString()+cd[3][13].toString()+cd[3][14].toString()+"-"+m+"-"+cd[3][8].toString()+cd[3][9].toString()+" "+ct;break}}var tt=datSheetOriginal.getRange(6,tColNum).setValue(triggerTime).setNumberFormat('M/d/yyyy H:mm:ss').getValue();var uniqueTriggerID = ScriptApp.newTrigger(scriptName).timeBased().at(tt).create().getUniqueId();
    triggerChangesMade.push("\nTrigger Added ~ "+uniqueTriggerID+" For Date: "+tt.toString());vals[1] = [cdd[2][tColNum-1]];vals[2] = [cdd[3][tColNum-1]];vals[4] = [tt];vals[5] = [cdd[6][tColNum-1]];vals[6] = [cdd[7][tColNum-1]];vals[7] = [cdd[8][tColNum-1]];vals[10] = [uniqueTriggerID];datSheetOriginal.getRange(2,tColNum,vals.length).setValues(vals);}console.log(triggerChangesMade);
}//end triggerCreator


function main(){
  try{var lock = LockService.getScriptLock();lock.waitLock(150000);}catch(lockError){console.log(lockError)};
  
  
  //PXE Member Data Current Members Sheet
  var curVals = FunctionContainer.getpmdcmscv();
  var pmdcmscv = curVals[1];
  curVals = undefined;
  
  
  //Data Lists Lists Sheet
  curVals = FunctionContainer.getdllscv();
  var dllscv = curVals[1];
  curVals = undefined;
  
  
  formListUpdate(dllscv, pmdcmscv);
  
}//end main

function formListUpdate(dllscv, pmdcmscv){
  
  
  //Forge Form
  var ff = FormApp.openById(dllscv[85][1].toString());
//  FunctionContainer.getDaFormIds(dllscv[85][1].toString());
  
  
  //Forge Hub Active Maps sheet
  var curVals = FunctionContainer.getfhamscv("date", dllscv);
  var fhams = curVals[0];
  var fhamscv = curVals[1];
  curVals = undefined;
  
  
  //Forge Hub Inactive Maps sheet
  var curVals = FunctionContainer.getfhimscv("date", dllscv);
  var fhims = curVals[0];
  var fhimscv = curVals[1];
  curVals = undefined;
  
  
  //All Date Questions
  var datesMinus7 = [[FunctionContainer.dateReplace(dllscv[10][0])+" (Today)"],
    [FunctionContainer.dateReplace(dllscv[10][21])+" (Yesterday)"],
    [FunctionContainer.dateReplace(dllscv[10][20])+" (2 Days ago)"],
    [FunctionContainer.dateReplace(dllscv[10][19])+" (3 Days ago)"],
    [FunctionContainer.dateReplace(dllscv[10][18])+" (4 Days ago)"],
    [FunctionContainer.dateReplace(dllscv[10][17])+" (5 Days ago)"],
    [FunctionContainer.dateReplace(dllscv[10][16])+" (6 Days ago)"]];
  
  var allDateQsIDs = [["189712365"],["420158212"],["666103756"]];
  
  for(var i=0; i<allDateQsIDs.length; i+=1){
    ff.getItemById(allDateQsIDs[i].toString()).asListItem().setChoiceValues(datesMinus7);
  }//end 1st for
  

  //Purpose of Map
  var trainingTypes = [];
  for(var i = 0; i<dllscv[14].length; i+=1){
    if(dllscv[14][i].toString()!==""&&dllscv[14][i].toString()!=="Training Types"){
      trainingTypes.push([dllscv[14][i].toString()]);
    }//end 1st if
  }//end 1st for
  trainingTypes = FunctionContainer.specialSort(trainingTypes);
  
  //Purpose 1
  ff.getItemById("819789314").asListItem().setChoiceValues(trainingTypes);
  
  //Purpose 2
  ff.getItemById("1940232280").asListItem().setChoiceValues(trainingTypes);
  
  
  //Map Group Q's
  var mapGroupSelectionIChoices = ["All Groups"];
  for(var i=1; i<165; i+=13){
    for(var x=0; x<10; x+=1){
      if(dllscv[x][i]==="Active"){
        mapGroupSelectionIChoices.push([dllscv[x][i-1].toString()]);
      }//end 1st if
    }//end 2nd for
  }//end 2nd for
  
  //Group 1
  ff.getItemById("1120953795").asListItem().setChoiceValues(mapGroupSelectionIChoices);
  
  //Group 2
  ff.getItemById("537943590").asListItem().setChoiceValues(mapGroupSelectionIChoices);
  
  
  //Map Owner, Creator, Asstistant Creators, Editors, Verification Personnel Q's
  var allForgers = [];
  var verificationPersonnel = [];
  var forgeCreds = FunctionContainer.splitEmUp(dllscv[34][0].toString());
  var veriPersCreds = FunctionContainer.splitEmUp(dllscv[35][0].toString());
  
  for(var i=0; i<pmdcmscv.length; i+=1){//start 1st for
    var curCreds = FunctionContainer.splitEmUp(pmdcmscv[i][4].toString());
    for(var x=0; x<curCreds.length; x+=1){//start 2nd for
      
      for(var y=0; y<forgeCreds.length; y+=1){//start 3rd for
        //if they have a cred thats included in forgeCreds
        if(curCreds[x].toString() === forgeCreds[y].toString()){//start 1st if
          allForgers.push(pmdcmscv[i][0].toString());
          y = forgeCreds.length+1;
        }//end 1st if
      }//end 3rd for
      
      for(var y=0; y<veriPersCreds.length; y+=1){//start 3rd for
        //if they have a cred thats included in 
        if(curCreds[x].toString() === veriPersCreds[y].toString()){//start 1st if
          verificationPersonnel.push(pmdcmscv[i][0].toString());
          y = veriPersCreds.length+1;
        }//end 1st if
      }//end 3rd for
      
    }//end 2nd for
  }//end 1st for
  
  //gets rid of duplicates
  verificationPersonnel = FunctionContainer.arrayDuplicateFilter(verificationPersonnel);
  //if array is empty it fills it
  if(verificationPersonnel.length === 0){//start 1st if
    verificationPersonnel = [["N/A"]];
  }//end 1st if
  
  //gets rid of duplicates
  allForgers = FunctionContainer.arrayDuplicateFilter(allForgers);
  //if array is empty it fills it
  if(allForgers.length === 0){//start 1st if
    allForgers = [["N/A"]];
  }//end 1st if
  
  //map owner 1
  ff.getItemById("1686917321").asListItem().setChoiceValues(allForgers);
  
  //map owner 2
  ff.getItemById("1506311845").asListItem().setChoiceValues(allForgers);
  
  //Creator 1
  ff.getItemById("1579071194").asListItem().setChoiceValues(allForgers);
  
  //Creator 2
  ff.getItemById("1320753891").asListItem().setChoiceValues(allForgers);
  
  //Editors 1
  ff.getItemById("1895052278").asCheckboxItem().setChoiceValues(allForgers);
  
  if(allForgers.toString() !== "N/A"){//start 1st if
    allForgers.unshift(["N/A"]);
  }//end 1st if
  
  //Asstistant Creators 1
  ff.getItemById("430103396").asCheckboxItem().setChoiceValues(allForgers);
  
  //Asstistant Creators 2
  ff.getItemById("1968336272").asCheckboxItem().setChoiceValues(allForgers);
  
  //Verification Personnel 1
  ff.getItemById("908507723").asCheckboxItem().setChoiceValues(verificationPersonnel);
  
  //Verification Personnel 2
  ff.getItemById("1799910697").asCheckboxItem().setChoiceValues(verificationPersonnel);
  
  
  //Active Map in Question
  var allActiveMaps = [["N/A"]];
  for(var i=0; i<fhamscv.length; i+=1){
    allActiveMaps.push(fhamscv[i][0].toString());
  }//end 1st for
  allActiveMaps = FunctionContainer.arrayDuplicateFilter(allActiveMaps);
  ff.getItemById("2121321663").asListItem().setChoiceValues(allActiveMaps);
  
  
  //Inactive Map in Question
  var allInactiveMaps = [["N/A"]];
  for(var i=0; i<fhimscv.length; i+=1){
    allInactiveMaps.push(fhimscv[i][0].toString());
  }//end 1st for
  allInactiveMaps = FunctionContainer.arrayDuplicateFilter(allInactiveMaps);
  ff.getItemById("1552003783").asListItem().setChoiceValues(allInactiveMaps);
  
  
  //Lacedamon map callouts
  var pxeMapsForCallouts = [];
  var pxeMapsForCalloutsFolders = DriveApp.getFolderById("1KZMxZSnyhN_jpQjaAJ_yj7iDz-bee-Zv").getFolders();
  while(pxeMapsForCalloutsFolders.hasNext()){
    pxeMapsForCallouts.push([pxeMapsForCalloutsFolders.next().getName()]);
  }//end while
  
  ff.getItemById("1723190585").asListItem().setChoiceValues(pxeMapsForCallouts);
  
  
  //Other clan map callouts
  var otherClanMapsForCallouts = [];
  var otherClanMapsForCalloutsFolders1 = DriveApp.getFolderById("1fRH49Utx3tbpqze03AKEFlcQUMmrdC6L").getFolders();
  while(otherClanMapsForCalloutsFolders1.hasNext()){
    var currentFolderID = otherClanMapsForCalloutsFolders1.next().getId();
    var otherClanMapsForCalloutsFolders2 = DriveApp.getFolderById(currentFolderID).getFolders();
    var currentFolderName = DriveApp.getFolderById(currentFolderID).getName();
    while(otherClanMapsForCalloutsFolders2.hasNext()){
      otherClanMapsForCallouts.push([currentFolderName+" ~ "+otherClanMapsForCalloutsFolders2.next().getName()]);
    }//end 2nd while
  }//end 1st while
  ff.getItemById("892907993").asListItem().setChoiceValues(otherClanMapsForCallouts);
  
  
  //Which Discord Channel?
  var channels = [];
  for(var i=0; i<100; i+=1){//start 1st for
    if(dllscv[32][i].toString() !== ""){//start 1st if
      channels.push([dllscv[32][i].toString()]);
    }//end 1st if
  }//end 1st for
  ff.getItemById("759972669").asListItem().setChoiceValues(channels);
  
  /* Forge Form
  [22-03-31 16:08:56:180 EDT] [Code, TEXT, 959652100]
  [22-03-31 16:08:56:228 EDT] [Type of Update, MULTIPLE_CHOICE, 1660668095]
  
  [22-03-31 16:08:56:291 EDT] [New Map, PAGE_BREAK, 102513408]
  [22-03-31 16:08:56:338 EDT] [Map Name, TEXT, 559060425]
  [22-03-31 16:08:56:390 EDT] [Associated Gametype, TEXT, 2096391273]
  [22-03-31 16:08:56:440 EDT] [Purpose, LIST, 819789314]
  [22-03-31 16:08:56:489 EDT] [Group (who does the map belong too), LIST, 1120953795]
  [22-03-31 16:08:56:536 EDT] [Description, PARAGRAPH_TEXT, 1329582485]
  [22-03-31 16:08:56:582 EDT] [Map Owner, LIST, 1686917321]
  [22-03-31 16:08:56:627 EDT] [Creator, LIST, 1579071194]
  [22-03-31 16:08:56:678 EDT] [Assistant Creator(s), CHECKBOX, 430103396]
  [22-03-31 16:08:56:728 EDT] [Date of Creation (when it was verified as a map), LIST, 189712365]
  [22-03-31 16:08:56:783 EDT] [Verification Personnel, CHECKBOX, 908507723]
  [22-03-31 16:08:56:831 EDT] [Number of Players Supported, TEXT, 1809590359]
  
  [22-03-31 16:08:56:872 EDT] [Map Edit, PAGE_BREAK, 642999312]
  [22-03-31 16:08:56:930 EDT] [Active Map in Question, LIST, 2121321663]
  [22-03-31 16:08:56:978 EDT] [Inactive Map in Question, LIST, 1552003783]
  [22-03-31 16:08:57:021 EDT] [Edit Description, TEXT, 1267214741]
  [22-03-31 16:08:57:068 EDT] [Date of Edit, LIST, 420158212]
  [22-03-31 16:08:57:111 EDT] [Editor(s), CHECKBOX, 1895052278]
  [22-03-31 16:08:57:155 EDT] [Map Name, TEXT, 578719697]
  [22-03-31 16:08:57:201 EDT] [Associated Gametype, TEXT, 910060775]
  [22-03-31 16:08:57:250 EDT] [Purpose, LIST, 1940232280]
  [22-03-31 16:08:57:299 EDT] [Group (who does the map belong too), LIST, 537943590]
  [22-03-31 16:08:57:344 EDT] [Description, PARAGRAPH_TEXT, 185329864]
  [22-03-31 16:08:57:392 EDT] [Map Owner, LIST, 1506311845]
  [22-03-31 16:08:57:434 EDT] [Creator, LIST, 1320753891]
  [22-03-31 16:08:57:476 EDT] [Assistant Creator(s), CHECKBOX, 1968336272]
  [22-03-31 16:08:57:521 EDT] [Date of Creation (when it was verified as a map), LIST, 666103756]
  [22-03-31 16:08:57:567 EDT] [Verification Personnel, CHECKBOX, 1799910697]
  [22-03-31 16:08:57:619 EDT] [Number of Players Supported, TEXT, 2008149006]
  [22-03-31 16:08:57:662 EDT] [Activate/Deactivate, LIST, 1327244426]
  
  [22-03-31 16:08:57:712 EDT] [Map Callouts, PAGE_BREAK, 515252090]
  [22-03-31 16:08:57:758 EDT] [Delete or Post Map Callouts in Discord?, LIST, 169318692]
  [22-03-31 16:08:57:801 EDT] [Which Discord Channel?, LIST, 759972669]
  [22-03-31 16:08:57:844 EDT] [What Clan's Map?, MULTIPLE_CHOICE, 1373010282]
  
  [22-03-31 16:08:57:889 EDT] [Lacedaemon's Maps, PAGE_BREAK, 1802791871]
  [22-03-31 16:08:57:936 EDT] [Map Selection, LIST, 1723190585]
  
  [22-03-31 16:08:58:013 EDT] [Other Clans' Maps, PAGE_BREAK, 2078021341]
  [22-03-31 16:08:58:057 EDT] [Map Selection, LIST, 892907993]
  */
  
  
}//end formListUpdate