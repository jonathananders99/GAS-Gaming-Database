function miscDailyUpdates(){
  errorCheck("4:01",37,"miscDailyUpdates","MiscDailyUpdates");
}//end miscDailyUpdates


function errorCheck(time,col,functionName,projectName){
  try{main();triggerCreator(time,col,functionName);}//end 1st try
  catch(error){console.log(error);
    if(error.name.toString()==="Exception"&&error.message.toString().indexOf("a server error occurred")!==-1){
      try{Utilities.sleep(5000);triggerCreator(time,col,functionName);}//end 2nd try
      catch(error){console.log(error);
        if(error.name.toString()==="Exception"&&error.message.toString().indexOf("a server error occurred")!==-1){
          try{Utilities.sleep(5000);triggerCreator(time,col,functionName);}//end 3rd try
          catch(error){console.log(error);
            FunctionContainer.discErrorReport(error,functionName,projectName);}}//end 3rd catch
        else{FunctionContainer.discErrorReport(error,functionName,projectName);}}}//end 2nd catch
    else{FunctionContainer.discErrorReport(error,functionName,projectName);}}//end 1st catch
}//end errorCheck


function triggerCreator(ct,tColNum,scriptName){
  var datSheetOriginal=FunctionContainer.tripleTryOpenSheet("", "Dates");var cdd=datSheetOriginal.getRange(1,1,15,datSheetOriginal.getLastColumn()).getValues();var triggerChangesMade = [];var vals = [[],[],[],[],[],[],[],[],[],[],[]];
  triggerChangesMade.push("Old Trigger Id's and Dates:\nTrigger ID: "+cdd[9][tColNum-1].toString()+" For Date: "+cdd[1][tColNum-1].toString()+" ~\nTrigger ID: "+cdd[10][tColNum-1].toString()+" For Date: "+cdd[4][tColNum-1].toString()+" ~\nTrigger ID: "+cdd[11][tColNum-1].toString()+" For Date: "+cdd[5][tColNum-1].toString());
  if(FunctionContainer.dateReplace(cdd[1][tColNum-1].toString())===FunctionContainer.dateReplace(cdd[1][0].toString())&&FunctionContainer.dateReplace(cdd[4][tColNum-1].toString())===FunctionContainer.dateReplace(cdd[0][0].toString())&&FunctionContainer.dateReplace(cdd[5][tColNum-1].toString())===FunctionContainer.dateReplace(cdd[2][0].toString())){
    var t=ScriptApp.getProjectTriggers();for(var i=0;i<t.length;i++){if(t[i].getUniqueId()===cdd[9][tColNum-1].toString()){ScriptApp.deleteTrigger(t[i]);triggerChangesMade.push("\nTrigger Deleted ~ "+cdd[9][tColNum-1].toString()+" for date: "+cdd[1][tColNum-1].toString());}}
    var bruhX3 = cdd[3][0].toString();for(var iii = 0;iii<4;iii++){cdd[iii][0]=cdd[iii][0].toString()}var triggerTime="";var months=["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"];
    for(var m=0;m<months.length;m++){if(bruhX3.indexOf(months[m].toString())!==-1){m=m+1;triggerTime = bruhX3[11].toString()+bruhX3[12].toString()+bruhX3[13].toString()+bruhX3[14].toString()+"-"+m+"-"+bruhX3[8].toString()+bruhX3[9].toString()+" "+ct;break}}
    var tt=datSheetOriginal.getRange(6,tColNum).setValue(triggerTime).setNumberFormat('M/d/yyyy H:mm:ss').getValue();var uniqueTriggerID = ScriptApp.newTrigger(scriptName).timeBased().at(tt).create().getUniqueId();triggerChangesMade.push("\nTrigger Added ~ "+uniqueTriggerID+" For Date: "+tt.toString());
    vals[0] = [cdd[4][tColNum-1]];vals[1] = [cdd[2][tColNum-1]];vals[2] = [cdd[3][tColNum-1]];vals[3] = [cdd[5][tColNum-1]];vals[4] = [tt];vals[5] = [cdd[6][tColNum-1]];vals[6] = [cdd[7][tColNum-1]];vals[7] = [cdd[8][tColNum-1]];
    vals[8] = [cdd[10][tColNum-1]];vals[9] = [cdd[11][tColNum-1]];vals[10] = [uniqueTriggerID];datSheetOriginal.getRange(2,tColNum,vals.length).setValues(vals);}
  else if(FunctionContainer.dateReplace(cdd[1][tColNum-1].toString())===FunctionContainer.dateReplace(cdd[0][0].toString())&&FunctionContainer.dateReplace(cdd[4][tColNum-1].toString())===FunctionContainer.dateReplace(cdd[2][0].toString())&&FunctionContainer.dateReplace(cdd[5][tColNum-1].toString())===FunctionContainer.dateReplace(cdd[3][0].toString())){triggerChangesMade.push("\nNo Trigger Changes Made");}
  else{var t=ScriptApp.getProjectTriggers();for(var i=0;i<t.length;i++){triggerChangesMade.push("\nTrigger Deleted ~ "+t[i].getUniqueId());ScriptApp.deleteTrigger(t[i]);}var cd=datSheetOriginal.getRange(1,1,4).getValues();
    for(var iii = 0;iii<4;iii++){cd[iii]=cd[iii].toString()}var triggerTime="";var months=["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"];for(var m=0;m<months.length;m++){if(cd[0].indexOf(months[m].toString())!==-1){
    m=m+1;triggerTime = cd[0][11].toString()+cd[0][12].toString()+cd[0][13].toString()+cd[0][14].toString()+"-"+m+"-"+cd[0][8].toString()+cd[0][9].toString()+" "+ct;break}}var tt=datSheetOriginal.getRange(2,tColNum).setValue(triggerTime).setNumberFormat('M/d/yyyy H:mm:ss').getValue();
    var uniqueTriggerID = ScriptApp.newTrigger(scriptName).timeBased().at(tt).create().getUniqueId();triggerChangesMade.push("\nTrigger Added ~ "+uniqueTriggerID+" For Date: "+tt.toString());vals[0] = [tt];vals[8] = [uniqueTriggerID];var triggerTime="";
    var months=["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"];for(var m=0;m<months.length;m++){if(cd[2].indexOf(months[m].toString())!==-1){m=m+1;triggerTime = cd[2][11].toString()+cd[2][12].toString()+cd[2][13].toString()+cd[2][14].toString()+"-"+m+"-"+cd[2][8].toString()+cd[2][9].toString()+" "+ct;break}}
    var tt=datSheetOriginal.getRange(5,tColNum).setValue(triggerTime).setNumberFormat('M/d/yyyy H:mm:ss').getValue();var uniqueTriggerID = ScriptApp.newTrigger(scriptName).timeBased().at(tt).create().getUniqueId();triggerChangesMade.push("\nTrigger Added ~ "+uniqueTriggerID+" For Date: "+tt.toString());
    vals[3] = [tt];vals[9] = [uniqueTriggerID];var triggerTime="";var months=["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"];for(var m=0;m<months.length;m++){if(cd[3].indexOf(months[m].toString())!==-1){m=m+1;
    triggerTime = cd[3][11].toString()+cd[3][12].toString()+cd[3][13].toString()+cd[3][14].toString()+"-"+m+"-"+cd[3][8].toString()+cd[3][9].toString()+" "+ct;break}}var tt=datSheetOriginal.getRange(6,tColNum).setValue(triggerTime).setNumberFormat('M/d/yyyy H:mm:ss').getValue();var uniqueTriggerID = ScriptApp.newTrigger(scriptName).timeBased().at(tt).create().getUniqueId();
    triggerChangesMade.push("\nTrigger Added ~ "+uniqueTriggerID+" For Date: "+tt.toString());vals[1] = [cdd[2][tColNum-1]];vals[2] = [cdd[3][tColNum-1]];vals[4] = [tt];vals[5] = [cdd[6][tColNum-1]];vals[6] = [cdd[7][tColNum-1]];vals[7] = [cdd[8][tColNum-1]];vals[10] = [uniqueTriggerID];datSheetOriginal.getRange(2,tColNum,vals.length).setValues(vals);}console.log(triggerChangesMade);
}//end triggerCreator


function main(){
  //format dates and numbers in pmdcms
  //code updates
  //inactivity updates
  //map used x times and win/loss
  //forge Maps By Purpose
  //calendar update
  //perm semi-hub
  
  
  //Data Lists Lists Sheet
  var curVals = FunctionContainer.getdllscv();
  var dlls = curVals[0];
  var dllscv = curVals[1];
  curVals = undefined;
  
  
  
  
  
  ///*** CREDENTIAL AND TRAINING TYPE GAPS ***///
  
  //cycle 100 times
  var tts = [];
  var creds1 = [];
  var creds2 = [];
  var creds3 = [];
  var creds4 = [];
  for(var i=1; i<100; i+=1){//start 1st for
    //training types first
    if(dllscv[14][i].toString() !== ""  &&  dllscv[14][i].toString() !== "N/A"){//start 1st if
      tts.push(dllscv[14][i].toString());
    }//end 1st if
    
    //Authorities
    if(dllscv[16][i].toString() !== ""  &&  dllscv[16][i].toString() !== "N/A"){//start 1st if
      creds1.push(dllscv[16][i].toString());
    }//end 1st if
    
    //Signifiers
    if(dllscv[18][i].toString() !== ""  &&  dllscv[18][i].toString() !== "N/A"){//start 1st if
      creds2.push(dllscv[18][i].toString());
    }//end 1st if
    
    //Chess Pieces
    if(dllscv[20][i].toString() !== ""  &&  dllscv[20][i].toString() !== "N/A"){//start 1st if
      creds3.push(dllscv[20][i].toString());
    }//end 1st if
    
    //Titles
    if(dllscv[22][i].toString() !== ""  &&  dllscv[22][i].toString() !== "N/A"){//start 1st if
      creds4.push(dllscv[22][i].toString());
    }//end 1st if
    
  }//end 1st for
  
  //adds necessary blanks to end
  for(var i=0; i<100; i+=1){//start 1st for
    
    if(i>tts.length-1){//start 1st if
      tts.push("");
    }//end 1st if
    
    if(i > creds1.length-1){//start 1st if
      creds1.push("");
    }//end 1st if
    
    if(i > creds2.length-1){//start 1st if
      creds2.push("");
    }//end 1st if
    
    if(i > creds3.length-1){//start 1st if
      creds3.push("");
    }//end 1st if
    
    if(i > creds4.length-1){//start 1st if
      creds4.push("");
    }//end 1st if
    
  }//end 1st for
  
  //adds data to dlls
  FunctionContainer.tripleTrySetSSValues(dlls, 15, 2, 1, tts.length, [tts]);
  FunctionContainer.tripleTrySetSSValues(dlls, 17, 2, 1, creds1.length, [creds1]);
  FunctionContainer.tripleTrySetSSValues(dlls, 19, 2, 1, creds2.length, [creds2]);
  FunctionContainer.tripleTrySetSSValues(dlls, 21, 2, 1, creds3.length, [creds3]);
  FunctionContainer.tripleTrySetSSValues(dlls, 23, 2, 1, creds4.length, [creds4]);
  
  
  
  
  
  
  ///*** FORMAT DATES IN PHOENIX MEMBER DATA SHEETS ***///
  //Phoenix Member Data Current Members Sheet
  var curVals = FunctionContainer.getpmdcmscv("min");
  var pmdcms = curVals[0];
  var pmdcmslri = curVals[1];
  curVals = undefined;
  
  //Phoenix Member Data Discharged Members Sheet
  var curVals = FunctionContainer.getpmddmscv("min");
  var pmddms = curVals[0];
  var pmddmslri = curVals[1];
  curVals = undefined;
  
  //cushion date
  FunctionContainer.tripleTrySetNumberFormat(pmdcms, 2, 21, pmdcmslri-1, 3, 'mmm" "dd" "yyyy');
  FunctionContainer.tripleTrySetNumberFormat(pmdcms, 2, 24, pmdcmslri-1, 1, "#,##0.00");
  FunctionContainer.tripleTrySetNumberFormat(pmddms, 2, 24, pmddmslri-1, 1, "#,##0.00");
  
  //enlistment date and discharge date
  FunctionContainer.tripleTrySetNumberFormat(pmddms, 2, 21, pmddmslri-1, 3, 'mmm" "dd" "yyyy');
  FunctionContainer.tripleTrySetNumberFormat(pmdcms, 2, 28, pmdcmslri-1, 2, "#,##0.00");
  FunctionContainer.tripleTrySetNumberFormat(pmddms, 2, 28, pmddmslri-1, 2, "#,##0.00");
  
  
  
  
  
  ///*** DLLS FORMULA FIX ***///
  var formulas = [["=TODAY()", "=TODAY()", "=TODAY()+365", "=TODAY()+365", "=TODAY()+6", "=TODAY()+6", "=TODAY()+5",
    "=TODAY()+4", "=TODAY()+3", "=TODAY()+2", "=TODAY()+1", "=TODAY()+7", "=TODAY()-7", "=TODAY()-7", "=NOW()", 
    "=NOW()", "=TODAY()-6", "=TODAY()-5", "=TODAY()-4", "=TODAY()-3", "=TODAY()-2", "=TODAY()-1"]];
  dlls.getRange(11,1,1,22).setFormulas(formulas);
  
  
  
  
  
  
  ///*** UPDATE MISC FOLDER NAMES ***///
  var newNames = [];
  var curName = "";
  for(var i=0; i<10; i+=1){//start 1st for
    curName = DriveApp.getFolderById(dllscv[100][i].toString()).getName().trim();
    dllscv[99][i] = curName;
    newNames.push(curName);
  }//end 1st for
  //paste new names
  FunctionContainer.tripleTrySetSSValues(dlls, 100, 1, 1, 10, [newNames]);
  
  
  
  
  
  
  ///*** DISCORD CALENDAR UPDATE ***///
  FunctionContainer.updateDiscordCalendar(dllscv);
  
  
  
  
  
  
  
  ///*** CODE CHANGE **///
  var allNewCodes = [];
  
  for(var i=0; i<6; i+=1){//start 1st for
    allNewCodes.push(FunctionContainer.randomString(Math.floor(Math.random()*90+10)));
  }//end 1st for
  
  //creates message to send to discord
  //ec$om$^New Message 1^Channel Name 1^New Message 2^Channel Name 2
  //^New Message 3^Channel Name 3^New Message 4^Channel Name 4^New Message 5
  //^Channel Name 5^New Message 6^Channel Name 6
  var message = "ec$om$^" + allNewCodes[0].toString() + "^code-1^" + allNewCodes[1].toString()
    + "^code-2^" + allNewCodes[2].toString() + "^code-3^" + allNewCodes[3].toString() + "^code-4^" 
    + allNewCodes[4].toString() + "^code-5^" + allNewCodes[5].toString() + "^code-6";
  
  //pastes new values
  FunctionContainer.tripleTrySetSSValues(dlls, 30, 1, 1, 6, [allNewCodes]);
 
  //sends new vals to discord
  FunctionContainer.discordDailyUpdates(message);
  
  
  
  
  ///*** INACTIVITY ***///
  //Phoenix Member Data Current Members Sheet
  var curVals = FunctionContainer.getpmdcmscv("date");
  var pmdcms = curVals[0];
  var pmdcmscv = curVals[1];
  curVals = undefined;
  
  //Data Lists Lists Sheet
  curVals = FunctionContainer.getdllscv();
  var dlls = curVals[0];
  var dllscv = curVals[1];
  var currentDateNum = dllscv[10][1];
  var currentDate = FunctionContainer.dateReplace(dllscv[10][0]);
  curVals = undefined;
  
  //Event Debrief Hub all Event debriefs sheet
  curVals = FunctionContainer.getedhaedscv("both", dllscv);
  var edhaeds = curVals[0];
  var edhaedscv = curVals[1];
  var edhaedscvn = curVals[2];
  curVals = undefined;
  
  
  //cycles thru pmdcmscv
  for(var i=0; i<pmdcmscv.length; i+=1){//start 1st for
    
    var oldStatus = pmdcmscv[i][8].toString();
    
    //if they arent loa or inquiry
    if(oldStatus!=="LOA"){
      
      var curGt = pmdcmscv[i][0].toString();
      
      //Attendance
      var curAttendanceArray = [];
      var curAttendanceArrayDates = [];
      
      //finds attencance array by cycling thru event array
      for(var x=0; x<edhaedscvn.length; x+=1){//start 2nd for
        
        //if event contains gt in its attendees cell
        if(edhaedscvn[x][8].toString().indexOf(curGt)!==-1){//start 2nd if
          curAttendanceArray.push([edhaedscvn[x][0],"Event Type: "+edhaedscvn[x][3].toString()+" ~ Leader: "+edhaedscvn[x][6].toString()+" ~ Debrief: "+edhaedscvn[x][9].toString()+" ~ Additional Notes: "+edhaedscvn[x][10].toString()]);
          curAttendanceArrayDates.push([FunctionContainer.dateReplace(edhaedscv[x][0]),"Event Type: "+edhaedscvn[x][3].toString()+" ~ Leader: "+edhaedscvn[x][6].toString()+" ~ Debrief: "+edhaedscvn[x][9].toString()+" ~ Additional Notes: "+edhaedscvn[x][10].toString()]);
        }//end 2nd if
        
      }//end 2nd for
      
      var cushionDate = FunctionContainer.dateReplace(pmdcmscv[i][22]);
      var cushionDateNum = pmdcmscv[i][23];
      var minActiveDays = dllscv[79][0];
      var curEnlistmentDate = FunctionContainer.dateReplace(pmdcmscv[i][20]);
      var curEnlistmentDateNum = pmdcmscv[i][27];
      var curStatus = "";
      
      //if their enlistment day is further than minActiveDays days from today
      if(currentDateNum-curEnlistmentDateNum>=minActiveDays&&currentDateNum-cushionDateNum>=minActiveDays){//start 2nd if
        
        //if attendance length is > 0;
        if(curAttendanceArray.length>0){//start 3rd if
          
          //if they havent been to practice for minActiveDays+ days from last event
          if(currentDateNum-curAttendanceArray[0][0]>=minActiveDays){//start 4th if
            curStatus = "Inactive";
          }//end 4th if
          
        }//end 3rd if
        
        //if attendance length is = 0;
        else if(curAttendanceArray.length===0){//start 3rd if/else
          
          //if enlistment day is more than cushion date
          if(curEnlistmentDateNum>cushionDateNum){//start 4th if
            
            //if curEnlistmentDateNum minus currentDateNum is more than minActiveDays
            if(currentDateNum-curEnlistmentDateNum>minActiveDays){//start 5th if
              curStatus = "Inactive";
            }//end 5th if
        
          }//end 4th if
          
          //if enlistment day is less than cushion date
          else if(curEnlistmentDateNum<cushionDateNum){//start 4th if/else
            
            //if cushion date minus currentDateNum is more than minActiveDays
            if(currentDateNum-cushionDateNum>minActiveDays){//start 5th if
              curStatus = "Inactive";
            }//end 5th if
            
          }//end 4th if/else
          
        }//end 3rd if/else
        
      }//end 2nd if
      
      //if they arent inactive
      if(curStatus===""){//start 2nd if
        curStatus = "Active";
      }//end 2nd if
      
      pmdcmscv[i][8] = curStatus;
    }//end 1st if
    
  }//end 1st for
  
  //pastes new data
  FunctionContainer.tripleTrySetSSValues(pmdcms, 2, 1, pmdcmscv.length, pmdcmscv[0].length, pmdcmscv);
  
  
  
  
  
  ///*** TIMES MAPS USED AND WINS/LOSSES ***///
  
  //Forge Hub Active Maps sheet
  curVals = FunctionContainer.getfhamscv(["date"], dllscv);
  var fhams = curVals[0];
  var fhamslri = curVals[2];
  var fhamscv = curVals[1];
  curVals = undefined;
  
  
  //Forge Hub Inactive Maps sheet
  curVals = FunctionContainer.getfhimscv(["date"], dllscv);
  var fhims = curVals[0];
  var fhimslri = curVals[2];
  var fhimscv = curVals[1];
  curVals = undefined;
  
  
  //active maps first
  //cycles thru active maps
  for(var i=0; i<fhamscv.length; i+=1){//start 1st for
    fhamscv[i][11] = 0;
    var wins = 0;
    var losses = 0;
    var ties = 0;
    
    //cycles thru events
    for(var x=0; x<edhaedscv.length; x+=1){//start 2nd for
      
      var currentMapsUsed = FunctionContainer.splitEmUp(edhaedscv[x][11].toString());
      
      //cycles thru currentMapsUsed
      for(var y=0; y<currentMapsUsed.length; y+=1){//start 3rd for
        if(fhamscv[i][0].toString()===currentMapsUsed[y].toString()){//start 1st if
          fhamscv[i][11] = fhamscv[i][11]+1;
          
          var winOrLoss = edhaedscv[x][5].toString();
          
          //if it was a tie
          if(winOrLoss==="Tie"){//start 2nd if
            ties = ties + 1;
          }//end 2nd if
          
          //if it was a loss
          if(winOrLoss==="Loss"){//start 2nd if
            losses = losses + 1;
          }//end 2nd if
          
          //if it was a win
          if(winOrLoss==="Win"){//start 2nd if
            wins = wins + 1;
          }//end 2nd if
          
        }//end 1st if
      }//end 3rd for
      
    }//end 2nd for
    
    fhamscv[i][12] = "Wins: " + wins + "\nLosses: " + losses + "\nTies: " + ties;
    
  }//end 1st for
  
  //pastes data
  FunctionContainer.tripleTrySetSSValues(fhams,3,1,fhamslri-2,15,fhamscv);
  
  
  //inactive maps next
  //cycles thru inactive maps
  for(var i=0; i<fhimscv.length; i+=1){//start 1st for
    fhimscv[i][11] = 0;
    
    //cycles thru events
    for(var x=0; x<edhaedscv.length; x+=1){//start 2nd for
      
      var currentMapsUsed = FunctionContainer.splitEmUp(edhaedscv[x][11].toString());
      //cycles thru currentMapsUsed
      for(var y=0; y<currentMapsUsed.length; y+=1){//start 3rd for
        if(fhimscv[i][0].toString()===currentMapsUsed[y].toString()){//start 1st if
          fhimscv[i][11] = fhimscv[i][11]+1;
        }//end 1st if
      }//end 3rd for
      
    }//end 2nd for
    
  }//end 1st for
  
  //pastes data
  FunctionContainer.tripleTrySetSSValues(fhims,3,1,fhimslri-2,15,fhimscv);
  
  
  
  
  
  
  ///*** FORGE MAPS BY PURPOSE SHEET UPDATE ***///
  //Forge Hub Active Maps Sheet
  curVals = FunctionContainer.getfhamscv("date", dllscv);
  var fhams = curVals[0];
  var fhamslri = curVals[2];
  var fhamscv = curVals[1];
  curVals = undefined;
  
  //Forge Hub Active Maps By Purpose Sheet
  curVals = FunctionContainer.getfhambpscv("min", dllscv);
  var fhambps = curVals[0];
  var fhambpslri = curVals[1];
  curVals = undefined;
  
  //active maps first
  //cycles thru active maps and switch places of necessary vals
  for(var i=0; i<fhamscv.length; i+=1){//start 1st for
    var temp = fhamscv[i][0].toString();
    fhamscv[i][0] = fhamscv[i][2].toString();
    fhamscv[i][2] = fhamscv[i][1].toString();
    fhamscv[i][1] = temp;
  }//end 1st for
  
  //organize
  fhamscv = FunctionContainer.specialSort(fhamscv);
  
  //remove rows
  if(fhambpslri>2){//start 1st if
    FunctionContainer.tripleTryDeleteRows(fhambps, 3, fhambpslri-2);
  }//end 1st if
  
  if(fhamslri>2){//start 1st if
    //adds rows
    FunctionContainer.tripleTryAddRows(fhambps, 2, fhamslri-2);
    
    //pastes data
    FunctionContainer.tripleTrySetSSValues(fhambps,3,1,fhamslri-2,15,fhamscv);
    
    //changes all rows to normal size
    FunctionContainer.tripleTrySetRowsSize(fhambps, 3, fhamslri-2, 175);

    //formats everything to make sure its correctly formatted
    fhambps.getRange(3,1,fhamslri-2,15).setBorder(true, true, true, true, true, true, '#000000', SpreadsheetApp.BorderStyle.SOLID).setFontWeight(null);
    fhambps.getRange(1,1,fhamslri,15).setBorder(true, true, true, true, null, null, '#000000', SpreadsheetApp.BorderStyle.SOLID_THICK);
  
  }//end 1st if




  ///*** PERMISSIONS SEMIHUB ***////
  //pretty much member hub but instead of creds its perms
  //declares necessary vars
  //perm semi hub sheet
  var mhags = FunctionContainer.tripleTryOpenSheet("","Permissions");
  var mhagsmri = FunctionContainer.tripleTryGetMaxRows(mhags);
  var mhagsmci = 6;
  
  var mhagscv = [];
  //[group,,,,,],[position,gamertag,rank,Generation,perms,date enlisted]]
  
  var allGroupSheetcvs = [
    //all groups
    ["mhagscv",mhagscv,[],[],mhags,mhagsmri,[],[],[],[],[],[],[],[],[]]
  ];
    /*["sheetcv",[0]
      sheetcv,[1]
      [row to merge,row to merge],[2]
      [if it needs to formated to main or not],[3]
      sheet,[4]
      sheet max rows num,[5]
      [],[6]
      [],[7]
      [],[8]
      [],[9]
      [],[10]
      [],[11]
      [],[12]
      [],[13]
      []][14]
    */

  //order:
  //Upper Echelon - Special Groups - Morai - Councils
  var orderOfGroups = [
    //Upper Echelon
    [dllscv[0][156].toString(),156,1,["mhagscv","mhuescv"],0],
    //Phoenix S.W.A.L
    [dllscv[0][39].toString(),39,4,["mhagscv","mhsgscv"],0],
    //Praetorian Guard
    [dllscv[0][52].toString(),52,1,["mhagscv","mhsgscv"],0],
    //Seeker Intelligence
    [dllscv[0][65].toString(),65,1,["mhagscv","mhsgscv"],0],
    //Vicarius Senate
    [dllscv[0][78].toString(),78,1,["mhagscv","mhsgscv"],0],
    //Special Group 04
    [dllscv[0][91].toString(),91,1,["mhagscv","mhsgscv"],0],
    //Special Group 05
    [dllscv[0][104].toString(),104,1,["mhagscv","mhsgscv"],0],
    //Special Group 06
    [dllscv[0][117].toString(),117,1,["mhagscv","mhsgscv"],0],
    //Special Group 07
    [dllscv[0][130].toString(),130,1,["mhagscv","mhsgscv"],0],
    //Special Group 08
    [dllscv[0][143].toString(),143,7,["mhagscv","mhsgscv"],0],
    //Mora 1
    [dllscv[0][0].toString(),0,10,["mhagscv","mhmscv"],0],
    //Mora 2
    [dllscv[0][13].toString(),13,10,["mhagscv","mhmscv"],0],
    //Mora 3
    [dllscv[0][26].toString(),26,10,["mhagscv","mhmscv"],0],
    //Council 01
    [dllscv[0][169].toString(),169,1,["mhcscv"],0],
    //Council 02
    [dllscv[0][182].toString(),182,1,["mhcscv"],0],
    //Council 03
    [dllscv[0][195].toString(),195,1,["mhcscv"],0],
    //Council 04
    [dllscv[0][208].toString(),208,1,["mhcscv"],0],
    //Council 05
    [dllscv[0][221].toString(),221,1,["mhcscv"],0],
    //Council 06
    [dllscv[0][234].toString(),234,1,["mhcscv"],0],
    //Council 07
    [dllscv[0][247].toString(),247,1,["mhcscv"],0],
    //Council 08
    [dllscv[0][260].toString(),260,1,["mhcscv"],0]
  ];
  //[name of group, location in main array, number of rows below to go through, [sheets of inclusion], row in dllscv]
//PXE Member Data Current Members Sheet
  curVals = FunctionContainer.getpmdcmscv("date");
  var pmdcms = curVals[0];
  var pmdcmslri = curVals[2];
  var pmdcmscv = curVals[1];
  curVals = undefined;
  FunctionContainer.memberFinderForPermSemiHub(allGroupSheetcvs,orderOfGroups,dllscv,pmdcmscv);
  FunctionContainer.memberPasterForProfilesAndMemberHub(allGroupSheetcvs);



}//end main