function dateReplace(date){
  if(date.toString().length>15){//start 1st if
    var cd=date.toString();
    var newDate="";
    var months=["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"];
    for(var m=0;m<months.length;m++){//start 1st for
      if(cd.indexOf(months[m].toString())!==-1){//start 2nd if
        m=months[m];
        newDate=m+" "+cd[8].toString()+cd[9].toString()+" "+cd[11].toString()+cd[12].toString()+cd[13].toString()+cd[14].toString();
        break;
      }//end 2nd if
    }//end 1st for
    return newDate;
  }//end 1st if
  else{
    return date;
  }//end 1st else
}//end dateReplace


function positionsInsideArray(array){
  for(var i=0; i<array.length; i+=1){//start 1st for
    array[i] = array[i]+"["+i+"]";
  }//end 1st for
  console.log(array);
}//end positionsInsideArray


function arrayDuplicateFilter(array){
  var array2 = [];
  array2.push(array[0]);
  for(var i=1; i<array.length; i+=1){//start 1st for
    for(var x=0; x<array2.length; x+=1){//start 2nd for
      if(array[i].toString()===array2[x].toString()){//start 1st if
        x = array2.length;
      }//end 1st if
      else if(array[i].toString()!==array2[x].toString()&&x===array2.length-1){//start 1st if
        array2.push(array[i]);
      }//end 1st if/else
    }//end 2nd for
  }//end 1st for
  return array2;
}//end arrayDuplicateFilter


function arrayNAFilter(array){
  var array2 = [];
  for(var i=0; i<array.length; i+=1){//start 1st for
    if(array[i].toString()!=="N/A"){//start 1st if
      array2.push(array[i]);
    }//end 1st if
  }//end 1st for
  return array2;
}//end arrayNAFilter


//this is a very old function so yes its ugly
function splitEmUp(val){
  if(val!==undefined){
  var extra = [];
  if(val!==""&&val.toString().indexOf(",")!==-1){
    var nums = [];
    var uil = val;
    var g = [];var p = "";
    for(var uu=0;uu<=uil.length-1;uu++){if(uil[uu].toString().indexOf(",") > -1){g=g.concat(uu);}}
    if(g.length>=1){//first name on the list
      for(var y=0;y<g[0];y++){p=p.concat(uil[y]);}
      var chk4 = 0;
      for(var oof = 0;oof<extra.length;oof++){if(extra[oof].toString()===p.toString()){chk4=1;p="";}}
      if(chk4===0){extra.push([p]);p="";}
      for(var ree = 2;ree<=g.length+1;ree++){//last name on the list
        if(g.length+1===ree){
          for (var y=g[ree-2]+2;y<uil.length;y++){
            p=p.concat(uil[y]);}
            var chk5 = 0;
            for(var oof = 0;oof<extra.length;oof++){
              if(extra[oof].toString()===p.toString()){chk5=1}}
            if(chk5===0){extra.push([p]);}}
        else{//all names in between
          for(var y=g[ree-2]+2;y<g[ree-1];y++){
            p=p.concat(uil[y]);}
            var chk6 = 0;
            for(var oof = 0;oof<extra.length;oof++){
              if(extra[oof].toString()===p.toString()){chk6=1}}
            if(chk6===0){extra.push([p]);};p="";}}}}
  else if(val!==""&&val.toString().indexOf(",")===-1){
    var chk7 = 0;
    for(var oof = 0;oof<extra.length;oof++){if(extra[oof].toString()===val.toString()){chk7=1}}
    if(chk7===0){extra.push([val])}}}
  else{
  extra = [];
  }
  return extra;
}//end splitEmUp


function moveFile(fileID,targetFolder){
  
  //tries to move file
  try{//start 1st try
    DriveApp.getFileById(fileID).moveTo(targetFolder);
  }//end 1st try
  catch(error){//start 1st catch
            
    //logs error
    console.log(error);
    
    //if the error is Exception
    if(error.name.toString()==="Exception"){//start 1st if
      Utilities.sleep(2500);
      
      //tries to move file
      try{//start 2nd try
        DriveApp.getFileById(fileID).moveTo(targetFolder);
      }//end 2nd try
      catch(error){//start 2nd catch
            
        //logs error
        console.log(error);
        
        //if the error is Exception
        if(error.name.toString()==="Exception"){//start 2nd if
          Utilities.sleep(5000);
          
          //tries to move file
          try{//start 3rd try
            DriveApp.getFileById(fileID).moveTo(targetFolder);
          }//end 3rd try
          catch(error){//start 3rd catch
            
            //logs error
            console.log(error);
            
            throw error;
            
          }//end 3rd catch
          
        }//end 2nd if
        
        //if the error wasnt Exception
        else if(error.name.toString()!=="Exception"){//start 2nd if/else
          throw error;
        }//end 2nd if/else
        
      }//end 2nd catch
      
    }//end 1st if
    
    //if the error wasnt Exception
    else if(error.name.toString()!=="Exception"){//start 1st if/else
      throw error;
    }//end 1st if/else
    
  }//end 1st catch
  
}//end moveFile


function getTimeNumFromDate(date){
  var hr = (date.getHours());
  var min = date.getMinutes()/60;
  var returnVal = hr + min;
  return returnVal;
}//end getTimeNumFromDate


function timeRetrieval12Cycle(date){
  if(date.toString() === ""){//start 1st if
    return date;
  }//end 1st if
  var hr = date.getHours();
  var min = date.getMinutes().toString();
  if(min.length===1){//start 1st if
    min = "0"+min;
  }//end 1st if
  //12 AM
  if(hr===0){//start 1st if
    hr = "12";
    var AmPm = "AM";
  }//end 1st if
  //12 PM
  else if(hr-12===0){//start 1st if
    hr = "12";
    var AmPm = "PM";
  }//end 1st if
  //AM
  else if(hr-12<0){//start 1st if
    hr = hr.toString();
    var AmPm = "AM";
  }//end 1st if
  //PM
  else if(hr-12>0){//start 1st if
    hr = (hr-12).toString();
    var AmPm = "PM";
  }//end 1st if
  var newTime = hr+":"+min+" "+AmPm;
  return newTime;
}//end timeRetrieval24Cycle


function dateRetrieval(date){
    var newDate = "";
    for(var i=0; i<11; i+=1){//start 1st for
      newDate = newDate+date[i].toString();
    }//end 1st for
  return newDate;
}//end dateRetrieval


function discordMapCallouts(mapName,msg,channel,postOrDelete){
  if(postOrDelete==="Post"){//start 1st if
    var message = "s$e$^**"+mapName+"** Callouts^"+msg+"^^^^Map Callouts^"+channel;
  }//end 1st if
  
  else if(postOrDelete==="Delete"){//start 1st if
    var message = "d$e$^**"+mapName+"** Callouts^"+msg+"^"+channel;
  }//end 1st else/if
  
  //main url
  var discordUrl = '';
  
  //testing url
//  var discordUrl = '';
  
  var payload = JSON.stringify({content: message});
  var params = {headers: {'Content-Type': 'application/json'},method: "POST",payload: payload,muteHttpExceptions: true};
  tripleTryDiscWebhook(params,discordUrl);
}//end discordMapCallouts


function discordEmbeddedMessageFormSend(message){
  //sends it to tech comms
  //main url
  var discordUrl = '';
  
  //testing url
//  var discordUrl = '';
  var payload = JSON.stringify({content: message});
  var params = {headers: {'Content-Type': 'application/json'},method: "POST",payload: payload,muteHttpExceptions: true};
  tripleTryDiscWebhook(params,discordUrl);
}//end discordEmbeddedMessageFormSend


function discordGroupReportFormSend(message){
  //sends it to tech comms
  //main url
  var discordUrl = '';
  
  //testing url
//  var discordUrl = '';
  var payload = JSON.stringify({content: message});
  var params = {headers: {'Content-Type': 'application/json'},method: "POST",payload: payload,muteHttpExceptions: true};
  tripleTryDiscWebhook(params,discordUrl);
}//end discordGroupReportFormSend


function discordNewMemberFormSend(message){
  //sends it to tech comms
  //main url
  var discordUrl = '';
  
  //testing url
//  var discordUrl = '';
  var payload = JSON.stringify({content: message});
  var params = {headers: {'Content-Type': 'application/json'},method: "POST",payload: payload,muteHttpExceptions: true};
  tripleTryDiscWebhook(params,discordUrl);
}//end discordNewMemberFormSend


function discordSchedulingFormSend(message){
  //sends it to tech comms
  //main url
  var discordUrl = '';
  
  //testing url
//  var discordUrl = '';
  var payload = JSON.stringify({content: message});
  var params = {headers: {'Content-Type': 'application/json'},method: "POST",payload: payload,muteHttpExceptions: true};
  tripleTryDiscWebhook(params,discordUrl);
}//end discordSchedulingFormSend


function discordExpansionFormSend(message){
  //sends it to tech comms
  //main url
  var discordUrl = '';
  
  //testing url
//  var discordUrl = '';
  var payload = JSON.stringify({content: message});
  var params = {headers: {'Content-Type': 'application/json'},method: "POST",payload: payload,muteHttpExceptions: true};
  tripleTryDiscWebhook(params,discordUrl);
}//end discordExpansionFormSend


function discordPermissionFormSend(message){
  //sends it to tech comms
  //main url
  var discordUrl = '';
  
  //testing url
//  var discordUrl = '';
  var payload = JSON.stringify({content: message});
  var params = {headers: {'Content-Type': 'application/json'},method: "POST",payload: payload,muteHttpExceptions: true};
  tripleTryDiscWebhook(params,discordUrl);
}//end discordPermissionFormSend


function discordFixerFormSend(message){
  //sends it to tech comms
  //main url
  var discordUrl = '';
  
  //testing url
//  var discordUrl = '';
  var payload = JSON.stringify({content: message});
  var params = {headers: {'Content-Type': 'application/json'},method: "POST",payload: payload,muteHttpExceptions: true};
  tripleTryDiscWebhook(params,discordUrl);
  Utilities.sleep(1500);
}//end discordFixerFormSend


function discordDailyUpdates(message){
  //audit log
  //main url
  var discordUrl = '';
  
  //testing url
//  var discordUrl = '';
  var payload = JSON.stringify({content: message});
  var params = {headers: {'Content-Type': 'application/json'},method: "POST",payload: payload,muteHttpExceptions: true};
  tripleTryDiscWebhook(params,discordUrl);
}//end discordDailyUpdates


function array1LevelIntoString(array){
  if(array === undefined  ||  array.length <= 0){//start 1st if
    array = [""];
  }//end 1st if
  var array2 = array[0].toString();
  for(var i=1; i<array.length; i+=1){//start 1st for
    array2 = array2+", "+array[i].toString();
  }//end 1st for
  return array2;
}//end array1LevelIntoString


function getDaFormIds(formId){
  var ff = FormApp.openById(formId);
  var qs = ff.getItems();
  
  for(var i=0; i<qs.length;i++){//start 1st for
    console.log([qs[i].getTitle().toString(),qs[i].getType().toString(),qs[i].getId().toString()]);
  }//end 1st for
  
}//end getDaFormIds


function discordDebrief(edhnv,discChannels){
  
  for(var i=0; i<discChannels.length; i+=1){//start 1st for
    //converts choices to their corresponding discord channels
    if(discChannels[i].toString().indexOf("Main Channel")===-1&&discChannels[i].toString()!=="N/A"){//start 1st if
      discChannels[i] = whileReplace(discChannels[i], " ", "-");
      discChannels[i] = whileReplace(discChannels[i], ".", "");
      discChannels[i] = discChannels[i].toString().toLowerCase() + "-debriefs";
    }//end 1st if
    
    //main channel
    else if(discChannels[i].toString().indexOf("Main Channel")!==-1&&discChannels[i].toString()!=="N/A"){//start 1st if
      discChannels[i] = "all-group-debriefs";
    }//end 1st if/else
    
    
    //if its not n/a it sends the debrief
    if(discChannels[i].toString()!=="N/A"){//start 1st if
      //message
      var message = "s$e$^Event Debrief For Date: **"+edhnv[0][0]+"**^Time of Event (ET): **"+edhnv[0][1]+" - "+edhnv[0][2]+"**\n\nType(s) of Event: **"+
      edhnv[0][3]+"**\n\nWin/Loss: **"+edhnv[0][5]+"**\n\nLeader of Event: **"+edhnv[0][6]+"**\n\nSecondary Leader(s): **"+edhnv[0][7]+
      "**\n\nAttendees: **"+edhnv[0][8]+"**\n\nDebrief: **"+edhnv[0][9]+"**\n\nAdditional Notes: **"+edhnv[0][10]+"**^^^^Phoenix Era Debriefs^"+discChannels[i];
      
      
      //discord message send stuff
      //main
      var discordUrl = '';
      
      //test server
//      var discordUrl = '';
      var payload = JSON.stringify({content: message});
      var params = {headers: {'Content-Type': 'application/json'},method: "POST",payload: payload,muteHttpExceptions: true};
      tripleTryDiscWebhook(params,discordUrl);
      
      
      //console message
      console.log("discord message has been sent");
    }//end 1st if
    
  }//end 1st for
  
}//end discordDebrief


function discordRoles(givingRole,takingRole,nickname){
  var give = "a^r,";
  var take = "r^r,";
  
  var roleGive = ","+givingRole;
  var roleTake = ","+takingRole;
  
  //main
  var discordUrl = '';
  //testing
//  var discordUrl = '';
  
  //if you arnt taking away a role
  if(takingRole.toString()!=="N/A"){//start 1st if
    var message = take+nickname+roleTake;
    var payload = JSON.stringify({content: message});
    var params = {headers: {'Content-Type': 'application/json'},method: "POST",payload: payload,muteHttpExceptions: true};
    tripleTryDiscWebhook(params,discordUrl);
  }//end 1st if
  
  //if you are not giving a role
  if(givingRole.toString()!=="N/A"){//start 1st if
    var message = give+nickname+roleGive;
    var payload = JSON.stringify({content: message});
    var params = {headers: {'Content-Type': 'application/json'},method: "POST",payload: payload,muteHttpExceptions: true};
    tripleTryDiscWebhook(params,discordUrl);
    Utilities.sleep(1000);
  }//end 1st if
  
}//end discordRoles


function positionsInsideArraySpecificQs(array,val){
  var array2 = [];
  for(var i=0; i<array.length; i+=1){//start 1st for
    if(array[i].toString().indexOf(val)!==-1){//start 1st if
      array2 = array2 + ",["+i.toString()+"]";
    }//end 1st if
  }//end 1st for
  console.log(array2);
}//end positionsInsideArraySpecificQs


function discordNicknameChange(oldNickname,newNickname){
  var message = "c^n,"+oldNickname+","+newNickname;
  console.log("discord message has been sent");
  //main
  var discordUrl = '';
  //testing
//  var discordUrl = '';
  var payload = JSON.stringify({content: message});
  var params = {headers: {'Content-Type': 'application/json'},method: "POST",payload: payload,muteHttpExceptions: true};
  tripleTryDiscWebhook(params,discordUrl);
}//end discordNicknameChange


function discordGeekSquadWarning(title, message){
  //sends it to geek squad
  //main server
  var discordUrl = '';
  //testing server
//  var discordUrl = '';
  
  var options = 
      {
        contentType: "application/json",
        muteHttpExceptions: true,
        "method": "post",
        "payload": JSON.stringify({
          "embeds": [{ 
            "color": 9047052,
            "fields": [{ 
              "name": title,
              "value": message,
              "inline": false
            }],
          }]
        }),
      }
  tripleTryDiscWebhook(options,discordUrl);
}//end discordMUFWarning


function pmdcmsIdRetrieval(val){
  val = val.toString();
  var startLocation = val.indexOf("~")+2;
  var val2 = "";
  for(var i=startLocation; i<val.length; i+=1){//start 1st for
    val2 = val2+val[i];
  }//end 1st for
  return val2;
}//end pmdcmsIdRetrieval


function pmdcmsIdGroupNameRetrieval(val){
  val = val.toString();
  var endLocation = val.indexOf("~")-1;
  var val2 = "";
  for(var i=0; i<endLocation; i+=1){//start 1st for
    val2 = val2+val[i];
  }//end 1st for
  return val2;
}//end pmdcmsIdGroupNameRetrieval
    

function indFormErrorReport(perpitraitor,formInQuestion,whatTheyDidWrong,frslri,url){
  var message = "**"+perpitraitor+"** filled out **" + formInQuestion + "** wrong. The entry is located at **row " + frslri + "** in the [form's response sheet]("+url+"). They **"+whatTheyDidWrong+"**.";
  
  //sends it to tech comms
  //main server
  var discordUrl = '';
  //testing server
//  var discordUrl = '';
  
  var options = 
      {
        contentType: "application/json",
        muteHttpExceptions: true,
        "method": "post",
        "payload": JSON.stringify({
          "embeds": [{ 
            "color": 9047052,
            "fields": [{ 
              "name": "**Form Fillout Error**",
              "value": message,
              "inline": false
            }],
          }]
        }),
      }
  tripleTryDiscWebhook(options,discordUrl);
  
  formFilloutErrorReportEntry(perpitraitor,formInQuestion,whatTheyDidWrong,frslri);

  throw new Error('Form filled out wrong');
}//end indFormErrorReport


function formFilloutErrorReportEntry(perpitraitor,formInQuestion,whatTheyDidWrong,frslri){
  var currentDate = dateReplace(new Date());
  //Form Fillout Errors Entries Sheet
  var curVals = getFilloutErrorSheetcvs();
  var ffees = curVals[0];
  var ffeescv = curVals[2];
  curVals = undefined;
  console.log([formInQuestion, currentDate, '=B'+parseInt(ffeescv.length+3), perpitraitor, whatTheyDidWrong, frslri]);

  tripleTryAddRows(ffees, ffeescv.length+2, 1);
  tripleTrySetSSValues(ffees, ffeescv.length+3, 1, 1, 6, [[formInQuestion, currentDate, '=B'+parseInt(ffeescv.length+3), perpitraitor, whatTheyDidWrong, frslri]]);
}


function getFilloutErrorSheetcvs(){
  //SpreadsheetApp.flush();
  //Form Fillout Errors Entries Sheet
  var ffees = tripleTryOpenSheet("","Entries");
  var ffeeslri = tripleTryGetLastRow(ffees);
  var ffeescv = tripleTryGetValues(ffees, 3, 1, ffeeslri-2, 6);
  var returnVal = [ffees, ffeeslri, ffeescv];
  return returnVal;
}//end getdllscv


function discordDischarge(nickname){
  var message = "k^k,"+nickname;
  //main
  var discordUrl = '';
  //testing
//  var discordUrl = '';
  var payload = JSON.stringify({content: message});
  var params = {headers: {'Content-Type': 'application/json'},method: "POST",payload: payload,muteHttpExceptions: true};
  tripleTryDiscWebhook(params,discordUrl);
}//end discordDischarge


function discordUpdateDM(nickname,muhausnv){
  var message = "dm$e$^"+nickname+"^**Member Update Alert**^Type of Update: **" + muhausnv[0][0] + "**\n\nDate of Update: **"+muhausnv[0][3]+"**\n\nUpdate Details: **"+muhausnv[0][2]+"**\n\nReasoning: **"+muhausnv[0][4]+"**^^^^Phoenix Era Member Updates";
  //main
  var discordUrl = '';
  //testing
//  var discordUrl = '';
  var payload = JSON.stringify({content: message});
  var params = {headers: {'Content-Type': 'application/json'},method: "POST",payload: payload,muteHttpExceptions: true};
  tripleTryDiscWebhook(params,discordUrl);
}//end discordUpdateDM


function discordMemberUpdateFormSend(message){
  
  //main
  var discordUrl = '';
  //testing
//  var discordUrl = '';
  var payload = JSON.stringify({content: message});
  var params = {headers: {'Content-Type': 'application/json'},method: "POST",payload: payload,muteHttpExceptions: true};
  tripleTryDiscWebhook(params,discordUrl);
}//end discordUpdateDM


function discordReportDM(nickname,muhausnv){
  var message = "dm$e$^"+nickname+"^**"+muhausnv[0][0]+"**^"+"Date of Report: **"+muhausnv[0][3]+"**\n\nReport Title: **"+muhausnv[0][2].toString().replace("Report Title: ","")+"**\n\nReport Details: **"+muhausnv[0][4].toString().replace("Report Details: ","")+"**^^^^Phoenix Era Member Updates";
  //main
  var discordUrl = '';
  //testing
//  var discordUrl = '';
  var payload = JSON.stringify({content: message});
  var params = {headers: {'Content-Type': 'application/json'},method: "POST",payload: payload,muteHttpExceptions: true};
  tripleTryDiscWebhook(params,discordUrl);
}//end discordReportDM


function specialSort(array){
  return array.sort(function(a,b){return a[0].toString().toLowerCase().localeCompare(b[0].toString().toLowerCase())});
}//end specialSort


function specialSortDesc(array){
  return array.sort(function(a,b){return a[0].toString().toLowerCase().localeCompare(b[0].toString().toLowerCase())}).reverse();
}//end specialSortDesc


function perpFinder(perpEmail, pmdcmscv){
  
  //who done it starting with ???
  var perpitraitor = "???";
  
  //cycling through members to see if email matches anyone
  for(var x=0; x<pmdcmscv.length; x+=1){//start 1st for
    
    if(pmdcmscv[x][9].toString().toLowerCase()===perpEmail.toString().toLowerCase()  &&  perpEmail.toString().toLowerCase() !== ""){//start 2nd if
      
      perpitraitor = pmdcmscv[x][0].toString();
      
    }//end 1st if
    
  }//end 1st for
  return perpitraitor;
}//end perpFinder


function memberDuplicateFilterForProfilesAndMemberHub(curArrays){
  //["sheetcv",sheetcv,[row to merge,row to merge],[],[],[],[],[],[],[]]
  
  //cycles thru length of curArrays
  for(var i=0; i<curArrays.length; i+=1){//start 1st for
    
    
    var arraysToDelete = [];
    //[location in array, location in array]
    
    
    //cycles thru individual sheet cv arrays starts and stops located at curArrays[i][2]
    for(var x=0; x<curArrays[i][2].length; x+=1){//start 2nd for
      var startNum = curArrays[i][2][x]+2;
      
      
      //if its not last merge row num
      if(x!==curArrays[i][2].length-1){//start 1st if
        var endNum = curArrays[i][2][x+1]-1;
      }//end 1st if
      
      //if it is last merge row num
      else if(x===curArrays[i][2].length-1){//start 1st if/else
        var endNum = curArrays[i][1].length-1;
      }//end 1st if/else
      //console.log("start: "+startNum+" ~ end: "+endNum);
      
      
      //cycles thru bubble sort style with start as 1st num and end as last num
      for(var y=startNum; y<=endNum-1; y+=1){//start 3rd for;
        for(var w=y+1; w<=endNum; w+=1){//start 4th for
          
          //if gamertag ='s each other push number to get rid of
          if(curArrays[i][1][y][1].toString()===curArrays[i][1][w][1].toString()){//start 1st if
            arraysToDelete.push(w);
          }//end 1st if
          
        }//end 4th for
      }//end 3rd for
    }//end 2nd for
    
    
    //deletes listed arrays
    for(var x=arraysToDelete.length-1; x>=0; x-=1){//start 2nd for
      curArrays[i][1].splice(arraysToDelete[x],1);
    }//end 2nd for
    
    
    //redoes the merge row nums
    //wipes current row nums
    curArrays[i][2] = [];
    
    //cycles thru curArrays[i][1]
    for(var x=0; x<curArrays[i][1].length; x+=1){//start 2nd for
      
      //if it is a group row with nothin in the second column it pushes x to merge row nums
      if(curArrays[i][1][x][1].toString()===""){//start 1st if
        curArrays[i][2].push(x);
      }//end 1st if
    }//end 2nd for
    
  }//end 1st for
  
  //returns fixed array
  return curArrays;
}//end memberDuplicateFilterForProfilesAndMemberHub


function memberFinderForMemberProfiles(allGroupSheetcvs,orderOfGroups,dllscv,pmdcmscv){
  //cycles through each object in orderOfGroups
  for(var i=0; i<orderOfGroups.length; i+=1){//start 1st for
    
    //another for loop that loops orderOfGroups[i][2] times
    for(var x=0; x<orderOfGroups[i][2]; x+=1){//start 2nd for
      
      //if group is active
      if(dllscv[x+orderOfGroups[i][4]][orderOfGroups[i][1]+1].toString()==="Active"){//start 1st if
        var groupName = dllscv[x+orderOfGroups[i][4]][orderOfGroups[i][1]];
        var groupSheetcvLocs = [];
        
        
        //finds locations for group sheet cvs
        for(var y=0; y<allGroupSheetcvs.length; y+=1){//start 3rd for
          if(orderOfGroups[i][3][0]===allGroupSheetcvs[y][0]){//start 2nd if
            groupSheetcvLocs.push(y);
          }//end 2nd if
          if(orderOfGroups[i][3][1]===allGroupSheetcvs[y][0]){//start 2nd if
            groupSheetcvLocs.push(y);
          }//end 2nd if
        }//end 3rd for
        
        
        //add group name to allGroupSheetcvs
        for(var y=0; y<groupSheetcvLocs.length; y+=1){//start 3rd for
          allGroupSheetcvs[groupSheetcvLocs[y]][1].push([groupName,"","","","",""]);
          allGroupSheetcvs[groupSheetcvLocs[y]][2].push(allGroupSheetcvs[groupSheetcvLocs[y]][1].length-1);
          allGroupSheetcvs[groupSheetcvLocs[y]][1].push(["Position","Gamertag","Rank","Generation","Credentials","Date Enlisted"]);
          allGroupSheetcvs[groupSheetcvLocs[y]][3].push(dllscv[64][dllscv[x+orderOfGroups[i][4]][orderOfGroups[i][1]+12]]);
        }//end 3rd for
        
        
        //then search if there is any leadership roles in dllscv present
        //gets any leadership roles and group role if any
        var leaderRoles = splitEmUp(dllscv[61][dllscv[x+orderOfGroups[i][4]][orderOfGroups[i][1]+12]]);
        
        
        //if true then search for those leadership roles in pmdcmscv
        if(leaderRoles.length!==0){//start 2nd if
          
          //cycles thru pmdcmscv
          for(var y=0; y<pmdcmscv.length; y+=1){//start 3rd for
            
            //sets creds as N/A if its empty
            if(pmdcmscv[y][4].toString()===""){//start 2nd if
              pmdcmscv[y][4] = "N/A";
            }//end 2nd if
            
            var curCreds = splitEmUp(pmdcmscv[y][4].toString());
            
            //cycles thru curCreds
            for(var z=0; z<curCreds.length; z+=1){//start 5th for
            
              //cycles thru leaderRoles
              for(var w=0; w<leaderRoles.length; w+=1){//start 6th for
                
                //if group does not have group leadership group inclusion/ are they in the group with a leadership role
                if(dllscv[62][dllscv[x+orderOfGroups[i][4]][orderOfGroups[i][1]+12]]==="No"){//start 3rd if
                
                  //if they have a included leadership role
                  if(curCreds[z].toString()===leaderRoles[w].toString()||pmdcmscv[y][2].toString()===leaderRoles[w].toString()||pmdcmscv[y][7].toString()===leaderRoles[w].toString()){//start 4th if
                    
                    //if they dont have a position code
                    if(pmdcmscv[y][7].toString()==="N/A"){//start 5th if
                      //add group name to allGroupSheetcvs
                      for(var r=0; r<groupSheetcvLocs.length; r+=1){//start 6th for
                        allGroupSheetcvs[groupSheetcvLocs[r]][1].push([
                          "Leadership",pmdcmscv[y][0].toString(),
                          pmdcmscv[y][2].toString(),pmdcmscv[y][5].toString(),pmdcmscv[y][4].toString(),
                          dateReplace(pmdcmscv[y][20].toString())
                        ]);
                      }//end 6th for
                      z = curCreds.length;
                      w = leaderRoles.length;
                    }//end 5th if
                    
                    //if they have a position code
                    if(pmdcmscv[y][7].toString()!=="N/A"){//start 5th if/else
                      //add group name to allGroupSheetcvs
                      for(var r=0; r<groupSheetcvLocs.length; r+=1){//start 6th for
                        allGroupSheetcvs[groupSheetcvLocs[r]][1].push([
                          "Leadership ~ "+positionCodeDiscordTransformer(pmdcmscv[y][7].toString()),pmdcmscv[y][0].toString(),
                          pmdcmscv[y][2].toString(),pmdcmscv[y][5].toString(),pmdcmscv[y][4].toString(),
                          dateReplace(pmdcmscv[y][20].toString())
                        ]);
                      }//end 6th for
                      z = curCreds.length;
                      w = leaderRoles.length;
                    }//end 5th if/else
                  }//end 4th if
                }//end 3rd if
                
                //if group does have group leadership group inclusion/ are they in the group with a leadership role
                else if(dllscv[62][dllscv[x+orderOfGroups[i][4]][orderOfGroups[i][1]+12]]==="Yes"){//start 3rd if/else
                  
                  //if they are in the group
                  if(pmdcmscv[y][3].toString().indexOf(groupName)!==-1){//start 4th if
                    
                    //if they have a included leadership role
                    if(curCreds[z].toString()===leaderRoles[w].toString()||pmdcmscv[y][2].toString()===leaderRoles[w].toString()||pmdcmscv[y][7].toString()===leaderRoles[w].toString()){//start 5th if
                      
                      //if they dont have a position code
                      if(pmdcmscv[y][7].toString()==="N/A"){//start 6th if
                        //add group name to allGroupSheetcvs
                        for(var r=0; r<groupSheetcvLocs.length; r+=1){//start 6th for
                          allGroupSheetcvs[groupSheetcvLocs[r]][1].push([
                            "Leadership",pmdcmscv[y][0].toString(),
                            pmdcmscv[y][2].toString(),pmdcmscv[y][5].toString(),pmdcmscv[y][4].toString(),
                            dateReplace(pmdcmscv[y][20].toString())
                          ]);
                        }//end 6th for
                        z = curCreds.length;
                        w = leaderRoles.length;
                      }//end 6th if
                      
                      //if they have a position code
                      if(pmdcmscv[y][7].toString()!=="N/A"){//start 6th if/else
                        //add group name to allGroupSheetcvs
                        for(var r=0; r<groupSheetcvLocs.length; r+=1){//start 6th for
                          allGroupSheetcvs[groupSheetcvLocs[r]][1].push([
                            "Leadership ~ "+positionCodeDiscordTransformer(pmdcmscv[y][7].toString()),pmdcmscv[y][0].toString(),
                            pmdcmscv[y][2].toString(),pmdcmscv[y][5].toString(),pmdcmscv[y][4].toString(),
                            dateReplace(pmdcmscv[y][20].toString())
                          ]);
                        }//end 6th for
                        z = curCreds.length;
                        w = leaderRoles.length;
                      }//end 6th if/else
                    }//end 5th if
                  }//end 4th if
                }//end 3rd if/else
              }//end 5th for
            }//end 4th for
          }//end 3rd for
        }//end 2nd if
        
        //for the normal members
        //cycles thru pmdcmscv
        for(var y=0; y<pmdcmscv.length; y+=1){//start 3rd for
            
          //sets creds as N/A if its empty
          if(pmdcmscv[y][4].toString()===""){//start 2nd if
            pmdcmscv[y][4] = "N/A";
          }//end 2nd if
          
          //if group does have group leadership group inclusion/ are they in the group with a leadership role
          if(dllscv[63][dllscv[x+orderOfGroups[i][4]][orderOfGroups[i][1]+12]]==="Yes"){//start 2nd if
            
            //if they are in the group
            if(pmdcmscv[y][3].toString().indexOf(groupName)!==-1){//start 4th if
              
              //if they dont have a position code
              if(pmdcmscv[y][7].toString()==="N/A"){//start 6th if
                //add group name to allGroupSheetcvs
                for(var r=0; r<groupSheetcvLocs.length; r+=1){//start 6th for
                  allGroupSheetcvs[groupSheetcvLocs[r]][1].push([
                    "Member",pmdcmscv[y][0].toString(),
                    pmdcmscv[y][2].toString(),pmdcmscv[y][5].toString(),pmdcmscv[y][4].toString(),
                    dateReplace(pmdcmscv[y][20].toString())
                  ]);
                }//end 6th for
              }//end 6th if
              
              //if they have a position code
              if(pmdcmscv[y][7].toString()!=="N/A"){//start 6th if/else
                //add group name to allGroupSheetcvs
                for(var r=0; r<groupSheetcvLocs.length; r+=1){//start 6th for
                  allGroupSheetcvs[groupSheetcvLocs[r]][1].push([
                    "Member ~ "+positionCodeDiscordTransformer(pmdcmscv[y][7].toString()),pmdcmscv[y][0].toString(),
                    pmdcmscv[y][2].toString(),pmdcmscv[y][5].toString(),pmdcmscv[y][4].toString(),
                    dateReplace(pmdcmscv[y][20].toString())
                  ]);
                }//end 6th for
              }//end 6th if/else
            }//end 5th if
          }//end 2nd if
        }//end 3rd for
        
        
        //if no leadership roles in dllscv or after leadership roles are done with just search for group in pmdcmscv
        //if someone is found have them added to the allGroupSheetcvs and put member as the position
        
      }//end 1st if
    }//end 2nd for
  }//end 1st for
  
  
  //will need to get rid of duplicates in each group not the entire sheetcv
  //when getting rid of a duplicate the higher/later merge row nums need to be minused by one
  allGroupSheetcvs = memberDuplicateFilterForProfilesAndMemberHub(allGroupSheetcvs);
  
}//end memberFinderForMemberProfiles


function memberFinderForCheck(allGroupSheetcvs,orderOfGroups,dllscv,pmdcmscv){
  //need to add links to profile files in the future
  
  //cycles through each object in orderOfGroups
  for(var i=0; i<orderOfGroups.length; i+=1){//start 1st for
    
    //another for loop that loops orderOfGroups[i][2] times
    for(var x=0; x<orderOfGroups[i][2]; x+=1){//start 2nd for
      
      //if group isnt blank
      if(dllscv[x+orderOfGroups[i][4]][orderOfGroups[i][1]+1].toString()!==""){//start 1st if
        var groupName = dllscv[x+orderOfGroups[i][4]][orderOfGroups[i][1]];
        var groupSheetcvLocs = [];
        
        
        //finds locations for group sheet cvs
        for(var y=0; y<allGroupSheetcvs.length; y+=1){//start 3rd for
          if(orderOfGroups[i][3][0]===allGroupSheetcvs[y][0]){//start 2nd if
            groupSheetcvLocs.push(y);
          }//end 2nd if
          if(orderOfGroups[i][3][1]===allGroupSheetcvs[y][0]){//start 2nd if
            groupSheetcvLocs.push(y);
          }//end 2nd if
        }//end 3rd for
        
        
        //add group name to allGroupSheetcvs
        for(var y=0; y<groupSheetcvLocs.length; y+=1){//start 3rd for
          allGroupSheetcvs[groupSheetcvLocs[y]][1].push([groupName,"","","","",""]);
          allGroupSheetcvs[groupSheetcvLocs[y]][2].push(allGroupSheetcvs[groupSheetcvLocs[y]][1].length-1);
          allGroupSheetcvs[groupSheetcvLocs[y]][1].push(["Position","Gamertag","Rank","Generation","Credentials","Date Enlisted"]);
          allGroupSheetcvs[groupSheetcvLocs[y]][3].push(dllscv[64][dllscv[x+orderOfGroups[i][4]][orderOfGroups[i][1]+12]]);
        }//end 3rd for
        
        
        //then search if there is any leadership roles in dllscv present
        //gets any leadership roles and group role if any
        var leaderRoles = splitEmUp(dllscv[61][dllscv[x+orderOfGroups[i][4]][orderOfGroups[i][1]+12]]);
        
        
        //if true then search for those leadership roles in pmdcmscv
        if(leaderRoles.length!==0){//start 2nd if
          
          //cycles thru pmdcmscv
          for(var y=0; y<pmdcmscv.length; y+=1){//start 3rd for
            
            //sets creds as N/A if its empty
            if(pmdcmscv[y][4].toString()===""){//start 2nd if
              pmdcmscv[y][4] = "N/A";
            }//end 2nd if
            
            var curCreds = splitEmUp(pmdcmscv[y][4].toString());
            
            //cycles thru curCreds
            for(var z=0; z<curCreds.length; z+=1){//start 5th for
            
              //cycles thru leaderRoles
              for(var w=0; w<leaderRoles.length; w+=1){//start 6th for
                
                //if group does not have group leadership group inclusion/ are they in the group with a leadership role
                if(dllscv[62][dllscv[x+orderOfGroups[i][4]][orderOfGroups[i][1]+12]]==="No"){//start 3rd if
                
                  //if they have a included leadership role
                  if(curCreds[z].toString()===leaderRoles[w].toString()||pmdcmscv[y][2].toString()===leaderRoles[w].toString()||pmdcmscv[y][7].toString()===leaderRoles[w].toString()){//start 4th if
                    
                    //if they dont have a position code
                    if(pmdcmscv[y][7].toString()==="N/A"){//start 5th if
                      //add group name to allGroupSheetcvs
                      for(var r=0; r<groupSheetcvLocs.length; r+=1){//start 6th for
                        allGroupSheetcvs[groupSheetcvLocs[r]][1].push([
                          "Leadership",pmdcmscv[y][0].toString(),
                          pmdcmscv[y][2].toString(),pmdcmscv[y][5].toString(),pmdcmscv[y][4].toString(),
                          dateReplace(pmdcmscv[y][20].toString())
                        ]);
                      }//end 6th for
                      z = curCreds.length;
                      w = leaderRoles.length;
                    }//end 5th if
                    
                    //if they have a position code
                    if(pmdcmscv[y][7].toString()!=="N/A"){//start 5th if/else
                      //add group name to allGroupSheetcvs
                      for(var r=0; r<groupSheetcvLocs.length; r+=1){//start 6th for
                        allGroupSheetcvs[groupSheetcvLocs[r]][1].push([
                          "Leadership ~ "+positionCodeDiscordTransformer(pmdcmscv[y][7].toString()),pmdcmscv[y][0].toString(),
                          pmdcmscv[y][2].toString(),pmdcmscv[y][5].toString(),pmdcmscv[y][4].toString(),
                          dateReplace(pmdcmscv[y][20].toString())
                        ]);
                      }//end 6th for
                      z = curCreds.length;
                      w = leaderRoles.length;
                    }//end 5th if/else
                  }//end 4th if
                }//end 3rd if
                
                //if group does have group leadership group inclusion/ are they in the group with a leadership role
                else if(dllscv[62][dllscv[x+orderOfGroups[i][4]][orderOfGroups[i][1]+12]]==="Yes"){//start 3rd if/else
                  
                  //if they are in the group
                  if(pmdcmscv[y][3].toString().indexOf(groupName)!==-1){//start 4th if
                    
                    //if they have a included leadership role
                    if(curCreds[z].toString()===leaderRoles[w].toString()||pmdcmscv[y][2].toString()===leaderRoles[w].toString()||pmdcmscv[y][7].toString()===leaderRoles[w].toString()){//start 5th if
                      
                      //if they dont have a position code
                      if(pmdcmscv[y][7].toString()==="N/A"){//start 6th if
                        //add group name to allGroupSheetcvs
                        for(var r=0; r<groupSheetcvLocs.length; r+=1){//start 6th for
                          allGroupSheetcvs[groupSheetcvLocs[r]][1].push([
                            "Leadership",pmdcmscv[y][0].toString(),
                            pmdcmscv[y][2].toString(),pmdcmscv[y][5].toString(),pmdcmscv[y][4].toString(),
                            dateReplace(pmdcmscv[y][20].toString())
                          ]);
                        }//end 6th for
                        z = curCreds.length;
                        w = leaderRoles.length;
                      }//end 6th if
                      
                      //if they have a position code
                      if(pmdcmscv[y][7].toString()!=="N/A"){//start 6th if/else
                        //add group name to allGroupSheetcvs
                        for(var r=0; r<groupSheetcvLocs.length; r+=1){//start 6th for
                          allGroupSheetcvs[groupSheetcvLocs[r]][1].push([
                            "Leadership ~ "+positionCodeDiscordTransformer(pmdcmscv[y][7].toString()),pmdcmscv[y][0].toString(),
                            pmdcmscv[y][2].toString(),pmdcmscv[y][5].toString(),pmdcmscv[y][4].toString(),
                            dateReplace(pmdcmscv[y][20].toString())
                          ]);
                        }//end 6th for
                        z = curCreds.length;
                        w = leaderRoles.length;
                      }//end 6th if/else
                    }//end 5th if
                  }//end 4th if
                }//end 3rd if/else
              }//end 5th for
            }//end 4th for
          }//end 3rd for
        }//end 2nd if
        
        //for the normal members
        //cycles thru pmdcmscv
        for(var y=0; y<pmdcmscv.length; y+=1){//start 3rd for
            
          //sets creds as N/A if its empty
          if(pmdcmscv[y][4].toString()===""){//start 2nd if
            pmdcmscv[y][4] = "N/A";
          }//end 2nd if
          
          //if group does have group leadership group inclusion/ are they in the group with a leadership role
          if(dllscv[63][dllscv[x+orderOfGroups[i][4]][orderOfGroups[i][1]+12]]==="Yes"){//start 2nd if
            
            //if they are in the group
            if(pmdcmscv[y][3].toString().indexOf(groupName)!==-1){//start 4th if
              
              //if they dont have a position code
              if(pmdcmscv[y][7].toString()==="N/A"){//start 6th if
                //add group name to allGroupSheetcvs
                for(var r=0; r<groupSheetcvLocs.length; r+=1){//start 6th for
                  allGroupSheetcvs[groupSheetcvLocs[r]][1].push([
                    "Member",pmdcmscv[y][0].toString(),
                    pmdcmscv[y][2].toString(),pmdcmscv[y][5].toString(),pmdcmscv[y][4].toString(),
                    dateReplace(pmdcmscv[y][20].toString())
                  ]);
                }//end 6th for
              }//end 6th if
              
              //if they have a position code
              if(pmdcmscv[y][7].toString()!=="N/A"){//start 6th if/else
                //add group name to allGroupSheetcvs
                for(var r=0; r<groupSheetcvLocs.length; r+=1){//start 6th for
                  allGroupSheetcvs[groupSheetcvLocs[r]][1].push([
                    "Member ~ "+positionCodeDiscordTransformer(pmdcmscv[y][7].toString()),pmdcmscv[y][0].toString(),
                    pmdcmscv[y][2].toString(),pmdcmscv[y][5].toString(),pmdcmscv[y][4].toString(),
                    dateReplace(pmdcmscv[y][20].toString())
                  ]);
                }//end 6th for
              }//end 6th if/else
            }//end 5th if
          }//end 2nd if
        }//end 3rd for
        
        
        //if no leadership roles in dllscv or after leadership roles are done with just search for group in pmdcmscv
        //if someone is found have them added to the allGroupSheetcvs and put member as the position
        
      }//end 1st if
    }//end 2nd for
  }//end 1st for
  
  
  //will need to get rid of duplicates in each group not the entire sheetcv
  //when getting rid of a duplicate the higher/later merge row nums need to be minused by one
  allGroupSheetcvs = memberDuplicateFilterForProfilesAndMemberHub(allGroupSheetcvs);
  
}//end memberFinderForCheck


function memberFinderForMemberHub(allGroupSheetcvs,orderOfGroups,dllscv,pmdcmscv){
  //need to add links to profile files in the future
  
  //cycles through each object in orderOfGroups
  for(var i=0; i<orderOfGroups.length; i+=1){//start 1st for
    
    //another for loop that loops orderOfGroups[i][2] times
    for(var x=0; x<orderOfGroups[i][2]; x+=1){//start 2nd for
      
      //if group is active
      if(dllscv[x+orderOfGroups[i][4]][orderOfGroups[i][1]+1].toString()==="Active"){//start 1st if
        var groupName = dllscv[x+orderOfGroups[i][4]][orderOfGroups[i][1]];
        var groupURLAndName = getGroupProfileUrlForSheets(groupName,dllscv);
        var groupSheetcvLocs = [];
        
        
        //finds locations for group sheet cvs
        for(var y=0; y<allGroupSheetcvs.length; y+=1){//start 3rd for
          if(orderOfGroups[i][3][0]===allGroupSheetcvs[y][0]){//start 2nd if
            groupSheetcvLocs.push(y);
          }//end 2nd if
          if(orderOfGroups[i][3][1]===allGroupSheetcvs[y][0]){//start 2nd if
            groupSheetcvLocs.push(y);
          }//end 2nd if
        }//end 3rd for
        
        
        //add group name to allGroupSheetcvs
        for(var y=0; y<groupSheetcvLocs.length; y+=1){//start 3rd for
          allGroupSheetcvs[groupSheetcvLocs[y]][1].push([groupURLAndName,"","","","",""]);
          allGroupSheetcvs[groupSheetcvLocs[y]][2].push(allGroupSheetcvs[groupSheetcvLocs[y]][1].length-1);
          allGroupSheetcvs[groupSheetcvLocs[y]][1].push(["Position","Gamertag","Rank","Generation","Credentials","Date Enlisted"]);
          allGroupSheetcvs[groupSheetcvLocs[y]][3].push(dllscv[64][dllscv[x+orderOfGroups[i][4]][orderOfGroups[i][1]+12]]);
        }//end 3rd for
        
        
        //then search if there is any leadership roles in dllscv present
        //gets any leadership roles and group role if any
        var leaderRoles = splitEmUp(dllscv[61][dllscv[x+orderOfGroups[i][4]][orderOfGroups[i][1]+12]]);
        
        
        //if true then search for those leadership roles in pmdcmscv
        if(leaderRoles.length!==0){//start 2nd if
          
          //cycles thru pmdcmscv
          for(var y=0; y<pmdcmscv.length; y+=1){//start 3rd for
            
            //sets creds as N/A if its empty
            if(pmdcmscv[y][4].toString()===""){//start 2nd if
              pmdcmscv[y][4] = "N/A";
            }//end 2nd if
            
            var curCreds = splitEmUp(pmdcmscv[y][4].toString());
            
            //cycles thru curCreds
            for(var z=0; z<curCreds.length; z+=1){//start 5th for
            
              //cycles thru leaderRoles
              for(var w=0; w<leaderRoles.length; w+=1){//start 6th for
                
                //if group does not have group leadership group inclusion/ are they in the group with a leadership role
                if(dllscv[62][dllscv[x+orderOfGroups[i][4]][orderOfGroups[i][1]+12]]==="No"){//start 3rd if
                
                  //if they have a included leadership role
                  if(curCreds[z].toString()===leaderRoles[w].toString()||pmdcmscv[y][2].toString()===leaderRoles[w].toString()||pmdcmscv[y][7].toString()===leaderRoles[w].toString()){//start 4th if
                    
                    //if they dont have a position code
                    if(pmdcmscv[y][7].toString()==="N/A"){//start 5th if
                      //add group name to allGroupSheetcvs
                      for(var r=0; r<groupSheetcvLocs.length; r+=1){//start 6th for
                        allGroupSheetcvs[groupSheetcvLocs[r]][1].push([
                          "Leadership",getMemberProfileUrlForSheets(groupName,pmdcmscv[y][0].toString(),pmdcmscv[y]),
                          pmdcmscv[y][2].toString(),pmdcmscv[y][5].toString(),pmdcmscv[y][4].toString(),
                          dateReplace(pmdcmscv[y][20].toString())
                        ]);
                      }//end 6th for
                      z = curCreds.length;
                      w = leaderRoles.length;
                    }//end 5th if
                    
                    //if they have a position code
                    if(pmdcmscv[y][7].toString()!=="N/A"){//start 5th if/else
                      //add group name to allGroupSheetcvs
                      for(var r=0; r<groupSheetcvLocs.length; r+=1){//start 6th for
                        allGroupSheetcvs[groupSheetcvLocs[r]][1].push([
                          "Leadership ~ "+positionCodeDiscordTransformer(pmdcmscv[y][7].toString()),getMemberProfileUrlForSheets(groupName,pmdcmscv[y][0].toString(),pmdcmscv[y]),
                          pmdcmscv[y][2].toString(),pmdcmscv[y][5].toString(),pmdcmscv[y][4].toString(),
                          dateReplace(pmdcmscv[y][20].toString())
                        ]);
                      }//end 6th for
                      z = curCreds.length;
                      w = leaderRoles.length;
                    }//end 5th if/else
                  }//end 4th if
                }//end 3rd if
                
                //if group does have group leadership group inclusion/ are they in the group with a leadership role
                else if(dllscv[62][dllscv[x+orderOfGroups[i][4]][orderOfGroups[i][1]+12]]==="Yes"){//start 3rd if/else
                  
                  //if they are in the group
                  if(pmdcmscv[y][3].toString().indexOf(groupName)!==-1){//start 4th if
                    
                    //if they have a included leadership role
                    if(curCreds[z].toString()===leaderRoles[w].toString()||pmdcmscv[y][2].toString()===leaderRoles[w].toString()||pmdcmscv[y][7].toString()===leaderRoles[w].toString()){//start 5th if
                      
                      //if they dont have a position code
                      if(pmdcmscv[y][7].toString()==="N/A"){//start 6th if
                        //add group name to allGroupSheetcvs
                        for(var r=0; r<groupSheetcvLocs.length; r+=1){//start 6th for
                          allGroupSheetcvs[groupSheetcvLocs[r]][1].push([
                            "Leadership",getMemberProfileUrlForSheets(groupName,pmdcmscv[y][0].toString(),pmdcmscv[y]),
                            pmdcmscv[y][2].toString(),pmdcmscv[y][5].toString(),pmdcmscv[y][4].toString(),
                            dateReplace(pmdcmscv[y][20].toString())
                          ]);
                        }//end 6th for
                        z = curCreds.length;
                        w = leaderRoles.length;
                      }//end 6th if
                      
                      //if they have a position code
                      if(pmdcmscv[y][7].toString()!=="N/A"){//start 6th if/else
                        //add group name to allGroupSheetcvs
                        for(var r=0; r<groupSheetcvLocs.length; r+=1){//start 6th for
                          allGroupSheetcvs[groupSheetcvLocs[r]][1].push([
                            "Leadership ~ "+positionCodeDiscordTransformer(pmdcmscv[y][7].toString()),getMemberProfileUrlForSheets(groupName,pmdcmscv[y][0].toString(),pmdcmscv[y]),
                            pmdcmscv[y][2].toString(),pmdcmscv[y][5].toString(),pmdcmscv[y][4].toString(),
                            dateReplace(pmdcmscv[y][20].toString())
                          ]);
                        }//end 6th for
                        z = curCreds.length;
                        w = leaderRoles.length;
                      }//end 6th if/else
                    }//end 5th if
                  }//end 4th if
                }//end 3rd if/else
              }//end 5th for
            }//end 4th for
          }//end 3rd for
        }//end 2nd if
        
        //for the normal members
        //cycles thru pmdcmscv
        for(var y=0; y<pmdcmscv.length; y+=1){//start 3rd for
            
          //sets creds as N/A if its empty
          if(pmdcmscv[y][4].toString()===""){//start 2nd if
            pmdcmscv[y][4] = "N/A";
          }//end 2nd if
          
          //if group does have group leadership group inclusion/ are they in the group with a leadership role
          if(dllscv[63][dllscv[x+orderOfGroups[i][4]][orderOfGroups[i][1]+12]]==="Yes"){//start 2nd if
            
            //if they are in the group
            if(pmdcmscv[y][3].toString().indexOf(groupName)!==-1){//start 4th if
              
              //if they dont have a position code
              if(pmdcmscv[y][7].toString()==="N/A"){//start 6th if
                //add group name to allGroupSheetcvs
                for(var r=0; r<groupSheetcvLocs.length; r+=1){//start 6th for
                  allGroupSheetcvs[groupSheetcvLocs[r]][1].push([
                    "Member",getMemberProfileUrlForSheets(groupName,pmdcmscv[y][0].toString(),pmdcmscv[y]),
                    pmdcmscv[y][2].toString(),pmdcmscv[y][5].toString(),pmdcmscv[y][4].toString(),
                    dateReplace(pmdcmscv[y][20].toString())
                  ]);
                }//end 6th for
              }//end 6th if
              
              //if they have a position code
              if(pmdcmscv[y][7].toString()!=="N/A"){//start 6th if/else
                //add group name to allGroupSheetcvs
                for(var r=0; r<groupSheetcvLocs.length; r+=1){//start 6th for
                  allGroupSheetcvs[groupSheetcvLocs[r]][1].push([
                    "Member ~ "+positionCodeDiscordTransformer(pmdcmscv[y][7].toString()),getMemberProfileUrlForSheets(groupName,pmdcmscv[y][0].toString(),pmdcmscv[y]),
                    pmdcmscv[y][2].toString(),pmdcmscv[y][5].toString(),pmdcmscv[y][4].toString(),
                    dateReplace(pmdcmscv[y][20].toString())
                  ]);
                }//end 6th for
              }//end 6th if/else
            }//end 5th if
          }//end 2nd if
        }//end 3rd for
        
        
        //if no leadership roles in dllscv or after leadership roles are done with just search for group in pmdcmscv
        //if someone is found have them added to the allGroupSheetcvs and put member as the position
        
      }//end 1st if
    }//end 2nd for
  }//end 1st for
  
  
  //will need to get rid of duplicates in each group not the entire sheetcv
  //when getting rid of a duplicate the higher/later merge row nums need to be minused by one
  allGroupSheetcvs = memberDuplicateFilterForProfilesAndMemberHub(allGroupSheetcvs);
  
}//end memberFinderForMemberHub


function memberFinderForPermSemiHub(allGroupSheetcvs,orderOfGroups,dllscv,pmdcmscv){
  //need to add links to profile files in the future
  
  //cycles through each object in orderOfGroups
  for(var i=0; i<orderOfGroups.length; i+=1){//start 1st for
    
    //another for loop that loops orderOfGroups[i][2] times
    for(var x=0; x<orderOfGroups[i][2]; x+=1){//start 2nd for
      
      //if group is active
      if(dllscv[x+orderOfGroups[i][4]][orderOfGroups[i][1]+1].toString()==="Active"){//start 1st if
        var groupName = dllscv[x+orderOfGroups[i][4]][orderOfGroups[i][1]];
        var groupURLAndName = getGroupProfileUrlForSheets(groupName,dllscv);
        var groupSheetcvLocs = [];
        
        
        //finds locations for group sheet cvs
        for(var y=0; y<allGroupSheetcvs.length; y+=1){//start 3rd for
          if(orderOfGroups[i][3][0]===allGroupSheetcvs[y][0]){//start 2nd if
            groupSheetcvLocs.push(y);
          }//end 2nd if
          if(orderOfGroups[i][3][1]===allGroupSheetcvs[y][0]){//start 2nd if
            groupSheetcvLocs.push(y);
          }//end 2nd if
        }//end 3rd for
        
        
        //add group name to allGroupSheetcvs
        for(var y=0; y<groupSheetcvLocs.length; y+=1){//start 3rd for
          allGroupSheetcvs[groupSheetcvLocs[y]][1].push([groupURLAndName,"","","","",""]);
          allGroupSheetcvs[groupSheetcvLocs[y]][2].push(allGroupSheetcvs[groupSheetcvLocs[y]][1].length-1);
          allGroupSheetcvs[groupSheetcvLocs[y]][1].push(["Position","Gamertag","Rank","Generation","Permissions","Date Enlisted"]);
          allGroupSheetcvs[groupSheetcvLocs[y]][3].push(dllscv[64][dllscv[x+orderOfGroups[i][4]][orderOfGroups[i][1]+12]]);
        }//end 3rd for
        
        
        //then search if there is any leadership roles in dllscv present
        //gets any leadership roles and group role if any
        var leaderRoles = splitEmUp(dllscv[61][dllscv[x+orderOfGroups[i][4]][orderOfGroups[i][1]+12]]);
        
        
        //if true then search for those leadership roles in pmdcmscv
        if(leaderRoles.length!==0){//start 2nd if
          
          //cycles thru pmdcmscv
          for(var y=0; y<pmdcmscv.length; y+=1){//start 3rd for
            
            var curCreds = splitEmUp(pmdcmscv[y][4].toString());
            
            //cycles thru curCreds
            for(var z=0; z<curCreds.length; z+=1){//start 5th for
            
              //cycles thru leaderRoles
              for(var w=0; w<leaderRoles.length; w+=1){//start 6th for
                
                //if group does not have group leadership group inclusion/ are they in the group with a leadership role
                if(dllscv[62][dllscv[x+orderOfGroups[i][4]][orderOfGroups[i][1]+12]]==="No"){//start 3rd if
                
                  //if they have a included leadership role
                  if(curCreds[z].toString()===leaderRoles[w].toString()||pmdcmscv[y][2].toString()===leaderRoles[w].toString()||pmdcmscv[y][7].toString()===leaderRoles[w].toString()){//start 4th if
                    
                    //if they dont have a position code
                    if(pmdcmscv[y][7].toString()==="N/A"){//start 5th if
                      //add group name to allGroupSheetcvs
                      for(var r=0; r<groupSheetcvLocs.length; r+=1){//start 6th for
                        allGroupSheetcvs[groupSheetcvLocs[r]][1].push([
                          "Leadership",getMemberProfileUrlForSheets(groupName,pmdcmscv[y][0].toString(),pmdcmscv[y]),
                          pmdcmscv[y][2].toString(),pmdcmscv[y][5].toString(),pmdcmscv[y][6].toString(),
                          dateReplace(pmdcmscv[y][20].toString())
                        ]);
                      }//end 6th for
                      z = curCreds.length;
                      w = leaderRoles.length;
                    }//end 5th if
                    
                    //if they have a position code
                    if(pmdcmscv[y][7].toString()!=="N/A"){//start 5th if/else
                      //add group name to allGroupSheetcvs
                      for(var r=0; r<groupSheetcvLocs.length; r+=1){//start 6th for
                        allGroupSheetcvs[groupSheetcvLocs[r]][1].push([
                          "Leadership ~ "+positionCodeDiscordTransformer(pmdcmscv[y][7].toString()),getMemberProfileUrlForSheets(groupName,pmdcmscv[y][0].toString(),pmdcmscv[y]),
                          pmdcmscv[y][2].toString(),pmdcmscv[y][5].toString(),pmdcmscv[y][6].toString(),
                          dateReplace(pmdcmscv[y][20].toString())
                        ]);
                      }//end 6th for
                      z = curCreds.length;
                      w = leaderRoles.length;
                    }//end 5th if/else
                  }//end 4th if
                }//end 3rd if
                
                //if group does have group leadership group inclusion/ are they in the group with a leadership role
                else if(dllscv[62][dllscv[x+orderOfGroups[i][4]][orderOfGroups[i][1]+12]]==="Yes"){//start 3rd if/else
                  
                  //if they are in the group
                  if(pmdcmscv[y][3].toString().indexOf(groupName)!==-1){//start 4th if
                    
                    //if they have a included leadership role
                    if(curCreds[z].toString()===leaderRoles[w].toString()||pmdcmscv[y][2].toString()===leaderRoles[w].toString()||pmdcmscv[y][7].toString()===leaderRoles[w].toString()){//start 5th if
                      
                      //if they dont have a position code
                      if(pmdcmscv[y][7].toString()==="N/A"){//start 6th if
                        //add group name to allGroupSheetcvs
                        for(var r=0; r<groupSheetcvLocs.length; r+=1){//start 6th for
                          allGroupSheetcvs[groupSheetcvLocs[r]][1].push([
                            "Leadership",getMemberProfileUrlForSheets(groupName,pmdcmscv[y][0].toString(),pmdcmscv[y]),
                            pmdcmscv[y][2].toString(),pmdcmscv[y][5].toString(),pmdcmscv[y][6].toString(),
                            dateReplace(pmdcmscv[y][20].toString())
                          ]);
                        }//end 6th for
                        z = curCreds.length;
                        w = leaderRoles.length;
                      }//end 6th if
                      
                      //if they have a position code
                      if(pmdcmscv[y][7].toString()!=="N/A"){//start 6th if/else
                        //add group name to allGroupSheetcvs
                        for(var r=0; r<groupSheetcvLocs.length; r+=1){//start 6th for
                          allGroupSheetcvs[groupSheetcvLocs[r]][1].push([
                            "Leadership ~ "+positionCodeDiscordTransformer(pmdcmscv[y][7].toString()),getMemberProfileUrlForSheets(groupName,pmdcmscv[y][0].toString(),pmdcmscv[y]),
                            pmdcmscv[y][2].toString(),pmdcmscv[y][5].toString(),pmdcmscv[y][6].toString(),
                            dateReplace(pmdcmscv[y][20].toString())
                          ]);
                        }//end 6th for
                        z = curCreds.length;
                        w = leaderRoles.length;
                      }//end 6th if/else
                    }//end 5th if
                  }//end 4th if
                }//end 3rd if/else
              }//end 5th for
            }//end 4th for
          }//end 3rd for
        }//end 2nd if
        
        //for the normal members
        //cycles thru pmdcmscv
        for(var y=0; y<pmdcmscv.length; y+=1){//start 3rd for
            
          //sets creds as N/A if its empty
          if(pmdcmscv[y][6].toString()===""){//start 2nd if
            pmdcmscv[y][6] = "N/A";
          }//end 2nd if
          
          //if group does have group leadership group inclusion/ are they in the group with a leadership role
          if(dllscv[63][dllscv[x+orderOfGroups[i][4]][orderOfGroups[i][1]+12]]==="Yes"){//start 2nd if
            
            //if they are in the group
            if(pmdcmscv[y][3].toString().indexOf(groupName)!==-1){//start 4th if
              
              //if they dont have a position code
              if(pmdcmscv[y][7].toString()==="N/A"){//start 6th if
                //add group name to allGroupSheetcvs
                for(var r=0; r<groupSheetcvLocs.length; r+=1){//start 6th for
                  allGroupSheetcvs[groupSheetcvLocs[r]][1].push([
                    "Member",getMemberProfileUrlForSheets(groupName,pmdcmscv[y][0].toString(),pmdcmscv[y]),
                    pmdcmscv[y][2].toString(),pmdcmscv[y][5].toString(),pmdcmscv[y][6].toString(),
                    dateReplace(pmdcmscv[y][20].toString())
                  ]);
                }//end 6th for
              }//end 6th if
              
              //if they have a position code
              if(pmdcmscv[y][7].toString()!=="N/A"){//start 6th if/else
                //add group name to allGroupSheetcvs
                for(var r=0; r<groupSheetcvLocs.length; r+=1){//start 6th for
                  allGroupSheetcvs[groupSheetcvLocs[r]][1].push([
                    "Member ~ "+positionCodeDiscordTransformer(pmdcmscv[y][7].toString()),getMemberProfileUrlForSheets(groupName,pmdcmscv[y][0].toString(),pmdcmscv[y]),
                    pmdcmscv[y][2].toString(),pmdcmscv[y][5].toString(),pmdcmscv[y][6].toString(),
                    dateReplace(pmdcmscv[y][20].toString())
                  ]);
                }//end 6th for
              }//end 6th if/else
            }//end 5th if
          }//end 2nd if
        }//end 3rd for
        
        
        //if no leadership roles in dllscv or after leadership roles are done with just search for group in pmdcmscv
        //if someone is found have them added to the allGroupSheetcvs and put member as the position
        
      }//end 1st if
    }//end 2nd for
  }//end 1st for
  
  
  //will need to get rid of duplicates in each group not the entire sheetcv
  //when getting rid of a duplicate the higher/later merge row nums need to be minused by one
  allGroupSheetcvs = memberDuplicateFilterForProfilesAndMemberHub(allGroupSheetcvs);
  
}//end memberFinderForPermSemiHub


function memberPasterForProfilesAndMemberHub(allGroupSheetcvs){
  //data pasting and formating
  for(var i=0; i<allGroupSheetcvs.length; i+=1){//start 1st for
    
    //hides sheet
    tripleTryHideSheet(allGroupSheetcvs[i][4]);
    
    //deletes all rows except one
    tripleTryDeleteRows(allGroupSheetcvs[i][4],2,allGroupSheetcvs[i][5]-1)
    
    
    //adds necessary rows
    tripleTryAddRows(allGroupSheetcvs[i][4], 1, allGroupSheetcvs[i][1].length-1);
    
    
    //paste data and format all to normal format
    allGroupSheetcvs[i][4].getRange(1,1,allGroupSheetcvs[i][1].length,6).setValues(allGroupSheetcvs[i][1])
      .setBorder(true, true, true, true, true, true, '#000000', SpreadsheetApp.BorderStyle.SOLID)
      .setBorder(true, true, true, true, null, null, '#000000', SpreadsheetApp.BorderStyle.SOLID_THICK)
      .setHorizontalAlignment('center').setVerticalAlignment('middle').setWrapStrategy(SpreadsheetApp.WrapStrategy.WRAP)
      .setFontFamily('Times New Roman').setFontSize(13).setFontColor('#000000').setFontLine('none');
    
    
    //changes all rows to normal size
    tripleTrySetRowsSize(allGroupSheetcvs[i][4], 1, allGroupSheetcvs[i][1].length, 50);
    
    
    //formats Generation
    tripleTrySetNumberFormat(allGroupSheetcvs[i][4],1,4,allGroupSheetcvs[i][1].length,1,'00');
    
    
    //then go thru each merge num to format and merge to what its supposed to be using the [3] to see if its main or not
    for(var x=0; x<allGroupSheetcvs[i][2].length; x+=1){//start 2nd for
      
      //main groups
      if(allGroupSheetcvs[i][3][x].toString()==="Main"){//start 1st if
        //row size
        tripleTrySetRowsSize(allGroupSheetcvs[i][4], allGroupSheetcvs[i][2][x]+1, 1, 100);
        
        //merge and other format
        allGroupSheetcvs[i][4].getRange(allGroupSheetcvs[i][2][x]+1,1,1,6).mergeAcross().setFontSize(48)
          .setBorder(true, true, true, true, null, null, '#000000', SpreadsheetApp.BorderStyle.SOLID_THICK);
      }//end 1st if
      
      //sub groups
      else if(allGroupSheetcvs[i][3][x].toString()==="Sub"){//start 1st if/else
        //row size
        tripleTrySetRowsSize(allGroupSheetcvs[i][4], allGroupSheetcvs[i][2][x]+1, 1, 75);
        
        //merge and other format
        allGroupSheetcvs[i][4].getRange(allGroupSheetcvs[i][2][x]+1,1,1,6).mergeAcross().setFontSize(36)
          .setBorder(true, true, true, true, null, null, '#000000', SpreadsheetApp.BorderStyle.SOLID_THICK);
      }//end 1st if/else
      
      //bold norm vals
      allGroupSheetcvs[i][4].getRange(allGroupSheetcvs[i][2][x]+2,1,1,6).setFontWeight('bold');
          
    }//end 2nd for
    
    
    //shows sheet
    tripleTryShowSheet(allGroupSheetcvs[i][4]);
    
  }//end 1st for
}//end memberPasterForProfilesAndMemberHub


function memberFinderForGroupProfiles(allGroupSheetcvs,orderOfGroups,dllscv,pmdcmscv){
  //need to add links to profile files in the future
  
  //cycles through each object in orderOfGroups
  for(var i=0; i<orderOfGroups.length; i+=1){//start 1st for
    
    //another for loop that loops orderOfGroups[i][2] times
    for(var x=0; x<orderOfGroups[i][2]; x+=1){//start 2nd for
      
      //if group is active
      if(dllscv[x+orderOfGroups[i][4]][orderOfGroups[i][1]+1].toString()==="Active"){//start 1st if
        var groupName = dllscv[x+orderOfGroups[i][4]][orderOfGroups[i][1]];
        var groupSheetcvLocs = [];
        
        
        //finds locations for group sheet cvs
        for(var y=0; y<allGroupSheetcvs.length; y+=1){//start 3rd for
          if(orderOfGroups[i][3][0]===allGroupSheetcvs[y][0]){//start 2nd if
            groupSheetcvLocs.push(y);
          }//end 2nd if
          if(orderOfGroups[i][3][1]===allGroupSheetcvs[y][0]){//start 2nd if
            groupSheetcvLocs.push(y);
          }//end 2nd if
        }//end 3rd for
        
        
        //add group name to allGroupSheetcvs
        for(var y=0; y<groupSheetcvLocs.length; y+=1){//start 3rd for
          allGroupSheetcvs[groupSheetcvLocs[y]][1].push([groupName,"","","","","","","","","","","","","",""]);
          allGroupSheetcvs[groupSheetcvLocs[y]][2].push(allGroupSheetcvs[groupSheetcvLocs[y]][1].length-1);
          allGroupSheetcvs[groupSheetcvLocs[y]][1].push(["Position","Gamertag","Status","Rank","Eligibility",
            "Generation","Credentials","Date Enlisted","Last Rank Change","","","Last Event Date",
            "Events Attended 7 days","Events Attended Since Last Rank Change","Number of Recruits"]);
          allGroupSheetcvs[groupSheetcvLocs[y]][3].push(dllscv[64][dllscv[x+orderOfGroups[i][4]][orderOfGroups[i][1]+12]]);
        }//end 3rd for
        
        
        //then search if there is any leadership roles in dllscv present
        //gets any leadership roles and group role if any
        var leaderRoles = splitEmUp(dllscv[61][dllscv[x+orderOfGroups[i][4]][orderOfGroups[i][1]+12]]);
        
        
        //if true then search for those leadership roles in pmdcmscv
        if(leaderRoles.length!==0){//start 2nd if
          
          //cycles thru pmdcmscv
          for(var y=0; y<pmdcmscv.length; y+=1){//start 3rd for
            
            //sets creds as N/A if its empty
            if(pmdcmscv[y][4].toString()===""){//start 2nd if
              pmdcmscv[y][4] = "N/A";
            }//end 2nd if
            
            var curCreds = splitEmUp(pmdcmscv[y][4].toString());
            
            //cycles thru curCreds
            for(var z=0; z<curCreds.length; z+=1){//start 5th for
            
              //cycles thru leaderRoles
              for(var w=0; w<leaderRoles.length; w+=1){//start 6th for
                
                //if group does not have group leadership group inclusion/ are they in the group with a leadership role
                if(dllscv[62][dllscv[x+orderOfGroups[i][4]][orderOfGroups[i][1]+12]]==="No"){//start 3rd if
                
                  //if they have a included leadership role
                  if(curCreds[z].toString()===leaderRoles[w].toString()||pmdcmscv[y][2].toString()===leaderRoles[w].toString()||pmdcmscv[y][7].toString()===leaderRoles[w].toString()){//start 4th if
                    
                    //if they dont have a position code
                    if(pmdcmscv[y][7].toString()==="N/A"){//start 5th if
                      //add group name to allGroupSheetcvs
                      for(var r=0; r<groupSheetcvLocs.length; r+=1){//start 6th for
                        
                        //here
                        
                        allGroupSheetcvs[groupSheetcvLocs[r]][1].push(["Leadership",pmdcmscv[y][0].toString(),y,"","","","","","","","","","","",""]);
                      }//end 6th for
                      z = curCreds.length;
                      w = leaderRoles.length;
                    }//end 5th if
                    
                    //if they have a position code
                    if(pmdcmscv[y][7].toString()!=="N/A"){//start 5th if/else
                      //add group name to allGroupSheetcvs
                      for(var r=0; r<groupSheetcvLocs.length; r+=1){//start 6th for
                        
                        //here
                        
                        allGroupSheetcvs[groupSheetcvLocs[r]][1].push(["Leadership ~ "+positionCodeDiscordTransformer(pmdcmscv[y][7].toString()),pmdcmscv[y][0].toString(),y,"","","","","","","","","","","",""]);
                      }//end 6th for
                      z = curCreds.length;
                      w = leaderRoles.length;
                    }//end 5th if/else
                  }//end 4th if
                }//end 3rd if
                
                //if group does have group leadership group inclusion/ are they in the group with a leadership role
                else if(dllscv[62][dllscv[x+orderOfGroups[i][4]][orderOfGroups[i][1]+12]]==="Yes"){//start 3rd if/else
                  
                  //if they are in the group
                  if(pmdcmscv[y][3].toString().indexOf(groupName)!==-1){//start 4th if
                    
                    //if they have a included leadership role
                    if(curCreds[z].toString()===leaderRoles[w].toString()||pmdcmscv[y][2].toString()===leaderRoles[w].toString()||pmdcmscv[y][7].toString()===leaderRoles[w].toString()){//start 5th if
                      
                      //if they dont have a position code
                      if(pmdcmscv[y][7].toString()==="N/A"){//start 6th if
                        //add group name to allGroupSheetcvs
                        for(var r=0; r<groupSheetcvLocs.length; r+=1){//start 6th for
                          
                          //here
                          
                          allGroupSheetcvs[groupSheetcvLocs[r]][1].push(["Leadership",pmdcmscv[y][0].toString(),y,"","","","","","","","","","","",""]);
                        }//end 6th for
                        z = curCreds.length;
                        w = leaderRoles.length;
                      }//end 6th if
                      
                      //if they have a position code
                      if(pmdcmscv[y][7].toString()!=="N/A"){//start 6th if/else
                        //add group name to allGroupSheetcvs
                        for(var r=0; r<groupSheetcvLocs.length; r+=1){//start 6th for
                          
                          //here
                          
                          allGroupSheetcvs[groupSheetcvLocs[r]][1].push(["Leadership ~ "+positionCodeDiscordTransformer(pmdcmscv[y][7].toString()),pmdcmscv[y][0].toString(),y,"","","","","","","","","","","",""]);
                        }//end 6th for
                        z = curCreds.length;
                        w = leaderRoles.length;
                      }//end 6th if/else
                    }//end 5th if
                  }//end 4th if
                }//end 3rd if/else
              }//end 5th for
            }//end 4th for
          }//end 3rd for
        }//end 2nd if
        
        //for the normal members
        //cycles thru pmdcmscv
        for(var y=0; y<pmdcmscv.length; y+=1){//start 3rd for
            
          //sets creds as N/A if its empty
          if(pmdcmscv[y][4].toString()===""){//start 2nd if
            pmdcmscv[y][4] = "N/A";
          }//end 2nd if
          
          //if group does have group leadership group inclusion/ are they in the group with a leadership role
          if(dllscv[63][dllscv[x+orderOfGroups[i][4]][orderOfGroups[i][1]+12]]==="Yes"){//start 2nd if
            
            //if they are in the group
            if(pmdcmscv[y][3].toString().indexOf(groupName)!==-1){//start 4th if
              
              //if they dont have a position code
              if(pmdcmscv[y][7].toString()==="N/A"){//start 6th if
                //add group name to allGroupSheetcvs
                for(var r=0; r<groupSheetcvLocs.length; r+=1){//start 6th for
                  
                  //here
                  
                  allGroupSheetcvs[groupSheetcvLocs[r]][1].push(["Member",pmdcmscv[y][0].toString(),y,"","","","","","","","","","","",""]);
                }//end 6th for
              }//end 6th if
              
              //if they have a position code
              if(pmdcmscv[y][7].toString()!=="N/A"){//start 6th if/else
                //add group name to allGroupSheetcvs
                for(var r=0; r<groupSheetcvLocs.length; r+=1){//start 6th for
                  
                  //here
                  
                  allGroupSheetcvs[groupSheetcvLocs[r]][1].push(["Member ~ "+positionCodeDiscordTransformer(pmdcmscv[y][7].toString()),pmdcmscv[y][0].toString(),y,"","","","","","","","","","","",""]);
                }//end 6th for
              }//end 6th if/else
            }//end 5th if
          }//end 2nd if
        }//end 3rd for
        
        
        //if no leadership roles in dllscv or after leadership roles are done with just search for group in pmdcmscv
        //if someone is found have them added to the allGroupSheetcvs and put member as the position
        
      }//end 1st if
    }//end 2nd for
  }//end 1st for
  
  
  //will need to get rid of duplicates in each group not the entire sheetcv
  //when getting rid of a duplicate the higher/later merge row nums need to be minused by one
  allGroupSheetcvs = memberDuplicateFilterForProfilesAndMemberHub(allGroupSheetcvs);
  
}//end memberFinderForGroupProfiles


function memberPasterForGroupProfiles(allGroupSheetcvs){
  //data pasting and formating
  for(var i=0; i<allGroupSheetcvs.length; i+=1){//start 1st for
    
    //hides sheet
    tripleTryHideSheet(allGroupSheetcvs[i][4]);
    
    //deletes all rows except one
    tripleTryDeleteRows(allGroupSheetcvs[i][4],2,allGroupSheetcvs[i][5]-1);
    
    
    //adds necessary rows
    tripleTryAddRows(allGroupSheetcvs[i][4], 1, allGroupSheetcvs[i][1].length-1);
    
    
    //paste data and format all to normal format
    allGroupSheetcvs[i][4].getRange(1,1,allGroupSheetcvs[i][1].length,15).setValues(allGroupSheetcvs[i][1])
      .setBorder(true, true, true, true, true, true, '#000000', SpreadsheetApp.BorderStyle.SOLID)
      .setBorder(true, true, true, true, null, null, '#000000', SpreadsheetApp.BorderStyle.SOLID_THICK)
      .setHorizontalAlignment('center').setVerticalAlignment('middle').setWrapStrategy(SpreadsheetApp.WrapStrategy.WRAP)
      .setFontFamily('Times New Roman').setFontSize(13).setFontColor('#000000').setFontLine('none');
    
    
    //changes all rows to normal size
    tripleTrySetRowsSize(allGroupSheetcvs[i][4], 1, allGroupSheetcvs[i][1].length, 50);
    
    
    //formats Generation
    tripleTrySetNumberFormat(allGroupSheetcvs[i][4],1,6,allGroupSheetcvs[i][1].length,1,'00');
    
    
    //then go thru each merge num to format and merge to what its supposed to be using the [3] to see if its main or not
    for(var x=0; x<allGroupSheetcvs[i][2].length; x+=1){//start 2nd for
      
      //main groups
      if(allGroupSheetcvs[i][3][x].toString()==="Main"){//start 1st if
        //row size
        tripleTrySetRowsSize(allGroupSheetcvs[i][4], allGroupSheetcvs[i][2][x]+1, 1, 100);
        
        //merge and other format
        allGroupSheetcvs[i][4].getRange(allGroupSheetcvs[i][2][x]+1,1,1,15).mergeAcross().setFontSize(48)
          .setBorder(true, true, true, true, null, null, '#000000', SpreadsheetApp.BorderStyle.SOLID_THICK);
      }//end 1st if
      
      //sub groups
      else if(allGroupSheetcvs[i][3][x].toString()==="Sub"){//start 1st if/else
        //row size
        tripleTrySetRowsSize(allGroupSheetcvs[i][4], allGroupSheetcvs[i][2][x]+1, 1, 75);
        
        //merge and other format
        allGroupSheetcvs[i][4].getRange(allGroupSheetcvs[i][2][x]+1,1,1,15).mergeAcross().setFontSize(36)
          .setBorder(true, true, true, true, null, null, '#000000', SpreadsheetApp.BorderStyle.SOLID_THICK);
      }//end 1st if/else
      
      //bold norm vals
      allGroupSheetcvs[i][4].getRange(allGroupSheetcvs[i][2][x]+2,1,1,15).setFontWeight('bold');
      
      //merge Rank change
      allGroupSheetcvs[i][4].getRange(allGroupSheetcvs[i][2][x]+2,9,1,3).mergeAcross();
          
    }//end 2nd for
    
    
    //shows sheet
    tripleTryShowSheet(allGroupSheetcvs[i][4]);
    
  }//end 1st for
}//end memberPasterForProfilesAndMemberHub


function arraySortObjNumDesc(array){
  for(var i=0; i<array.length-1; i+=1){//start 1st for
    for(var x=i+1; x<array.length; x+=1){//start 2nd for
      if(array[i][6]<array[x][6]){//start 1st if
        var temp = array[i];
        array[i] = array[x];
        array[x] = temp;
      }//end 1st if
    }//end 2nd for
  }//end 1st for
  return array;
}//arraySortObjNumDesc


function arraySortDescForGivenIndex(array, index){
  for(var i=0; i<array.length-1; i+=1){//start 1st for
    for(var x=i+1; x<array.length; x+=1){//start 2nd for
      if(array[i][index]<array[x][index]){//start 1st if
        var temp = array[i];
        array[i] = array[x];
        array[x] = temp;
      }//end 1st if
    }//end 2nd for
  }//end 1st for
  return array;
}//arraySortDescForGivenIndex


function forgePersonnelSpliterUpper(val){
  
  //if its a map edit
  if(val.toString().indexOf("Editor(s): ")!==-1){//start 1st if
    
    //take off the "Editor(s): "
    val = val.toString().replace("Editor(s): ", "");
    
    //put it thru splitEmUp
    val = splitEmUp(val);
    
  }//end 1st if
  
  
  //if its a new map
  else if(val.toString().indexOf("Original Overall Creator: ")!==-1){//start 1st if/else
    
    //take off the "Original Overall Creator: "
    val = val.toString().replace("Original Overall Creator: ", "");
    
    //take off the " ~ Assistant Creator(s):" and put ","
    val = val.toString().replace(" ~ Assistant Creator(s):", ",");
    
    //take off the " ~ Verification Personnel:" and put ","
    val = val.toString().replace(" ~ Verification Personnel:", ",");
    
    //put it thru splitEmUp
    val = splitEmUp(val);
    
  }//end 1st if/else
  
  //if its a map callout
  else if(val.toString()===""){//start 1st if/else
    val = ["N/A"];
  }//end 1st if/else
  
  return val;
}//end forgePersonnelSpliterUpper


function memberElegibility(memberVals,muhauscvn,currentDateNum,dllscv,muhauscv){
  var elegibility = "";
  var lastRankChangeNum = "";
  var lastRankChangeDate = "";
  var lastRankChangeDetails = "";
  
  //finds the last time they were promoted if any
  for(var i=0; i<muhauscvn.length; i+=1){//start 1st for
    if(muhauscvn[i][1].toString()===memberVals[0].toString()&&muhauscvn[i][0].toString()==="Rank Change"){//start 1st if
      lastRankChangeNum = muhauscvn[i][3];
      lastRankChangeDate = dateReplace(muhauscv[i][3]);
      lastRankChangeDetails = muhauscv[i][2].toString();
      i = muhauscvn.length;
    }//end 1st if
  }//end 1st for
  
  //if no last rank change found it puts time of last promo as date joined clan
  if(lastRankChangeNum===""){//start 1st if
    lastRankChangeNum = memberVals[27];
    lastRankChangeDate = dateReplace(memberVals[20]);
    lastRankChangeDetails = "Previous Rank: Helot ~ New Rank: E-1 ~ Conscript";
  }//end 1st if
  
  //finds what rank num to go for (fast track or normal)
  var curCreds = splitEmUp(memberVals[4].toString());
  var credQuals = splitEmUp(dllscv[23][0].toString());
  var fastTrack = false;
  for(var i=0; i<curCreds.length; i+=1){//start 1st for
    for(var x=0; x<credQuals.length; x+=1){//start 2nd for
      if(curCreds[i].toString() === credQuals[x].toString()){//start 1st if
        fastTrack = true;
      }//end 1st if
    }//end 2nd for
  }//end 1st for
  
  //finds rank in dllscv and gets the min time to rank up
  for(var i=0; i<dllscv[24].length; i+=1){//start 1st for
    for(var x=24; x<25; x+=4){//start 2nd for
      //normal rank time
      if(dllscv[x][i].toString()!==""&&dllscv[x][i].toString()===memberVals[2].toString()&&fastTrack===false){//start 3rd if
        var timeToRankUp = dllscv[x+2][i];
        var nextRank = dllscv[x][i+1].toString();
        i = dllscv[24].length;
        x = 37;
      }//end 3rd if
      //fast track
      else if(dllscv[x][i].toString()!==""&&dllscv[x][i].toString()===memberVals[2].toString()&&fastTrack){//start 3rd if/else
        var timeToRankUp = dllscv[x+3][i];
        var nextRank = dllscv[x][i+1].toString();
        i = dllscv[24].length;
        x = 37;
      }//end 3rd if/else
    }//end 2nd for
  }//end 1st for
  
  //time rank up != N/A and curDateNum - last rank change >= time rank up
  //if true says eligible for next rank
  if(timeToRankUp!=="N/A"&&currentDateNum-lastRankChangeNum>=timeToRankUp*7){//start 1st if
    elegibility = "Eligible for "+nextRank;
  }//end 1st if
  
  //time rank up != N/A and curDateNum - last rank change < time rank up
  //if true it says how long until Eligible
  else if(timeToRankUp!=="N/A"&&currentDateNum-lastRankChangeNum<timeToRankUp*7){//start 1st if
    var num = (timeToRankUp*7)-(currentDateNum-lastRankChangeNum);
    console.log(currentDateNum);
    console.log(timeToRankUp);
    console.log(lastRankChangeNum);
    console.log("\n");
    elegibility = "Not eligible for "+num+" days";
  }//end 1st if
  
  //time rank up === N/A
  //if true says eligible for next rank
  else if(timeToRankUp==="N/A"){//start 1st if
    elegibility = "N/A";
  }//end 1st if
  
  if(lastRankChangeNum < 0  ||  lastRankChangeNum > 60000){//start 1st if
    throw new Error('lastRankChangeNum too big/small');
  }//end 1st if
  
  if(timeToRankUp < 0  ||  timeToRankUp > 60000){//start 1st if
    throw new Error('timeToRankUp too big/small');
  }//end 1st if
  
  //makes an array to return needed vals
  var both = [elegibility,lastRankChangeNum,currentDateNum-lastRankChangeNum,lastRankChangeDate,lastRankChangeDetails];
  
  return both;
}//memberElegibility


function arrayToCodeArrayLVL2(array){
  for(var i=0; i<array.length; i+=1){//start 1st for
    for(var x=0; x<array[i].length; x+=1){//start 2nd for
      array[i][x] = '"'+array[i][x].toString()+'"';
    }//end 2nd for
  }//end 1st for
  console.log(array);
}//end arrayToCodeArrayLVL2


function arrayToCodeArrayLVL1(array){
  for(var i=0; i<array.length; i+=1){//start 1st for
    array[i] = '"'+array[i].toString()+'"';
  }//end 1st for
  console.log(array);
}//end arrayToCodeArrayLVL1


function tripleTryDiscWebhook(params,discordUrl){
  //tries to send the discord webhook the intended message
  try{//start 1st try
    UrlFetchApp.fetch(discordUrl,params);
  }//end 1st try
  catch(error){//start 1st catch
    
    //logs error
    console.log(error);
    
    //if the error is the webhook wasnt available
    if(error.name.toString()==="Exception"){//start 1st if
      Utilities.sleep(5000);
      
      //tries to send the discord webhook the intended message
      try{//start 2nd try
        UrlFetchApp.fetch(discordUrl,params);
      }//end 2nd try
      catch(error){//start 2nd catch
        
        //logs error
        console.log(error);
        
        //if the error is the webhook wasnt available
        if(error.name.toString()==="Exception"){//start 2nd if
          Utilities.sleep(5000);
          
          //tries to send the discord webhook the intended message
          try{//start 3rd try
            UrlFetchApp.fetch(discordUrl,params);
          }//end 3rd try
          catch(error){//start 3rd catch
            
            //logs error
            console.log(error);
            
            //if the error is the webhook wasnt available
            if(error.name.toString()==="Exception"){//start 3rd if
              throw error;
              
            }//end 3rd if
            
          }//end 3rd catch
          
        }//end 2nd if
        
        //if the error wasnt the webhook wasnt available
        else if(error.name.toString()!=="Exception"){//start 2nd if/else
          throw error;
        }//end 2nd if/else
        
      }//end 2nd catch
      
    }//end 1st if
    
    //if the error wasnt the webhook wasnt available
    else if(error.name.toString()!=="Exception"){//start 1st if/else
      throw error;
    }//end 1st if/else
    
  }//end 1st catch
  
  //makes the script wait 1.5 seconds to prevent discord limits from kicking in and webhooks from being unavailable
  Utilities.sleep(1500);
  
}//end tripleTryDiscWebhook


function forgePersonnelSpliterUpperMapCreatorOnly(val){
  var personnel = [];
  
  var newVal = "";
  
  //if its a new map
  if(val.toString().indexOf("Original Overall Creator: ")!==-1){//start 1st if
    
    //only takes og creator and asst creators
    newVal = val.toString().slice(val.toString().indexOf("Original Overall Creator: "),val.toString().indexOf(" ~ Verification Personnel:"));
    
    //take off the "Original Overall Creator: "
    newVal = newVal.toString().replace("Original Overall Creator: ", "");
    
    //take off the " ~ Assistant Creator(s):" and put ","
    newVal = newVal.toString().replace(" ~ Assistant Creator(s):", ",");
    
    //put it thru splitEmUp
    newVal = splitEmUp(newVal);
    
  }//end 1st if
  
  //if its a map callout
  else if(newVal.toString()===""){//start 1st if/else
    newVal = ["N/A"];
  }//end 1st if/else
  
  return newVal;
}//end forgePersonnelSpliterUpperMapCreatorOnly


function tripleTryFormResponsesToggle(formId,bool){
  //tries to turn off/on form responses
  try{//start 1st try
    FormApp.openById(formId).setAcceptingResponses(bool);
  }//end 1st try
  catch(error){//start 1st catch
    
    //logs error
    console.log(error);
    
    //if the error is an exception
    if(error.name.toString()==="Exception"){//start 1st if
      Utilities.sleep(2500);
      
      //tries to turn off/on form responses
      try{//start 2nd try
        FormApp.openById(formId).setAcceptingResponses(bool);
      }//end 2nd try
      catch(error){//start 2nd catch
        
        //logs error
        console.log(error);
        
        //if the error is an exception
        if(error.name.toString()==="Exception"){//start 2nd if
          Utilities.sleep(5000);
          
          //tries to turn off/on form responses
          try{//start 3rd try
            FormApp.openById(formId).setAcceptingResponses(bool);
          }//end 3rd try
          catch(error){//start 3rd catch
            
            //logs error
            console.log(error);
            
            throw error;
            
          }//end 3rd catch
          
        }//end 2nd if
        
        //if the error wasnt an exception
        else if(error.message.toString().indexOf("Address unavailable:")===-1){//start 2nd if/else
          throw error;
        }//end 2nd if/else
        
      }//end 2nd catch
      
    }//end 1st if
    
    //if the error wasnt an exception
    else if(error.message.toString().indexOf("Address unavailable:")===-1){//start 1st if/else
      throw error;
    }//end 1st if/else
    
  }//end 1st catch
  
}// end tripleTryFormResponsesToggle


function formTurnOff(inclusion, dllscv){
  
  //turn off all forms
  if(inclusion.toString()==="all"){//start 1st if
    
    //Debrief Form
    tripleTryFormResponsesToggle(dllscv[85][0].toString(),false);
    
    //Forge Form
    tripleTryFormResponsesToggle(dllscv[85][1].toString(),false);
    
    //New Member Form
    tripleTryFormResponsesToggle(dllscv[85][2].toString(),false);
    
    //Member Update Form
    tripleTryFormResponsesToggle(dllscv[85][3].toString(),false);
    
    //Expansion Form
    tripleTryFormResponsesToggle(dllscv[85][4].toString(),false);
      
    //Fixer Form
    tripleTryFormResponsesToggle(dllscv[85][5].toString(),false);
    
    //Group Report Form
    tripleTryFormResponsesToggle(dllscv[85][6].toString(),false);
    
    //Embedded Message Form
    tripleTryFormResponsesToggle(dllscv[85][7].toString(),false);
    
    //Permission Form
    tripleTryFormResponsesToggle(dllscv[85][8].toString(),false);
    
    //Update Control Form
    tripleTryFormResponsesToggle(dllscv[85][9].toString(),false);
    
    //Scheduling Form
    tripleTryFormResponsesToggle(dllscv[85][10].toString(),false);
  }//end 1st if
  
  //if your not turning every form off
  else if(inclusion.toString()!=="all"){//start 1st if/else
    for(var i=0; i<inclusion.length; i+=1){//start 1st for
      
      //Debrief Form
      if(inclusion[i].toString()==="df"){//start 2nd if
        tripleTryFormResponsesToggle(dllscv[85][0].toString(),false);
      }//end 2nd if
      
      //Forge Form
      if(inclusion[i].toString()==="ff"){//start 2nd if
        tripleTryFormResponsesToggle(dllscv[85][1].toString(),false);
      }//end 2nd if
      
      //New Member Form
      if(inclusion[i].toString()==="nmf"){//start 2nd if
        tripleTryFormResponsesToggle(dllscv[85][2].toString(),false);
      }//end 2nd if
      
      //Member Update Form
      if(inclusion[i].toString()==="muf"){//start 2nd if
        tripleTryFormResponsesToggle(dllscv[85][3].toString(),false);
      }//end 2nd if
      
      //Expansion Form
      if(inclusion[i].toString()==="ef"){//start 2nd if
        tripleTryFormResponsesToggle(dllscv[85][4].toString(),false);
      }//end 2nd if
      
      //Fixer Form
      if(inclusion[i].toString()==="fxf"){//start 2nd if
        tripleTryFormResponsesToggle(dllscv[85][5].toString(),false);
      }//end 2nd if
      
      //Group Report Form
      if(inclusion[i].toString()==="grf"){//start 2nd if
        tripleTryFormResponsesToggle(dllscv[85][6].toString(),false);
      }//end 2nd if
      
      //Embedded Message Form
      if(inclusion[i].toString()==="emf"){//start 2nd if
        tripleTryFormResponsesToggle(dllscv[85][7].toString(),false);
      }//end 2nd if
      
      //Update Control Form
      if(inclusion[i].toString()==="ucf"){//start 2nd if
        tripleTryFormResponsesToggle(dllscv[85][8].toString(),false);
      }//end 2nd if
      
      //Permission Form
      if(inclusion[i].toString()==="pf"){//start 2nd if
        tripleTryFormResponsesToggle(dllscv[85][9].toString(),false);
      }//end 2nd if
      
      //Scheduling Form
      if(inclusion[i].toString()==="sf"){//start 2nd if
        tripleTryFormResponsesToggle(dllscv[85][10].toString(),false);
      }//end 2nd if
      
    }//end 1st for
    
  }//end 1st if/else
  
}//end formTurnOff


function formTurnOn(inclusion, dllscv){
  
  //turn On all forms
  if(inclusion.toString()==="all"){//start 1st if
    
    //Debrief Form
    tripleTryFormResponsesToggle(dllscv[85][0].toString(),true);
    
    //Forge Form
    tripleTryFormResponsesToggle(dllscv[85][1].toString(),true);
    
    //New Member Form
    tripleTryFormResponsesToggle(dllscv[85][2].toString(),true);
    
    //Member Update Form
    tripleTryFormResponsesToggle(dllscv[85][3].toString(),true);
    
    //Expansion Form
    tripleTryFormResponsesToggle(dllscv[85][4].toString(),true);
      
    //Fixer Form
    tripleTryFormResponsesToggle(dllscv[85][5].toString(),true);
    
    //Group Report Form
    tripleTryFormResponsesToggle(dllscv[85][6].toString(),true);
    
    //Embedded Message Form
    tripleTryFormResponsesToggle(dllscv[85][7].toString(),true);
    
    //Update Control Form
    tripleTryFormResponsesToggle(dllscv[85][8].toString(),true);
    
    //Permission Form
    tripleTryFormResponsesToggle(dllscv[85][9].toString(),true);
    
    //Scheduling Form
    tripleTryFormResponsesToggle(dllscv[85][10].toString(),true);
  }//end 1st if
  
  //if your not turning every form On
  else if(inclusion.toString()!=="all"){//start 1st if/else
    for(var i=0; i<inclusion.length; i+=1){//start 1st for
      
      //Debrief Form
      if(inclusion[i].toString()==="df"){//start 2nd if
        tripleTryFormResponsesToggle(dllscv[85][0].toString(),true);
      }//end 2nd if
      
      //New Member Form
      if(inclusion[i].toString()==="nmf"){//start 2nd if
        tripleTryFormResponsesToggle(dllscv[85][1].toString(),true);
      }//end 2nd if
      
      //Forge Form
      if(inclusion[i].toString()==="ff"){//start 2nd if
        tripleTryFormResponsesToggle(dllscv[85][2].toString(),true);
      }//end 2nd if
      
      //Member Update Form
      if(inclusion[i].toString()==="muf"){//start 2nd if
        tripleTryFormResponsesToggle(dllscv[85][3].toString(),true);
      }//end 2nd if
      
      //Expansion Form
      if(inclusion[i].toString()==="ef"){//start 2nd if
        tripleTryFormResponsesToggle(dllscv[85][4].toString(),true);
      }//end 2nd if
      
      //Fixer Form
      if(inclusion[i].toString()==="fxf"){//start 2nd if
        tripleTryFormResponsesToggle(dllscv[85][5].toString(),true);
      }//end 2nd if
      
      //Group Report Form
      if(inclusion[i].toString()==="grf"){//start 2nd if
        tripleTryFormResponsesToggle(dllscv[85][6].toString(),true);
      }//end 2nd if
      
      //Embedded Message Form
      if(inclusion[i].toString()==="emf"){//start 2nd if
        tripleTryFormResponsesToggle(dllscv[85][7].toString(),true);
      }//end 2nd if
      
      //Update Control Form
      if(inclusion[i].toString()==="ucf"){//start 2nd if
        tripleTryFormResponsesToggle(dllscv[85][8].toString(),true);
      }//end 2nd if
      
      //Permission Form
      if(inclusion[i].toString()==="pf"){//start 2nd if
        tripleTryFormResponsesToggle(dllscv[85][9].toString(),true);
      }//end 2nd if
      
      //Scheduling Form
      if(inclusion[i].toString()==="sf"){//start 2nd if
        tripleTryFormResponsesToggle(dllscv[85][10].toString(),true);
      }//end 2nd if
      
    }//end 1st for
    
  }//end 1st if/else
  
}//end formTurnOn


function tripleTryOpenSheet(sheetId,sheetName){
  
  //tries to open the sheet
  try{//start 1st try
    var ss = SpreadsheetApp.openById(sheetId).getSheetByName(sheetName);
  }//end 1st try
  catch(error){//start 1st catch
            
    //logs error
    console.log(error);
    
    //if the error is the spreadsheet timed out
    if(error.name.toString()==="Exception"){//start 1st if
      Utilities.sleep(2500);
      
      //tries to open the sheet
      try{//start 2nd try
        var ss = SpreadsheetApp.openById(sheetId).getSheetByName(sheetName);
      }//end 2nd try
      catch(error){//start 2nd catch
            
        //logs error
        console.log(error);
        
        //if the error is the spreadsheet timed out
        if(error.name.toString()==="Exception"){//start 2nd if
          Utilities.sleep(5000);
          
          //tries to open the sheet
          try{//start 3rd try
            var ss = SpreadsheetApp.openById(sheetId).getSheetByName(sheetName);
          }//end 3rd try
          catch(error){//start 3rd catch
            
            //logs error
            console.log(error);
            
            throw error;
            
          }//end 3rd catch
          
        }//end 2nd if
        
        //if the error wasnt the spreadsheet timed out
        else if(error.name.toString()!=="Exception"){//start 2nd if/else
          throw error;
        }//end 2nd if/else
        
      }//end 2nd catch
      
    }//end 1st if
    
    //if the error wasnt the spreadsheet timed out
    else if(error.name.toString()!=="Exception"){//start 1st if/else
      throw error;
    }//end 1st if/else
    
  }//end 1st catch
  
  //returns ss if it is able to complete
  return ss;
  
}//end tripleTryOpenSheet


function tripleTryGetValues(ss,row,col,rows,cols){
  
  //tries to get the values in the range
  try{//start 1st try
    var sscv = ss.getRange(row,col,rows,cols).getValues();
  }//end 1st try
  catch(error){//start 1st catch
            
    //logs error
    console.log(error);
    
    //if the error is the spreadsheet timed out
    if(error.name.toString()==="Exception"){//start 1st if
      Utilities.sleep(2500);
      
      //tries to get the values in the range
      try{//start 2nd try
        var sscv = ss.getRange(row,col,rows,cols).getValues();
      }//end 2nd try
      catch(error){//start 2nd catch
            
        //logs error
        console.log(error);
        
        //if the error is the spreadsheet timed out
        if(error.name.toString()==="Exception"){//start 2nd if
          Utilities.sleep(5000);
          
          //tries to get the values in the range
          try{//start 3rd try
            var sscv = ss.getRange(row,col,rows,cols).getValues();
          }//end 3rd try
          catch(error){//start 3rd catch
            
            //logs error
            console.log(error);
            
            throw error;
            
          }//end 3rd catch
          
        }//end 2nd if
        
        //if the error wasnt the spreadsheet timed out
        else if(error.name.toString()!=="Exception"){//start 2nd if/else
          throw error;
        }//end 2nd if/else
        
      }//end 2nd catch
      
    }//end 1st if
    
    //if the error wasnt the spreadsheet timed out
    else if(error.name.toString()!=="Exception"){//start 1st if/else
      throw error;
    }//end 1st if/else
    
  }//end 1st catch
  
  //returns sscv if it is able to complete
  return sscv;
  
}//end tripleTryGetValues


function tripleTrySetNumberFormat(ss,row,col,rows,cols,format){
  
  //tries to set the format in the range
  try{//start 1st try
    ss.getRange(row,col,rows,cols).setNumberFormat(format);
  }//end 1st try
  catch(error){//start 1st catch
            
    //logs error
    console.log(error);
    
    //if the error is the spreadsheet timed out
    if(error.name.toString()==="Exception"){//start 1st if
      Utilities.sleep(2500);
      
      //tries to set the format in the range
      try{//start 2nd try
        ss.getRange(row,col,rows,cols).setNumberFormat(format);
      }//end 2nd try
      catch(error){//start 2nd catch
            
        //logs error
        console.log(error);
        
        //if the error is the spreadsheet timed out
        if(error.name.toString()==="Exception"){//start 2nd if
          Utilities.sleep(5000);
          
          //tries to set the format in the range
          try{//start 3rd try
            ss.getRange(row,col,rows,cols).setNumberFormat(format);
          }//end 3rd try
          catch(error){//start 3rd catch
            
            //logs error
            console.log(error);
            
            throw error;
            
          }//end 3rd catch
          
        }//end 2nd if
        
        //if the error wasnt the spreadsheet timed out
        else if(error.name.toString()!=="Exception"){//start 2nd if/else
          throw error;
        }//end 2nd if/else
        
      }//end 2nd catch
      
    }//end 1st if
    
    //if the error wasnt the spreadsheet timed out
    else if(error.name.toString()!=="Exception"){//start 1st if/else
      throw error;
    }//end 1st if/else
    
  }//end 1st catch
  
}//end tripleTrySetNumberFormat


function tripleTrySetSSValues(ss,row,col,rows,cols,values){
  
  //tries to set the format in the range
  try{//start 1st try
    ss.getRange(row,col,rows,cols).setValues(values);
  }//end 1st try
  catch(error){//start 1st catch
            
    //logs error
    console.log(error);
    
    //if the error is the spreadsheet timed out
    if(error.name.toString()==="Exception"){//start 1st if
      Utilities.sleep(2500);
      
      //tries to set the format in the range
      try{//start 2nd try
        ss.getRange(row,col,rows,cols).setValues(values);
      }//end 2nd try
      catch(error){//start 2nd catch
            
        //logs error
        console.log(error);
        
        //if the error is the spreadsheet timed out
        if(error.name.toString()==="Exception"){//start 2nd if
          Utilities.sleep(5000);
          
          //tries to set the format in the range
          try{//start 3rd try
            ss.getRange(row,col,rows,cols).setValues(values);
          }//end 3rd try
          catch(error){//start 3rd catch
            
            //logs error
            console.log(error);
            
            throw error;
            
          }//end 3rd catch
          
        }//end 2nd if
        
        //if the error wasnt the spreadsheet timed out
        else if(error.name.toString()!=="Exception"){//start 2nd if/else
          throw error;
        }//end 2nd if/else
        
      }//end 2nd catch
      
    }//end 1st if
    
    //if the error wasnt the spreadsheet timed out
    else if(error.name.toString()!=="Exception"){//start 1st if/else
      throw error;
    }//end 1st if/else
    
  }//end 1st catch
  
}//end tripleTrySetSSValues


function tripleTrySetSSValuesSingleString(ss,row,col,rows,cols,value){
  
  //tries to set the format in the range
  try{//start 1st try
    ss.getRange(row,col,rows,cols).setValue(value);
  }//end 1st try
  catch(error){//start 1st catch
            
    //logs error
    console.log(error);
    
    //if the error is the spreadsheet timed out
    if(error.name.toString()==="Exception"){//start 1st if
      Utilities.sleep(2500);
      
      //tries to set the format in the range
      try{//start 2nd try
        ss.getRange(row,col,rows,cols).setValue(value);
      }//end 2nd try
      catch(error){//start 2nd catch
            
        //logs error
        console.log(error);
        
        //if the error is the spreadsheet timed out
        if(error.name.toString()==="Exception"){//start 2nd if
          Utilities.sleep(5000);
          
          //tries to set the format in the range
          try{//start 3rd try
            ss.getRange(row,col,rows,cols).setValue(value);
          }//end 3rd try
          catch(error){//start 3rd catch
            
            //logs error
            console.log(error);
            
            throw error;
            
          }//end 3rd catch
          
        }//end 2nd if
        
        //if the error wasnt the spreadsheet timed out
        else if(error.name.toString()!=="Exception"){//start 2nd if/else
          throw error;
        }//end 2nd if/else
        
      }//end 2nd catch
      
    }//end 1st if
    
    //if the error wasnt the spreadsheet timed out
    else if(error.name.toString()!=="Exception"){//start 1st if/else
      throw error;
    }//end 1st if/else
    
  }//end 1st catch
  
}//end tripleTrySetSSValuesSingleString


function tripleTryAddRows(ss,row,rows){
  
  //tries to add the specified rows
  try{//start 1st try
    ss.insertRowsAfter(row,rows);
  }//end 1st try
  catch(error){//start 1st catch
            
    //logs error
    console.log(error);
    
    //if the error is the spreadsheet timed out
    if(error.name.toString()==="Exception"){//start 1st if
      Utilities.sleep(2500);
      
      //tries to add the specified rows
      try{//start 2nd try
        ss.insertRowsAfter(row,rows);
      }//end 2nd try
      catch(error){//start 2nd catch
            
        //logs error
        console.log(error);
        
        //if the error is the spreadsheet timed out
        if(error.name.toString()==="Exception"){//start 2nd if
          Utilities.sleep(5000);
          
          //tries to add the specified rows
          try{//start 3rd try
            ss.insertRowsAfter(row,rows);
          }//end 3rd try
          catch(error){//start 3rd catch
            
            //logs error
            console.log(error);
            
            throw error;
            
          }//end 3rd catch
          
        }//end 2nd if
        
        //if the error wasnt the spreadsheet timed out
        else if(error.name.toString()!=="Exception"){//start 2nd if/else
          throw error;
        }//end 2nd if/else
        
      }//end 2nd catch
      
    }//end 1st if
    
    //if the error wasnt the spreadsheet timed out
    else if(error.name.toString()!=="Exception"){//start 1st if/else
      throw error;
    }//end 1st if/else
    
  }//end 1st catch
  
}//end tripleTryAddRows


function tripleTryDeleteRows(ss,row,rows){
  
  //tries to delete the specified rows
  try{//start 1st try
    ss.deleteRows(row,rows);
  }//end 1st try
  catch(error){//start 1st catch
            
    //logs error
    console.log(error);
    
    //if the error is the spreadsheet timed out
    if(error.name.toString()==="Exception"){//start 1st if
      Utilities.sleep(2500);
      
      //tries to delete the specified rows
      try{//start 2nd try
        ss.deleteRows(row,rows);
      }//end 2nd try
      catch(error){//start 2nd catch
            
        //logs error
        console.log(error);
        
        //if the error is the spreadsheet timed out
        if(error.name.toString()==="Exception"){//start 2nd if
          Utilities.sleep(5000);
          
          //tries to delete the specified rows
          try{//start 3rd try
            ss.deleteRows(row,rows);
          }//end 3rd try
          catch(error){//start 3rd catch
            
            //logs error
            console.log(error);
            
            throw error;
            
          }//end 3rd catch
          
        }//end 2nd if
        
        //if the error wasnt the spreadsheet timed out
        else if(error.name.toString()!=="Exception"){//start 2nd if/else
          throw error;
        }//end 2nd if/else
        
      }//end 2nd catch
      
    }//end 1st if
    
    //if the error wasnt the spreadsheet timed out
    else if(error.name.toString()!=="Exception"){//start 1st if/else
      throw error;
    }//end 1st if/else
    
  }//end 1st catch
  
}//end tripleTryDeleteRows


function tripleTrySetRowsSize(ss, row, rows, size){
  
  //tries to set the specified rows height
  try{//start 1st try
    ss.setRowHeights(row, rows, size);
  }//end 1st try
  catch(error){//start 1st catch
            
    //logs error
    console.log(error);
    
    //if the error is the spreadsheet timed out
    if(error.name.toString()==="Exception"){//start 1st if
      Utilities.sleep(2500);
      
      //tries to set the specified rows height
      try{//start 2nd try
        ss.setRowHeights(row, rows, size);
      }//end 2nd try
      catch(error){//start 2nd catch
            
        //logs error
        console.log(error);
        
        //if the error is the spreadsheet timed out
        if(error.name.toString()==="Exception"){//start 2nd if
          Utilities.sleep(5000);
          
          //tries to set the specified rows height
          try{//start 3rd try
            ss.setRowHeights(row, rows, size);
          }//end 3rd try
          catch(error){//start 3rd catch
            
            //logs error
            console.log(error);
            
            throw error;
            
          }//end 3rd catch
          
        }//end 2nd if
        
        //if the error wasnt the spreadsheet timed out
        else if(error.name.toString()!=="Exception"){//start 2nd if/else
          throw error;
        }//end 2nd if/else
        
      }//end 2nd catch
      
    }//end 1st if
    
    //if the error wasnt the spreadsheet timed out
    else if(error.name.toString()!=="Exception"){//start 1st if/else
      throw error;
    }//end 1st if/else
    
  }//end 1st catch
  
}//end tripleTrySetRowsSize


function tripleTryGetLastRow(ss){
  
  //tries to get the last row
  try{//start 1st try
    var sslri = ss.getLastRow();
  }//end 1st try
  catch(error){//start 1st catch
            
    //logs error
    console.log(error);
    
    //if the error is the spreadsheet timed out
    if(error.name.toString()==="Exception"){//start 1st if
      Utilities.sleep(2500);
      
      //tries to get the last row
      try{//start 2nd try
        var sslri = ss.getLastRow();
      }//end 2nd try
      catch(error){//start 2nd catch
            
        //logs error
        console.log(error);
        
        //if the error is the spreadsheet timed out
        if(error.name.toString()==="Exception"){//start 2nd if
          Utilities.sleep(5000);
          
          //tries to get the last row
          try{//start 3rd try
            var sslri = ss.getLastRow();
          }//end 3rd try
          catch(error){//start 3rd catch
            
            //logs error
            console.log(error);
            
            throw error;
            
          }//end 3rd catch
          
        }//end 2nd if
        
        //if the error wasnt the spreadsheet timed out
        else if(error.name.toString()!=="Exception"){//start 2nd if/else
          throw error;
        }//end 2nd if/else
        
      }//end 2nd catch
      
    }//end 1st if
    
    //if the error wasnt the spreadsheet timed out
    else if(error.name.toString()!=="Exception"){//start 1st if/else
      throw error;
    }//end 1st if/else
    
  }//end 1st catch
  
  //returns sslri if it is able to complete
  return sslri;
  
}//end tripleTryGetLastRow


function tripleTryGetMaxRows(ss){
  
  //tries to get the max row
  try{//start 1st try
    var ssmri = ss.getMaxRows();
  }//end 1st try
  catch(error){//start 1st catch
            
    //logs error
    console.log(error);
    
    //if the error is the spreadsheet timed out
    if(error.name.toString()==="Exception"){//start 1st if
      Utilities.sleep(2500);
      
      //tries to get the max row
      try{//start 2nd try
        var ssmri = ss.getMaxRows();
      }//end 2nd try
      catch(error){//start 2nd catch
            
        //logs error
        console.log(error);
        
        //if the error is the spreadsheet timed out
        if(error.name.toString()==="Exception"){//start 2nd if
          Utilities.sleep(5000);
          
          //tries to get the max row
          try{//start 3rd try
            var ssmri = ss.getMaxRows();
          }//end 3rd try
          catch(error){//start 3rd catch
            
            //logs error
            console.log(error);
            
            throw error;
            
          }//end 3rd catch
          
        }//end 2nd if
        
        //if the error wasnt the spreadsheet timed out
        else if(error.name.toString()!=="Exception"){//start 2nd if/else
          throw error;
        }//end 2nd if/else
        
      }//end 2nd catch
      
    }//end 1st if
    
    //if the error wasnt the spreadsheet timed out
    else if(error.name.toString()!=="Exception"){//start 1st if/else
      throw error;
    }//end 1st if/else
    
  }//end 1st catch
  
  //returns ssmri if it is able to complete
  return ssmri;
  
}//end tripleTryGetMaxRows


function tripleTryGetMaxColumns(ss){
  
  //tries to get the max Columns
  try{//start 1st try
    var ssmci = ss.getMaxColumns();
  }//end 1st try
  catch(error){//start 1st catch
            
    //logs error
    console.log(error);
    
    //if the error is the spreadsheet timed out
    if(error.name.toString()==="Exception"){//start 1st if
      Utilities.sleep(2500);
      
      //tries to get the max Columns
      try{//start 2nd try
        var ssmci = ss.getMaxColumns();
      }//end 2nd try
      catch(error){//start 2nd catch
            
        //logs error
        console.log(error);
        
        //if the error is the spreadsheet timed out
        if(error.name.toString()==="Exception"){//start 2nd if
          Utilities.sleep(5000);
          
          //tries to get the max Columns
          try{//start 3rd try
            var ssmci = ss.getMaxColumns();
          }//end 3rd try
          catch(error){//start 3rd catch
            
            //logs error
            console.log(error);
            
            throw error;
            
          }//end 3rd catch
          
        }//end 2nd if
        
        //if the error wasnt the spreadsheet timed out
        else if(error.name.toString()!=="Exception"){//start 2nd if/else
          throw error;
        }//end 2nd if/else
        
      }//end 2nd catch
      
    }//end 1st if
    
    //if the error wasnt the spreadsheet timed out
    else if(error.name.toString()!=="Exception"){//start 1st if/else
      throw error;
    }//end 1st if/else
    
  }//end 1st catch
  
  //returns ssmci if it is able to complete
  return ssmci;
  
}//end tripleTryGetMaxColumns


function tripleTryHideSheet(ss){
  
  //tries to hide sheet
  try{//start 1st try
    ss.hideSheet();
  }//end 1st try
  catch(error){//start 1st catch
            
    //logs error
    console.log(error);
    
    //if the error is the spreadsheet timed out
    if(error.name.toString()==="Exception"){//start 1st if
      Utilities.sleep(2500);
      
      //tries to hide sheet
      try{//start 2nd try
        ss.hideSheet();
      }//end 2nd try
      catch(error){//start 2nd catch
            
        //logs error
        console.log(error);
        
        //if the error is the spreadsheet timed out
        if(error.name.toString()==="Exception"){//start 2nd if
          Utilities.sleep(5000);
          
          //tries to hide sheet
          try{//start 3rd try
            ss.hideSheet();
          }//end 3rd try
          catch(error){//start 3rd catch
            
            //logs error
            console.log(error);
            
            throw error;
            
          }//end 3rd catch
          
        }//end 2nd if
        
        //if the error wasnt the spreadsheet timed out
        else if(error.name.toString()!=="Exception"){//start 2nd if/else
          throw error;
        }//end 2nd if/else
        
      }//end 2nd catch
      
    }//end 1st if
    
    //if the error wasnt the spreadsheet timed out
    else if(error.name.toString()!=="Exception"){//start 1st if/else
      throw error;
    }//end 1st if/else
    
  }//end 1st catch
  
}//end tripleTryHideSheet


function tripleTryShowSheet(ss){
  
  //tries to showsheet
  try{//start 1st try
    ss.showSheet();
  }//end 1st try
  catch(error){//start 1st catch
            
    //logs error
    console.log(error);
    
    //if the error is the spreadsheet timed out
    if(error.name.toString()==="Exception"){//start 1st if
      Utilities.sleep(2500);
      
      //tries to showsheet
      try{//start 2nd try
        ss.showSheet();
      }//end 2nd try
      catch(error){//start 2nd catch
            
        //logs error
        console.log(error);
        
        //if the error is the spreadsheet timed out
        if(error.name.toString()==="Exception"){//start 2nd if
          Utilities.sleep(5000);
          
          //tries to showsheet
          try{//start 3rd try
            ss.showSheet();
          }//end 3rd try
          catch(error){//start 3rd catch
            
            //logs error
            console.log(error);
            
            throw error;
            
          }//end 3rd catch
          
        }//end 2nd if
        
        //if the error wasnt the spreadsheet timed out
        else if(error.name.toString()!=="Exception"){//start 2nd if/else
          throw error;
        }//end 2nd if/else
        
      }//end 2nd catch
      
    }//end 1st if
    
    //if the error wasnt the spreadsheet timed out
    else if(error.name.toString()!=="Exception"){//start 1st if/else
      throw error;
    }//end 1st if/else
    
  }//end 1st catch
  
}//end tripleTryShowSheet


function getdllscv(){
  //SpreadsheetApp.flush();
  //Data Lists Lists Sheet
  var dlls = tripleTryOpenSheet("","Lists");
  var dllscv = tripleTryGetValues(dlls,1,1,150,434);
  var returnVal = [dlls,dllscv];
  return returnVal;
}//end getdllscv


function getffethescv(inclusion, dllscv){
  //SpreadsheetApp.flush();
  //Form Fillout Errors Tech Hub Entries Sheet
  var ffethes = tripleTryOpenSheet(dllscv[82][5].toString(),"Entries");
  var ffetheslri = tripleTryGetLastRow(ffethes);
  var ffethescv = tripleTryGetValues(ffethes,3,1,ffetheslri-2,6);
  arrayReverse(ffethescv);
  var returnVal = [ffethes,ffethescv];
  return returnVal;
}//end getdllscv


function getpmdcmscv(inclusion){
  //SpreadsheetApp.flush();
  //pxe Member Data Current Members Sheet
  var pmdcms = tripleTryOpenSheet("","Current Members");
  var pmdcmslri = tripleTryGetLastRow(pmdcms);
  var returnVal = [];
  
  if(inclusion === "min"){//start 1st if
    returnVal = [pmdcms,pmdcmslri];
  }//end 1st if
  
  else{//start 1st else
    var pmdcmscv = tripleTryGetValues(pmdcms,2,1,pmdcmslri-1,50);
    returnVal = [pmdcms,pmdcmscv,pmdcmslri];
  }//end 1st else
  
  /*[Gamertag[0], Nickname[1], Rank[2], Group(s)[3], Credentials[4], 
    Generation[5], Permissions[6], Position Code[7], Status[8], Email[9], 
    ProfileIDs[10], ProfileURLs[11], ProfileFolderIDs[12], Sunday[13], 
    Monday[14], Tuesday[15], Wednesday[16], Thursday[17], Friday[18], 
    Saturday[19], Enlistment Date[20], Discharge Date[21], Cushion Date[22], 
    Cushion Date Num[23], Previous Emails[24], Mentor[25], Birthday[26], 
    Enlistment Date Num[27], Discharge Date Num[28], Permission Doc IDs[29], 
    [30], [31], [32], [33], [34], [35], [36], [37], [38], [39], [40], [41], 
    [42], [43], [44], [45], [46], [47], [48], [49]]*/
  
  return returnVal;
  
}//end getpmdcmscv


function getpmddmscv(inclusion){
  //SpreadsheetApp.flush();
  //Phoenix Era Member Data Discharged Members Sheet
  var pmddms = tripleTryOpenSheet("","Discharged Members");
  var pmddmslri = tripleTryGetLastRow(pmddms);
  var returnVal = [];
  
  if(inclusion === "min"){//start 1st if
    returnVal = [pmddms,pmddmslri];
  }//end 1st if
  
  else{//start 1st if
    var pmddmscv = tripleTryGetValues(pmddms,2,1,pmddmslri-1,50);
    returnVal = [pmddms,pmddmscv,pmddmslri];
  }//end 1st if
  
  /*[Gamertag[0], Nickname[1], Rank[2], Group(s)[3], Credentials[4], 
    Generation[5], Permissions[6], Position Code[7], Status[8], Email[9], 
    ProfileIDs[10], ProfileURLs[11], ProfileFolderIDs[12], Sunday[13], 
    Monday[14], Tuesday[15], Wednesday[16], Thursday[17], Friday[18], 
    Saturday[19], Enlistment Date[20], Discharge Date[21], Cushion Date[22], 
    Cushion Date Num[23], Previous Emails[24], Mentor[25], Birthday[26], 
    Enlistment Date Num[27], Discharge Date Num[28], Permission Doc IDs[29], 
    [30], [31], [32], [33], [34], [35], [36], [37], [38], [39], [40], [41], 
    [42], [43], [44], [45], [46], [47], [48], [49]]*/
  
  return returnVal;
  
}//end getpmddmscv


function getdldscv(){
  //SpreadsheetApp.flush();
  //Data Lists Dates Sheet
  var dlds = tripleTryOpenSheet("","Dates");
  var dldscv = tripleTryGetValues(dlds,1,1,50,510);
  var currentDateNum = dldscv[11][0];
  var currentDate = dateReplace(dldscv[1][0]);
  var returnVal = [dlds,dldscv,currentDateNum,currentDate];
  return returnVal;
  
}//end getdldscv


function getdldscvNum(){
  //SpreadsheetApp.flush();
  //Data Lists Dates Sheet
  var dlds = tripleTryOpenSheet("","Dates");
  tripleTrySetNumberFormat(dlds,2,2,1,509,"#,##0.00");
  var dldscvn = tripleTryGetValues(dlds,1,1,50,510);
  tripleTrySetNumberFormat(dlds,2,2,1,509,'M/d/yyyy H:mm:ss');
  var currentDateNum = dldscvn[11][0];
  var currentDate = dateReplace(dldscvn[1][0]);
  var returnVal = [dlds,dldscvn,currentDateNum,currentDate];
  return returnVal;
  SpreadsheetApp.flush();
}//end getdldscv


function getedhaedscv(inclusion, dllscv){
  //SpreadsheetApp.flush();
  //Event Debrief Hub all Event debriefs sheet
  var edhaeds = tripleTryOpenSheet(dllscv[82][0].toString(),"All Event Debriefs");
  var edhaedslri = tripleTryGetLastRow(edhaeds);
  var returnVal = [];
  
  if(inclusion==="date"){//start 1st if
    var edhaedscv = tripleTryGetValues(edhaeds,3,1,edhaedslri-2,13);
    returnVal = [edhaeds,edhaedscv,edhaedslri];
  }//end 1st if
  
  else if(inclusion==="num"){//start 1st if/else
    tripleTrySetNumberFormat(edhaeds,3,1,edhaedslri-2,1,"#,##0.00");
    var edhaedscvn = tripleTryGetValues(edhaeds,3,1,edhaedslri-2,13);
    tripleTrySetNumberFormat(edhaeds,3,1,edhaedslri-2,1,'mmm" "dd" "yyyy');
    returnVal = [edhaeds,edhaedscvn,edhaedslri];
  }//end 1st if/else
  
  else if(inclusion==="both"){//start 1st if/else
    tripleTrySetNumberFormat(edhaeds,3,1,edhaedslri-2,1,"#,##0.00");
    var edhaedscvn = tripleTryGetValues(edhaeds,3,1,edhaedslri-2,13);
    tripleTrySetNumberFormat(edhaeds,3,1,edhaedslri-2,1,'mmm" "dd" "yyyy');
    var edhaedscv = tripleTryGetValues(edhaeds,3,1,edhaedslri-2,13);
    returnVal = [edhaeds,edhaedscv,edhaedscvn,edhaedslri];
  }//end 1st if/else
  
  else if(inclusion==="both w/ time"){//start 1st if/else
    tripleTrySetNumberFormat(edhaeds,3,1,edhaedslri-2,3,"#,##0.00");
    var edhaedscvn = tripleTryGetValues(edhaeds,3,1,edhaedslri-2,13);
    tripleTrySetNumberFormat(edhaeds,3,2,edhaedslri-2,2,'h":"mm');
    tripleTrySetNumberFormat(edhaeds,3,1,edhaedslri-2,1,'mmm" "dd" "yyyy');
    var edhaedscv = tripleTryGetValues(edhaeds,3,1,edhaedslri-2,13);
    returnVal = [edhaeds,edhaedscv,edhaedscvn,edhaedslri];
  }//end 1st if/else
  
  else if(inclusion==="min"){//start 1st if/else
    returnVal = [edhaeds,edhaedslri];
  }//end 1st if/else
  
  /*
  [Date[0], Start Time[1], End Time[2], Event Type[3], 
    Participating Group(s)[4], Win/Loss[5], Leader of Event[6], 
    Secondary Leader(s)[7], Attendees[8], Debrief[9], 
    Additional Notes[10], Map(s) Used[11], Submission Personnel[12]]
  */
  
  return returnVal;
  
}//end getedhaedscv


function getfhfescv(inclusion, dllscv){
  //SpreadsheetApp.flush();
  //Forge Hub Forge Entries sheet
  var fhfes = tripleTryOpenSheet(dllscv[82][1].toString(),"Forge Entries");
  var fhfeslri = tripleTryGetLastRow(fhfes);
  var returnVal = [];
  
  if(inclusion==="date"){//start 1st if
    var fhfescv = tripleTryGetValues(fhfes,3,1,fhfeslri-2,6);
    returnVal = [fhfes,fhfescv,fhfeslri];
  }//end 1st if
  
  else if(inclusion==="num"){//start 1st if/else
    tripleTrySetNumberFormat(fhfes,3,2,fhfeslri-2,1,"#,##0.00");
    var fhfescvn = tripleTryGetValues(fhfes,3,1,fhfeslri-2,6);
    tripleTrySetNumberFormat(fhfes,3,2,fhfeslri-2,1,'mmm" "dd" "yyyy');
    returnVal = [fhfes,fhfescvn,fhfeslri];
  }//end 1st if/else
  
  else if(inclusion==="both"){//start 1st if/else
    tripleTrySetNumberFormat(fhfes,3,2,fhfeslri-2,1,"#,##0.00");
    var fhfescvn = tripleTryGetValues(fhfes,3,1,fhfeslri-2,6);
    tripleTrySetNumberFormat(fhfes,3,2,fhfeslri-2,1,'mmm" "dd" "yyyy');
    var fhfescv = tripleTryGetValues(fhfes,3,1,fhfeslri-2,6);
    returnVal = [fhfes,fhfescv,fhfescvn,fhfeslri];
  }//end 1st if/else
  
  else if(inclusion==="min"){//start 1st if/else
    returnVal = [fhfes,fhfeslri];
  }//end 1st if/else
  
  //[Type of Entry[0], Date of Entry[1], Map Name[2], Personnel[3], Details[4], Submission Personnel[5]]
  
  return returnVal;
  
}//end getfhfescv


function getmuhauscv(inclusion, dllscv){
  //SpreadsheetApp.flush();
  //Member Update Hub all updates sheet
  var muhaus = tripleTryOpenSheet(dllscv[82][3].toString(),"All Updates");
  var muhauslri = tripleTryGetLastRow(muhaus);
  var returnVal = [];
  
  if(inclusion==="date"){//start 1st if
    var muhauscv = tripleTryGetValues(muhaus,3,1,muhauslri-2,6);
    returnVal = [muhaus,muhauscv,muhauslri];
  }//end 1st if
  
  else if(inclusion==="num"){//start 1st if/else
    tripleTrySetNumberFormat(muhaus,3,4,muhauslri-2,1,"#,##0.00");
    var muhauscvn = tripleTryGetValues(muhaus,3,1,muhauslri-2,6);
    tripleTrySetNumberFormat(muhaus,3,4,muhauslri-2,1,'mmm" "dd" "yyyy');
    returnVal = [muhaus,muhauscvn,muhauslri];
  }//end 1st if/else
  
  else if(inclusion==="both"){//start 1st if/else
    tripleTrySetNumberFormat(muhaus,3,4,muhauslri-2,1,"#,##0.00");
    var muhauscvn = tripleTryGetValues(muhaus,3,1,muhauslri-2,6);
    tripleTrySetNumberFormat(muhaus,3,4,muhauslri-2,1,'mmm" "dd" "yyyy');
    var muhauscv = tripleTryGetValues(muhaus,3,1,muhauslri-2,6);
    returnVal = [muhaus,muhauscv,muhauscvn,muhauslri];
  }//end 1st if/else
  
  else if(inclusion==="min"){//start 1st if/else
    returnVal = [muhaus,muhauslri];
  }//end 1st if/else
  
  //[Type of Update[0], Member in Question[1], Update Details[2], Date of Update[3], Reasoning[4], Submission Personnel[5]]
  
  return returnVal;
  
}//end getmuhauscv


function getmuhnmuscv(inclusion, dllscv){
  //SpreadsheetApp.flush();
  //Member Update Hub New Member updates sheet
  var muhnmus = tripleTryOpenSheet(dllscv[82][3].toString(),"New Member Updates");
  var muhnmuslri = tripleTryGetLastRow(muhnmus);
  var returnVal = [];
  
  if(inclusion==="date"){//start 1st if
    var muhnmuscv = tripleTryGetValues(muhnmus,3,1,muhnmuslri-2,8);
    returnVal = [muhnmus,muhnmuscv,muhnmuslri];
  }//end 1st if
  
  else if(inclusion==="num"){//start 1st if/else
    tripleTrySetNumberFormat(muhnmus,3,4,muhnmuslri-2,1,"#,##0.00");
    var muhnmuscvn = tripleTryGetValues(muhnmus,3,1,muhnmuslri-2,8);
    tripleTrySetNumberFormat(muhnmus,3,4,muhnmuslri-2,1,'mmm" "dd" "yyyy');
    returnVal = [muhnmus,muhnmuscvn,muhnmuslri];
  }//end 1st if/else
  
  else if(inclusion==="both"){//start 1st if/else
    tripleTrySetNumberFormat(muhnmus,3,4,muhnmuslri-2,1,"#,##0.00");
    var muhnmuscvn = tripleTryGetValues(muhnmus,3,1,muhnmuslri-2,8);
    tripleTrySetNumberFormat(muhnmus,3,4,muhnmuslri-2,1,'mmm" "dd" "yyyy');
    var muhnmuscv = tripleTryGetValues(muhnmus,3,1,muhnmuslri-2,8);
    returnVal = [muhnmus,muhnmuscv,muhnmuscvn,muhnmuslri];
  }//end 1st if/else
  
  else if(inclusion==="min"){//start 1st if/else
    returnVal = [muhnmus,muhnmuslri];
  }//end 1st if/else
  
  //[Gamertag[0], Generation[1], Unblooded Mora[2], Bootcamp Date[3], LDI[4], Recruited By[5], Additional Notes[6], Submission Personnel[7]]
  
  return returnVal;
  
}//end getmuhnmuscv


function getfhamscv(inclusion, dllscv){
  //SpreadsheetApp.flush();
  //Forge Hub Active Maps sheet
  var fhams = tripleTryOpenSheet(dllscv[82][1].toString(),"Active Maps");
  var fhamslri = tripleTryGetLastRow(fhams);
  var fhamscv = tripleTryGetValues(fhams,3,1,fhamslri-2,15);
  /*[Map Name[0], Associated Gametype[1], Purpose(s)[2], Group[3], 
    Description[4], Map Owner[5], Creator[6], Assistant Creator(s)[7], 
    Date Created[8], Verification Personnel[9], Number of Players Supported[10], 
    Number of Times Used[11], Win/Loss Record[12], Date of Last Edit[13], Last Editor(s)[14]]*/
  
  var returnVal = [fhams,fhamscv,fhamslri];
  return returnVal;
  
}//end getfhamscv


function getfhimscv(inclusion, dllscv){
  //SpreadsheetApp.flush();
  //Forge Hub Active Maps sheet
  var fhims = tripleTryOpenSheet(dllscv[82][1].toString(),"Inactive Maps");
  var fhimslri = tripleTryGetLastRow(fhims);
  var fhimscv = tripleTryGetValues(fhims,3,1,fhimslri-2,15);
  /*[Map Name[0], Associated Gametype[1], Purpose(s)[2], Group[3], 
    Description[4], Map Owner[5], Creator[6], Assistant Creator(s)[7], 
    Date Created[8], Verification Personnel[9], Number of Players Supported[10], 
    Number of Times Used[11], Win/Loss Record[12], Date of Last Edit[13], Last Editor(s)[14]]*/
  
  var returnVal = [fhims,fhimscv,fhimslri];
  return returnVal;
  
}//end getfhimscv


function getfhambpscv(inclusion, dllscv){
  //SpreadsheetApp.flush();
  //Forge Hub Active Maps sheet
  var fhams = tripleTryOpenSheet(dllscv[82][1].toString(),"Active Maps By Purpose");
  var fhamslri = tripleTryGetLastRow(fhams);
  if(inclusion === "min"){//start 1st if
    var returnVal = [fhams,fhamslri];
  }//end 1st if
  else{
    var fhamscv = tripleTryGetValues(fhams,3,1,fhamslri-2,15);
    var returnVal = [fhams,fhamscv,fhamslri];
  }
  /*[Map Name[0], Associated Gametype[1], Purpose(s)[2], Group[3], 
    Description[4], Map Owner[5], Creator[6], Assistant Creator(s)[7], 
    Date Created[8], Verification Personnel[9], Number of Players Supported[10], 
    Number of Times Used[11], Win/Loss Record[12], Date of Last Edit[13], Last Editor(s)[14]]*/
  
  
  return returnVal;
  
}//end getfhamscv


function splitUpGroupChangeDetails(curVal){
  //Previous Group: Mora 1 Leadership ~ New Group: Camp Arion
  //Previous Group: N/A ~ New Group: Mora 1 Leadership
  curVal = curVal.toString().replace("Previous Group: ","");
  var oldGroup = "";
  var newGroup = "";
  
  //previous group
  for(var i=0; i<curVal.toString().indexOf(" ~ New Group:"); i+=1){//start 1st for
    oldGroup = oldGroup + curVal[i].toString();
  }//end 1st for
  
  //new group
  for(var i=curVal.toString().indexOf(" ~ New Group:")+14; i<curVal.length; i+=1){//start 1st for
    newGroup = newGroup + curVal[i].toString();
  }//end 1st for
  
  var returnVal = [oldGroup, newGroup];
  return returnVal;
  
}//end splitUpGroupChangeDetails


function splitUpLOALeaveDetails(curVal){
  //Leaving on LOA Starting on: May 09 2022 ~ Expected Return Date: May 31 2022ous Group: N/A ~ New Group: Mora 1 Leadership
  curVal = curVal.toString().replace("Leaving on LOA Starting on: ","");
  var leaveDate = "";
  var returnDate = "";
  
  //leave date
  for(var i=0; i<curVal.toString().indexOf(" ~ Expected Return Date:"); i+=1){//start 1st for
    leaveDate = leaveDate + curVal[i].toString();
  }//end 1st for
  
  //projected return date if any
  for(var i=curVal.toString().indexOf(" ~ Expected Return Date:")+25; i<curVal.length; i+=1){//start 1st for
    returnDate = returnDate + curVal[i].toString();
  }//end 1st for
  
  var returnVal = [leaveDate, returnDate];
  return returnVal;
  
}//end splitUpLOALeaveDetails


function splitUpLOAReturnDetails(curVal){
  //Returned from LOA as of: May 15 2022
  var returnDate = curVal.toString().replace("Returned from LOA as of: ","");
  return returnDate;
}//end splitUpLOAReturnDetails


function splitUpReprimandDetails(curVal){
  //Severity of Reprimand(1-5): 5
  var repNum = curVal.toString().replace("Severity of Reprimand(1-5): ","");
  return repNum;
}//end splitUpReprimandDetails


function splitUpRankChangeDetails(curVal){
  //Previous Rank: E-4 ~ Ekdromoi ~ New Rank: E-5 ~ Hoplite
  curVal = curVal.toString().replace("Previous Rank: ","");
  var prevRank = "";
  var newRank = "";
  
  //previous rank
  for(var i=0; i<curVal.toString().indexOf(" ~ New Rank:"); i+=1){//start 1st for
    prevRank = prevRank + curVal[i].toString();
  }//end 1st for
  
  //new rank
  for(var i=curVal.toString().indexOf(" ~ New Rank:")+13; i<curVal.length; i+=1){//start 1st for
    newRank = newRank + curVal[i].toString();
  }//end 1st for
  
  var returnVal = [prevRank, newRank];
  return returnVal;
  
}//end splitUpRankChangeDetails


function splitUpCredChangeDetails(curVal){
  //Previous Credential: N/A ~ New Credential: Drill Instructor
  //Previous Credential: Lead Drill Instructor U/I ~ New Credential: Lead Drill Instructor
  curVal = curVal.toString().replace("Previous Credential: ","");
  var oldCred = "";
  var newCred = "";
  
  //previous cred
  for(var i=0; i<curVal.toString().indexOf(" ~ New Credential:"); i+=1){//start 1st for
    oldCred = oldCred + curVal[i].toString();
  }//end 1st for
  
  //new cred
  for(var i=curVal.toString().indexOf(" ~ New Credential:")+19; i<curVal.length; i+=1){//start 1st for
    newCred = newCred + curVal[i].toString();
  }//end 1st for
  
  var returnVal = [oldCred, newCred];
  return returnVal;
  
}//end splitUpCredChangeDetails


function splitUpGTChangeDetails(curVal){
  curVal = curVal.toString().replace("Previous GT: ","");
  var oldGT = "";
  var newGT = "";
  
  //previous GT
  for(var i=0; i<curVal.toString().indexOf(" ~ New GT:"); i+=1){//start 1st for
    oldGT = oldGT + curVal[i].toString();
  }//end 1st for
  
  //new GT
  for(var i=curVal.toString().indexOf(" ~ New GT:")+11; i<curVal.length; i+=1){//start 1st for
    newGT = newGT + curVal[i].toString();
  }//end 1st for
  
  var returnVal = [oldGT, newGT];
  return returnVal;
  
}//end splitUpGTChangeDetails


function splitUpNicknameChangeDetails(curVal){
  //Previous Nickname: SirJonJon99 ~ New Nickname: SirJ
  curVal = curVal.toString().replace("Previous Nickname: ","");
  var oldNickname = "";
  var newNickname = "";
  
  //previous Nickname
  for(var i=0; i<curVal.toString().indexOf(" ~ New Nickname:"); i+=1){//start 1st for
    oldNickname = oldNickname + curVal[i].toString();
  }//end 1st for
  
  //new Nickname
  for(var i=curVal.toString().indexOf(" ~ New Nickname:")+17; i<curVal.length; i+=1){//start 1st for
    newNickname = newNickname + curVal[i].toString();
  }//end 1st for
  
  var returnVal = [oldNickname, newNickname];
  return returnVal;
  
}//end splitUpNicknameChangeDetails


function splitUpPositionCodeChangeDetails(curVal){
  //Previous Position Code: N/A ~ New Position Code: VG-05
  curVal = curVal.toString().replace("Previous Position Code: ","");
  var oldPositionCode = "";
  var newPositionCode = "";
  
  //previous Position Code
  for(var i=0; i<curVal.toString().indexOf(" ~ New Position Code:"); i+=1){//start 1st for
    oldPositionCode = oldPositionCode + curVal[i].toString();
  }//end 1st for
  
  //new Position Code
  for(var i=curVal.toString().indexOf(" ~ New Position Code:")+22; i<curVal.length; i+=1){//start 1st for
    newPositionCode = newPositionCode + curVal[i].toString();
  }//end 1st for
  
  var returnVal = [oldPositionCode, newPositionCode];
  return returnVal;
  
}//end splitUpPositionCodeChangeDetails


function splitUpBirthdayChangeDetails(curVal){
  //Previous Birthday: N/A ~ New Birthday: Jun 16
  curVal = curVal.toString().replace("Previous Birthday: ","");
  var oldBday = "";
  var newBday = "";
  
  //previous Position Code
  for(var i=0; i<curVal.toString().indexOf(" ~ New Birthday:"); i+=1){//start 1st for
    oldBday = oldBday + curVal[i].toString();
  }//end 1st for
  
  //new Position Code
  for(var i=curVal.toString().indexOf(" ~ New Birthday:")+17; i<curVal.length; i+=1){//start 1st for
    newBday = newBday + curVal[i].toString();
  }//end 1st for
  
  var returnVal = [oldBday, newBday];
  return returnVal;
  
}//end splitUpBirthdayChangeDetails


function splitUpMentorChangeDetails(curVal){
  //Previous Birthday: N/A ~ New Birthday: Jun 16
  curVal = curVal.toString().replace("Previous Mentor: ","");
  var oldMentor = "";
  var newMentor = "";
  
  //previous Position Code
  for(var i=0; i<curVal.toString().indexOf(" ~ New Mentor:"); i+=1){//start 1st for
    oldMentor = oldMentor + curVal[i].toString();
  }//end 1st for
  
  //new Position Code
  for(var i=curVal.toString().indexOf(" ~ New Mentor:")+15; i<curVal.length; i+=1){//start 1st for
    newMentor = newMentor + curVal[i].toString();
  }//end 1st for
  
  var returnVal = [oldMentor, newMentor];
  return returnVal;
  
}//end splitUpMentorChangeDetails


function getMemberProfileUrlForSheets(curGroup,curGt,curMemRow){
  //curMemRow[11] = profile urls
  var curVals = splitEmUp(curMemRow[11]);
  var curUrl = "";
  for(var i=0; i<curVals.length; i+=1){//start 1st for
    if(curGroup===pmdcmsIdGroupNameRetrieval(curVals[i].toString())){//start 1st if
      var curUrl = pmdcmsIdRetrieval(curVals[i].toString());
      i = curVals.length;
    }//end 1st if
  }//end 1st for

  var curReturnVal = "";
  
  //if url was found it sends correct hyperlinked cell format
  if(curUrl!==""){//start 1st if
    curReturnVal = '=HYPERLINK("'+curUrl+'", "'+curGt+'")';  
  }//end 1st if
  
  //if no url was found then it just sends back the og name
  else if(curUrl===""){//start 1st if/else
    curReturnVal = curGt;  
  }//end 1st if/else
  
  //'=HYPERLINK("", "Legion 1 - Equitum")'
  return curReturnVal;
}//end getMemberProfileUrlForSheets


function getGroupProfileUrlForSheets(curGroup,dllscv){
  //dllscv[40][i] = group name
  //dllscv[48][i] = group url
  var curUrl = "";
  for(var i=0; i<57; i+=1){//start 1st for
    if(curGroup===dllscv[40][i].toString()&&dllscv[48][i].toString()!==""){//start 1st if
      curUrl = dllscv[48][i].toString();
      i = 78;
    }//end 1st if
    else if(curGroup===dllscv[40][i].toString()&&dllscv[49][i].toString()!==""){//start 1st if
      curUrl = dllscv[49][i].toString();
      i = 78;
    }//end 1st if
  }//end 1st for
  
  var curReturnVal = "";
  
  //if url was found it sends correct hyperlinked cell format
  if(curUrl!==""){//start 1st if
    curReturnVal = '=HYPERLINK("'+curUrl+'", "'+curGroup+'")';  
  }//end 1st if
  
  //if no url was found then it just sends back the og name
  else if(curUrl===""){//start 1st if/else
    curReturnVal = curGroup;  
  }//end 1st if/else
  
  //'=HYPERLINK("", "Legion 1 - Equitum")'
  return curReturnVal;
}//end getGroupProfileUrlForSheets


function randomString(length){
  var chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";
  var returnVal = "";
  for(var i=0; i<length; i+=1){//start 1st for
    returnVal += chars.charAt(Math.floor(Math.random()*chars.length));
  }//end 1st for
  return returnVal;
}//end randomString


function getmfhaescv(inclusion, dllscv){
  //SpreadsheetApp.flush();
  //miscellaneous Form Hub Entries Sheet
  var mfhaes = tripleTryOpenSheet(dllscv[82][4].toString(),"All Entries");
  var mfhaeslri = tripleTryGetLastRow(mfhaes);
  var returnVal = [];
  
  if(inclusion==="date"){//start 1st if
    var mfhaescv = tripleTryGetValues(mfhaes,3,1,mfhaeslri-2,5);
    returnVal = [mfhaes,mfhaescv,mfhaeslri];
  }//end 1st if
  
  else if(inclusion==="num"){//start 1st if/else
    tripleTrySetNumberFormat(mfhaes,3,2,mfhaeslri-2,1,"#,##0.00");
    var mfhaescvn = tripleTryGetValues(mfhaes,3,1,mfhaeslri-2,5);
    tripleTrySetNumberFormat(mfhaes,3,2,mfhaeslri-2,1,'mmm" "dd" "yyyy');
    returnVal = [mfhaes,mfhaescvn,mfhaeslri];
  }//end 1st if/else
  
  else if(inclusion==="both"){//start 1st if/else
    tripleTrySetNumberFormat(mfhaes,3,2,mfhaeslri-2,1,"#,##0.00");
    var mfhaescvn = tripleTryGetValues(mfhaes,3,1,mfhaeslri-2,5);
    tripleTrySetNumberFormat(mfhaes,3,2,mfhaeslri-2,1,'mmm" "dd" "yyyy');
    var mfhaescv = tripleTryGetValues(mfhaes,3,1,mfhaeslri-2,5);
    returnVal = [mfhaes,mfhaescv,mfhaescvn,mfhaeslri];
  }//end 1st if/else
  
  else if(inclusion==="min"){//start 1st if/else
    returnVal = [mfhaes,mfhaeslri];
  }//end 1st if/else
  
  //[Form In Question[0], Date of Entry[1], Time of Submission[2], Details[3], Submission Personnel[4]]
  
  return returnVal;
  
}//end getmfhaescv


function positionCodeDiscordTransformer(val){
  var returnVal = val.toString();
  
  //one number
  if(returnVal.length === 1){//start 1st if
    returnVal = "00" + returnVal;
  }//end 1st if
  
  //two numbers
  else if(returnVal.length === 2){//start 1st if
    returnVal = "0" + returnVal;
  }//end 1st if
  
  return returnVal;
}//end positionCodeDiscordTransformer


function getDiscordNickname(memberGT,dllscv,pmdcmscv){
  
  var currentFullDiscordNickname = "???";
  
  //cycling through members to see if email matches anyone
  for(var i=0; i<pmdcmscv.length; i+=1){//start 1st for
    
    if(pmdcmscv[i][0].toString().toLowerCase()===memberGT.toString().toLowerCase()){//start 2nd if
      var currentNickname = pmdcmscv[i][1].toString();
      var currentRank = pmdcmscv[i][2].toString();
      var currentPositionCode = positionCodeDiscordTransformer(pmdcmscv[i][7].toString());
      
      //gets rank abbreviation for full nickname
      for(var y=0; y<dllscv[24].length; y+=1){//start 2nd for
        if(dllscv[24][y].toString()!==""&&dllscv[24][y].toString()===currentRank){//start 2nd if
          var currentRankAbbreviation = dllscv[25][y].toString();
        }//end 2nd if
      }//end 2nd for
      
      if(currentPositionCode!==""&&currentPositionCode!=="N/A"){//start 2nd if
        currentFullDiscordNickname = "[" + currentRankAbbreviation + "] " + currentNickname + " ~ " + currentPositionCode;
      }//end 2nd if
      
      else if(currentPositionCode===""||currentPositionCode==="N/A"){//start 2nd if
        currentFullDiscordNickname = "["+currentRankAbbreviation+"] "+currentNickname;
      }//end 2nd if
      
    }//end 1st if
    
  }//end 1st for
  
  return currentFullDiscordNickname;

}//end getDiscordNickname


function getDiscordNicknameWithRow(row,dllscv,pmdcmscv){
  
  var currentFullDiscordNickname = "???";
    
  var currentNickname = pmdcmscv[row][1].toString();
  var currentRank = pmdcmscv[row][2].toString();
  var currentPositionCode = positionCodeDiscordTransformer(pmdcmscv[row][7].toString());
  
  //gets rank abbreviation for full nickname
  for(var y=0; y<dllscv[24].length; y+=1){//start 2nd for
    if(dllscv[24][y].toString()!==""&&dllscv[24][y].toString()===currentRank){//start 2nd if
      var currentRankAbbreviation = dllscv[25][y].toString();
    }//end 2nd if
  }//end 2nd for
  
  if(currentPositionCode!==""&&currentPositionCode!=="N/A"){//start 2nd if
    currentFullDiscordNickname = "[" + currentRankAbbreviation + "] " + currentNickname + " ~ " + currentPositionCode;
  }//end 2nd if
  
  else if(currentPositionCode===""||currentPositionCode==="N/A"){//start 2nd if
    currentFullDiscordNickname = "["+currentRankAbbreviation+"] "+currentNickname;
  }//end 2nd if
  
  return currentFullDiscordNickname;

}//end getDiscordNicknameWithRow


function getAllPossibleDiscRoles(dllscv){
  var discRoles = [["LOA"], ["Phoenix Era"]];
  //gets credentials
  for(var i=16; i<23; i+=2){//start 1st for
    for(var x=1; x<dllscv[i].length; x+=1){//start 2nd for
      if(dllscv[i][x].toString()!==""){//start 1st if
        discRoles.push([dllscv[i][x].toString()]);  
      }//end 1st if
    }//end 2nd for
  }//end 1st for
  
  //gets all ranks
  for(var x=0; x<dllscv[i].length; x+=1){//start 2nd for
    if(dllscv[24][x].toString()!==""){//start 1st if
      discRoles.push([dllscv[24][x].toString()]);
    }//end 1st if
  }//end 2nd for
  
  
  //gets all groups and all group leadership roles
  //does leader roles by taking its leadersip type col and if row 62 = yes it has leadership roles
  for(var i=0; i<dllscv[40].length; i+=1){//start 1st for
    if(dllscv[40][i].toString()!==""){//start 1st if
      //adds it to discRoles
      discRoles.push([dllscv[40][i].toString()]);
      //check to see if there is leadership role or not
      if(dllscv[62][dllscv[53][i]].toString()==="Yes"){//start 1st if
        discRoles.push([dllscv[40][i].toString()+" Leadership"]);
      }//end 1st if
    }//end 1st if
  }//end 1st for
  
  discRoles = arrayDuplicateFilter(discRoles);
  
  return discRoles;
  
}//end getAllPossibleDiscRoles


function bulkRoleNameChange(discRoles,oldVal,newVal){
  
  //finds roles that need to be changed
  for(var i=0; i<discRoles.length; i+=1){//start 1st for
    if(discRoles[i].toString().indexOf(oldVal)!==-1){//start 1st if
      var tempVal = discRoles[i].toString().replace(oldVal,newVal);
      var message = "ch^r,"+discRoles[i].toString()+","+tempVal;
      discordExpansionFormSend(message);
      Utilities.sleep(250);
    }//end 1st if
  }//end 1st for
  
}//end roleNameChangeTechForm


function createRoles(discRoles){
  
  //cycles through roles and sends disc command to create them
  for(var i=0; i<discRoles.length; i+=1){//start 1st for
    var message = "c^r,"+discRoles[i].toString()+",#00ff00";
    discordExpansionFormSend(message);
  }//end 1st for
  
}//end roleAddTechForm


function miscFormHubEntry(form, date, time, details, subPerson, dllscv){
  
  //miscellaneous Form Hub Entries Sheet
  var mfhaes = tripleTryOpenSheet(dllscv[82][4].toString(),"All Entries");
  var mfhaeslri = tripleTryGetLastRow(mfhaes);
  
  
  //create new variable for vals
  var mfhnv = [[form, date, time, details, subPerson]];
  
  
  //paste values in order by date recent first
  tripleTryAddRows(mfhaes,2,1);
  mfhaes.getRange(3,1,1,mfhnv[0].length).setValues(mfhnv).setFontWeight(null).setBorder(true, true, true, true, true, true, '#000000', SpreadsheetApp.BorderStyle.SOLID).setHorizontalAlignment('center').setVerticalAlignment('middle').setWrapStrategy(SpreadsheetApp.WrapStrategy.WRAP).setFontFamily('Times New Roman').setFontSize(13).setFontColor('#000000');
  tripleTrySetRowsSize(mfhaes, 3, 1, 150);
  var mfhaescv = mfhaes.getRange(3,1,mfhaeslri-1,mfhnv[0].length).setNumberFormat('#,##0.00').getValues();
  tripleTrySetNumberFormat(mfhaes,3,2,mfhaeslri-1,1,'mmm" "dd" "yyyy');
  tripleTrySetNumberFormat(mfhaes,3,3,mfhaeslri-1,1,'h":"mm" "am/pm');
  var mfhaesRowNum = "";
  for(var i = 1;i<mfhaescv.length;i++){
    if(mfhaescv[0][1]>=mfhaescv[i][1]){mfhaesRowNum=i;break;}
    if(mfhaescv[0][1]<mfhaescv[i][1]){}
    if(mfhaescv[0][1]<mfhaescv[i][1]&&i===mfhaescv.length-1){
      mfhaesRowNum=i+1;
      tripleTryAddRows(mfhaes,mfhaesRowNum+2,1)}}
  if(mfhaesRowNum>1){mfhaes.moveRows(mfhaes.getRange('3:3'), mfhaesRowNum+3);}
  if(mfhaesRowNum+1===mfhaeslri){tripleTryDeleteRows(mfhaes,mfhaesRowNum+3,1);}
  mfhaes.getRange(3,1,mfhaeslri-1,mfhnv[0].length).setBorder(true, true, true, true, true, true, '#000000', SpreadsheetApp.BorderStyle.SOLID);
  mfhaes.getRange(1,1,mfhaeslri+1,mfhnv[0].length).setBorder(true, true, true, true, null, null, '#000000', SpreadsheetApp.BorderStyle.SOLID_THICK);
  
}//end techFormHubEntry


function getMemberDiscordInfo(dllscv,pmdcmscv,memberGt){
  //finds all needed info
  for(var i=0; i<pmdcmscv.length; i+=1){//start 1st for
    if(pmdcmscv[i][0].toString()===memberGt){//start 2nd if
      var memberRowNum = i+2;
      var currentFullDiscordNickname = getDiscordNicknameWithRow(i,dllscv,pmdcmscv);
      var currentRank = pmdcmscv[i][2].toString();
      var currentGroups = splitEmUp(pmdcmscv[i][3].toString());
      var currentCredentials = splitEmUp(pmdcmscv[i][4].toString());
      var currentGeneration = pmdcmscv[i][5].toString();
      var currentPermissions = splitEmUp(pmdcmscv[i][6].toString());
      var currentPositionCode = pmdcmscv[i][7].toString();
      var currentStatus = pmdcmscv[i][8].toString();
      var currentEmail = pmdcmscv[i][9].toString();
      var currentProfileIds = splitEmUp(pmdcmscv[i][10].toString());
      var currentProfileUrls = splitEmUp(pmdcmscv[i][11].toString());
      var currentProfileFolderIds = splitEmUp(pmdcmscv[i][12].toString());
    }//end 2nd if
  }//end 1st for
  
  //finds disc roles for each individual group they are in
  if(currentStatus === "LOA"){//start 1st if
    var discRoles = [["LOA"], ["Phoenix Era"]];
  }//end 1st if
  else{var discRoles = [["Phoenix Era"]]}
  for(var i=0; i<currentGroups.length; i+=1){//start 1st for
    discRoles.push([currentGroups[i].toString()]);
    if(currentGroups[i].toString().indexOf("Camp") !== -1  &&  currentGroups[i].toString().indexOf("Leadership") === -1){//start 1st if
      discRoles.push(["Rudis"]);
    }//end 1st if
    for(var x=0; x<dllscv[40].length; x+=1){//start 2nd for
      var curGroup = currentGroups[i].toString().replace(" Leadership","");
      if(dllscv[40][x].toString()===curGroup&&dllscv[54][x].toString()!==""&&dllscv[54][x].toString()!=="N/A"){//start 1st if
        var curGroupDiscInclusion = splitEmUp(dllscv[54][x].toString());
        for(var y=0; y<curGroupDiscInclusion.length; y+=1){//start 3rd for
          discRoles.push([dllscv[40][curGroupDiscInclusion[y]].toString()]);
        }//end 3rd for
      }//end 1st if
    }//end 2nd for
  }//end 1st for
  
  //finds disc roles for their credentials
  //filter out U/I
  for(var i=0; i<currentCredentials.length; i+=1){//start 1st for
    discRoles.push([currentCredentials[i].toString().replace("U/I","")]);
  }//end 1st for
  
  //finds disc role for their rank
  //just their current rank
  discRoles.push([currentRank]);
  
  //filters out duplicates
  discRoles = arrayDuplicateFilter(discRoles);
  
  //makes discRoles into text
  var discRolesText = array1LevelIntoString(discRoles);
  
  var returnVal = [currentFullDiscordNickname,discRoles,discRolesText];
  
  return returnVal;
  
}//end getMemberDiscordInfo


function permissionDecipher(str){
  var miscPerms = [];
  var hubPerms = [];
  var dataCenterPerms = [];
  var groupPerms = [];
  
  //if they dont have any perms
  if(str === "N/A || N/A || N/A || N/A"){//start 1st if
    miscPerms = ["N/A"];
    hubPerms = ["N/A"];
    dataCenterPerms = ["N/A"];
    groupPerms = ["N/A"];
  }//end 1st if
  
  //if they have perms for anything
  else if(str !== "N/A || N/A || N/A || N/A"){//start 1st if
    //splits up string into 3 sections, misc, hubs, and groups
    //gets positions of ' || '
    var stopPoints = [-1, -1, -1];
    stopPoints[0] = str.indexOf(" || ");
    stopPoints[1] = str.indexOf(" || ", stopPoints[0]+1);
    stopPoints[2] = str.indexOf(" || ", stopPoints[1]+1);
    
    
    //gets individual strings
    
    //misc first
    var curPermString = "";
    for(var i=0; i<stopPoints[0]; i+=1){//start 1st for
      curPermString = curPermString + str[i];
    }//end 1st for
    miscPerms = splitEmUp(curPermString);
    
    //if length is 0 make the array just ["N/A"]
    if(miscPerms.length === 0){//start 2nd if
      miscPerms = ["N/A"];
    }//end 2nd if
    
    
    //hubs next
    curPermString = "";
    for(var i=stopPoints[0]+4; i<stopPoints[1]; i+=1){//start 1st for
      curPermString = curPermString + str[i];
    }//end 1st for
    hubPerms = splitEmUp(curPermString);
    
    //if length is 0 make the array just ["N/A"]
    if(hubPerms.length === 0){//start 2nd if
      hubPerms = ["N/A"];
    }//end 2nd if
    
    
    //data Center next
    curPermString = "";
    for(var i=stopPoints[1]+4; i<stopPoints[2]; i+=1){//start 1st for
      curPermString = curPermString + str[i];
    }//end 1st for
    dataCenterPerms = splitEmUp(curPermString);
    
    //if length is 0 make the array just ["N/A"]
    if(dataCenterPerms.length === 0){//start 2nd if
      dataCenterPerms = ["N/A"];
    }//end 2nd if
    
    
    //groups next
    curPermString = "";
    for(var i=stopPoints[2]+4; i<str.length; i+=1){//start 1st for
      curPermString = curPermString + str[i];
    }//end 1st for
    
    //gets individual groups
    //starts by gett locations of ' | '
    var critPoints = [0];
    for(var i=0; i<critPoints.length; i+=1){//start 1st for
      //if string has ' | '
      if(curPermString.indexOf(" | ", critPoints[critPoints.length-1]) !== -1){//start 2nd if
        critPoints.push(curPermString.indexOf(" | ", critPoints[critPoints.length-1])+1);
      }//end 2nd if
    }//end 1st for
    critPoints.push(curPermString.length+1);
    critPoints[0] = -2;
    
    //gets individual group perms
    //first it separates the groups into their own string
    var curGroupString = "";
    for(var i=0; i<critPoints.length-1; i+=1){//start 1st for
      curGroupString = "";
      //gets group perms string
      for(var x=critPoints[i]+2; x<critPoints[i+1]-1; x+=1){//start 2nd for
        curGroupString = curGroupString + curPermString[x];
      }//end 2nd for
      //splits group name and its individual perms and puts it into groupPerms
      //if it isnt N/A
      if(curGroupString.indexOf(" ~ ") !== -1){//start 2nd if
      groupPerms.push([curGroupString.slice(0, curGroupString.indexOf(" ~ ")), 
        splitEmUp(curGroupString.slice(curGroupString.indexOf(" ~ ")+3))]);
      }//end 2nd if
    }//end 1st for
    //if length is 0 make the array just ["N/A"]
    if(groupPerms.length === 0){//start 2nd if
      groupPerms = ["N/A"];
    }//end 2nd if
  }//end 1st if
  
  
  return [miscPerms, hubPerms, dataCenterPerms, groupPerms];
}//end permissionDecipher


function permissionEncoder(permArray){
  var permString = "";
  //misc first
  //check for N/A
  if(permArray[0].toString() !== "N/A"){//start 1st if
    permString = array1LevelIntoString(permArray[0]) + " || ";
  }//end 1st if
  //if its n/a
  else{//start 1st if/else
    permString = "N/A || ";
  }//end 1st if/else
  
  
  //hubs next
  //check for N/A
  if(permArray[1].toString() !== "N/A"){//start 1st if
    permString = permString + array1LevelIntoString(permArray[1]) + " || ";
  }//end 1st if
  //if its n/a
  else{//start 1st if/else
    permString = permString + "N/A || ";
  }//end 1st if/else
  
  
  //data centers next
  //check for N/A
  if(permArray[2].toString() !== "N/A"){//start 1st if
    permString = permString + array1LevelIntoString(permArray[2]) + " || ";
  }//end 1st if
  //if its n/a
  else{//start 1st if/else
    permString = permString + "N/A || ";
  }//end 1st if/else
  
  
  //groups next
  //check for N/A
  if(permArray[3].toString() !== "N/A"){//start 1st if
    //adds first group
    permString = permString + permArray[3][0][0].toString() + " ~ " + array1LevelIntoString(permArray[3][0][1]);
    //adds any subsequent groups
    for(var i=1; i<permArray[3].length; i+=1){//start 1st for
      permString = permString + " | " + permArray[3][i][0].toString() + " ~ " + array1LevelIntoString(permArray[3][i][1]);
    }//end 1st for
  }//end 1st if
  //if its n/a
  else{//start 1st if/else
    permString = permString + "N/A";
  }//end 1st if/else
  
  
  return permString;
  
}//end permissionEncoder


function tripleTryUnshareEmailForFileViewer(email, fileID){
  //tries to remove old email
  try{//start 1st try
    DriveApp.getFileById(fileID).removeViewer(email);
  }//end 1st try
  catch(error){//start 1st catch
    
    //logs error
    console.log(error);
    
    //if the error is an exception but not 'No such user'
    if(error.name.toString() === "Exception"  &&  error.message.toString() !== 'No such user'){//start 1st if
      Utilities.sleep(5000);
      
      //tries to remove old email
      try{//start 2nd try
        DriveApp.getFileById(fileID).removeViewer(email);
      }//end 2nd try
      catch(error){//start 2nd catch
        
        //logs error
        console.log(error);
        
        //if the error is an exception but not 'No such user'
        if(error.name.toString() === "Exception"  &&  error.message.toString() !== 'No such user'){//start 2nd if
          Utilities.sleep(5000);
          
          //tries to remove old email
          try{//start 3rd try
            DriveApp.getFileById(fileID).removeViewer(email);
          }//end 3rd try
          catch(error){//start 3rd catch
            
            //logs error
            console.log(error);
            
            //if the error is the an exception but isnt 'No such user'
            if(error.message.toString() !== 'No such user'){//start 3rd if
              throw error;
            }//end 3rd if
            
          }//end 3rd catch
          
        }//end 2nd if
        
        //if the error wasnt the webhook wasnt an exception
        else if(error.name.toString() !== "Exception"){//start 2nd if/else
          throw error;
        }//end 2nd if/else
        
      }//end 2nd catch
      
    }//end 1st if
    
    //if the error wasnt the webhook wasnt an exception
    else if(error.name.toString() !== "Exception"){//start 1st if/else
      throw error;
    }//end 1st if/else
    
  }//end 1st catch
  
  //makes the script wait .5 seconds
  Utilities.sleep(500);
}//end tripleTryUnshareEmailForFileViewer


function tripleTryUnshareEmailForFileEditor(email, fileID){
  //tries to remove old email
  try{//start 1st try
    DriveApp.getFileById(fileID).removeEditor(email);
  }//end 1st try
  catch(error){//start 1st catch
    
    //logs error
    console.log(error);
    
    //if the error is an exception but not 'No such user'
    if(error.name.toString() === "Exception"  &&  error.message.toString() !== 'No such user'){//start 1st if
      Utilities.sleep(5000);
      
      //tries to remove old email
      try{//start 2nd try
        DriveApp.getFileById(fileID).removeEditor(email);
      }//end 2nd try
      catch(error){//start 2nd catch
        
        //logs error
        console.log(error);
        
        //if the error is an exception but not 'No such user'
        if(error.name.toString() === "Exception"  &&  error.message.toString() !== 'No such user'){//start 2nd if
          Utilities.sleep(5000);
          
          //tries to remove old email
          try{//start 3rd try
            DriveApp.getFileById(fileID).removeEditor(email);
          }//end 3rd try
          catch(error){//start 3rd catch
            
            //logs error
            console.log(error);
            
            //if the error is the an exception but isnt 'No such user'
            if(error.message.toString() !== 'No such user'){//start 3rd if
              throw error;
            }//end 3rd if
            
          }//end 3rd catch
          
        }//end 2nd if
        
        //if the error wasnt the webhook wasnt an exception
        else if(error.name.toString() !== "Exception"){//start 2nd if/else
          throw error;
        }//end 2nd if/else
        
      }//end 2nd catch
      
    }//end 1st if
    
    //if the error wasnt the webhook wasnt an exception
    else if(error.name.toString() !== "Exception"){//start 1st if/else
      throw error;
    }//end 1st if/else
    
  }//end 1st catch
  
  //makes the script wait .5 seconds
  Utilities.sleep(500);
}//end tripleTryUnshareEmailForFileEditor


function tripleTryShareEmailForFileViewer(email, fileID){
  //tries to add email
  try{//start 1st try
    DriveApp.getFileById(fileID).addViewer(email);
  }//end 1st try
  catch(error){//start 1st catch
    
    //logs error
    console.log(error);
    
    //if the error is an exception but not 'No such user'
    if(error.name.toString() === "Exception"){//start 1st if
      Utilities.sleep(5000);
      
      //tries to add email
      try{//start 2nd try
        DriveApp.getFileById(fileID).addViewer(email);
      }//end 2nd try
      catch(error){//start 2nd catch
        
        //logs error
        console.log(error);
        
        //if the error is an exception but not 'No such user'
        if(error.name.toString() === "Exception"){//start 2nd if
          Utilities.sleep(5000);
          
          //tries to add email
          try{//start 3rd try
            DriveApp.getFileById(fileID).addViewer(email);
          }//end 3rd try
          catch(error){//start 3rd catch
            
            //logs error
            console.log(error);
            
            throw error;
            
          }//end 3rd catch
          
        }//end 2nd if
        
        //if the error wasnt the webhook wasnt an exception
        else if(error.name.toString() !== "Exception"){//start 2nd if/else
          throw error;
        }//end 2nd if/else
        
      }//end 2nd catch
      
    }//end 1st if
    
    //if the error wasnt the webhook wasnt an exception
    else if(error.name.toString() !== "Exception"){//start 1st if/else
      throw error;
    }//end 1st if/else
    
  }//end 1st catch
  
  //makes the script wait .5 seconds
  Utilities.sleep(500);
}//end tripleTryShareEmailForFileViewer


function tripleTryUnshareEmailForFolderViewer(email, folderID){
  //tries to remove old email
  try{//start 1st try
    DriveApp.getFolderById(folderID).removeViewer(email);
  }//end 1st try
  catch(error){//start 1st catch
    
    //logs error
    console.log(error);
    
    //if the error is an exception but not 'No such user'
    if(error.name.toString() === "Exception"  &&  error.message.toString() !== 'No such user'){//start 1st if
      Utilities.sleep(5000);
      
      //tries to remove old email
      try{//start 2nd try
        DriveApp.getFolderById(folderID).removeViewer(email);
      }//end 2nd try
      catch(error){//start 2nd catch
        
        //logs error
        console.log(error);
        
        //if the error is an exception but not 'No such user'
        if(error.name.toString() === "Exception"  &&  error.message.toString() !== 'No such user'){//start 2nd if
          Utilities.sleep(5000);
          
          //tries to remove old email
          try{//start 3rd try
            DriveApp.getFolderById(folderID).removeViewer(email);
          }//end 3rd try
          catch(error){//start 3rd catch
            
            //logs error
            console.log(error);
            
            //if the error is the an exception but isnt 'No such user'
            if(error.message.toString() !== 'No such user'){//start 3rd if
              throw error;
            }//end 3rd if
            
          }//end 3rd catch
          
        }//end 2nd if
        
        //if the error wasnt the webhook wasnt an exception
        else if(error.name.toString() !== "Exception"){//start 2nd if/else
          throw error;
        }//end 2nd if/else
        
      }//end 2nd catch
      
    }//end 1st if
    
    //if the error wasnt the webhook wasnt an exception
    else if(error.name.toString() !== "Exception"){//start 1st if/else
      throw error;
    }//end 1st if/else
    
  }//end 1st catch
  
  //makes the script wait .5 seconds
  Utilities.sleep(500);
}//end tripleTryUnshareEmailForFolderViewer


function tripleTryShareEmailForFolderViewer(email, folderID){
  //tries to add email
  try{//start 1st try
    DriveApp.getFolderById(folderID).addViewer(email);
  }//end 1st try
  catch(error){//start 1st catch
    
    //logs error
    console.log(error);
    
    //if the error is an exception but not 'No such user'
    if(error.name.toString() === "Exception"){//start 1st if
      Utilities.sleep(5000);
      
      //tries to add email
      try{//start 2nd try
        DriveApp.getFolderById(folderID).addViewer(email);
      }//end 2nd try
      catch(error){//start 2nd catch
        
        //logs error
        console.log(error);
        
        //if the error is an exception but not 'No such user'
        if(error.name.toString() === "Exception"){//start 2nd if
          Utilities.sleep(5000);
          
          //tries to add email
          try{//start 3rd try
            DriveApp.getFolderById(folderID).addViewer(email);
          }//end 3rd try
          catch(error){//start 3rd catch
            
            //logs error
            console.log(error);
            
            throw error;
            
          }//end 3rd catch
          
        }//end 2nd if
        
        //if the error wasnt the webhook wasnt an exception
        else if(error.name.toString() !== "Exception"){//start 2nd if/else
          throw error;
        }//end 2nd if/else
        
      }//end 2nd catch
      
    }//end 1st if
    
    //if the error wasnt the webhook wasnt an exception
    else if(error.name.toString() !== "Exception"){//start 1st if/else
      throw error;
    }//end 1st if/else
    
  }//end 1st catch
  
  //makes the script wait .5 seconds
  Utilities.sleep(500);
}//end tripleTryShareEmailForFolderViewer


function tripleTryUnshareEmailForFolderEditor(email, folderID){
  //tries to remove old email
  try{//start 1st try
    DriveApp.getFolderById(folderID).removeEditor(email);
  }//end 1st try
  catch(error){//start 1st catch
    
    //logs error
    console.log(error);
    
    //if the error is an exception but not 'No such user'
    if(error.name.toString() === "Exception"  &&  error.message.toString() !== 'No such user'){//start 1st if
      Utilities.sleep(5000);
      
      //tries to remove old email
      try{//start 2nd try
        DriveApp.getFolderById(folderID).removeEditor(email);
      }//end 2nd try
      catch(error){//start 2nd catch
        
        //logs error
        console.log(error);
        
        //if the error is an exception but not 'No such user'
        if(error.name.toString() === "Exception"  &&  error.message.toString() !== 'No such user'){//start 2nd if
          Utilities.sleep(5000);
          
          //tries to remove old email
          try{//start 3rd try
            DriveApp.getFolderById(folderID).removeEditor(email);
          }//end 3rd try
          catch(error){//start 3rd catch
            
            //logs error
            console.log(error);
            
            //if the error is the an exception but isnt 'No such user'
            if(error.message.toString() !== 'No such user'){//start 3rd if
              throw error;
            }//end 3rd if
            
          }//end 3rd catch
          
        }//end 2nd if
        
        //if the error wasnt the webhook wasnt an exception
        else if(error.name.toString() !== "Exception"){//start 2nd if/else
          throw error;
        }//end 2nd if/else
        
      }//end 2nd catch
      
    }//end 1st if
    
    //if the error wasnt the webhook wasnt an exception
    else if(error.name.toString() !== "Exception"){//start 1st if/else
      throw error;
    }//end 1st if/else
    
  }//end 1st catch
  
  //makes the script wait .5 seconds
  Utilities.sleep(500);
}//end tripleTryUnshareEmailForFolderEditor


function tripleTryShareEmailForFolderEditor(email, folderID){
  //tries to add email
  try{//start 1st try
    DriveApp.getFolderById(folderID).addEditor(email);
  }//end 1st try
  catch(error){//start 1st catch
    
    //logs error
    console.log(error);
    
    //if the error is an exception but not 'No such user'
    if(error.name.toString() === "Exception"){//start 1st if
      Utilities.sleep(5000);
      
      //tries to add email
      try{//start 2nd try
        DriveApp.getFolderById(folderID).addEditor(email);
      }//end 2nd try
      catch(error){//start 2nd catch
        
        //logs error
        console.log(error);
        
        //if the error is an exception but not 'No such user'
        if(error.name.toString() === "Exception"){//start 2nd if
          Utilities.sleep(5000);
          
          //tries to add email
          try{//start 3rd try
            DriveApp.getFolderById(folderID).addEditor(email);
          }//end 3rd try
          catch(error){//start 3rd catch
            
            //logs error
            console.log(error);
            
            throw error;
            
          }//end 3rd catch
          
        }//end 2nd if
        
        //if the error wasnt the webhook wasnt an exception
        else if(error.name.toString() !== "Exception"){//start 2nd if/else
          throw error;
        }//end 2nd if/else
        
      }//end 2nd catch
      
    }//end 1st if
    
    //if the error wasnt the webhook wasnt an exception
    else if(error.name.toString() !== "Exception"){//start 1st if/else
      throw error;
    }//end 1st if/else
    
  }//end 1st catch
  
  //makes the script wait .5 seconds
  Utilities.sleep(500);
}//end tripleTryShareEmailForFolderEditor


function permissionArraySort(dllscv, array){
  var array2 = [];
  //[["Group Name", [[Perm], [Perm]]]]
  //cycles thru dllscv names
  for(var i=0; i<57; i+=1){//start 1st for
    //cycles thru array names
    for(var x=0; x<array.length; x+=1){//start 2nd for
      if(dllscv[40][i].toString() === array[x][0].toString()){//start 1st if
        array2.push(array[x]);
        x = array.length + 1;
      }//end 1st if
    }//end 2nd for
  }//end 1st for
  return array2;
}//end permissionArraySort


function permissionGroupChoicesGetter(groupName, dllscv){
  var vals = [];
  
  //cycles thru group names
  for(var i=0; i<57; i+=1){//start 1st for
    //group names match
    if(dllscv[40][i].toString() === groupName){//start 1st if
      //Member Profiles
      if(dllscv[42][i].toString() !== ""){//start 2nd if
        vals.push(["Member Profiles"]);
      }//end 2nd if
      
      //Group Profile
      if(dllscv[43][i].toString() !== ""){//start 2nd if
        vals.push(["Group Profile"]);
      }//end 2nd if
      
      //Reports
      if(dllscv[44][i].toString() !== ""){//start 2nd if
        vals.push(["Reports"]);
      }//end 2nd if
      
      //General Documents
      if(dllscv[45][i].toString() !== ""){//start 2nd if
        vals.push(["General Documents"]);
      }//end 2nd if
      
      //Important Documents
      if(dllscv[46][i].toString() !== ""){//start 2nd if
        vals.push(["Important Documents"]);
      }//end 2nd if
      
    }//end 1st if
  }//end 1st for
  
  return vals;
}//end permissionGroupChoicesGetter


function getDebriefDiscordMessages(entryInfo, discChannels){
  var discMessages = [];
  //[["title", "description", "Footer", "channel"]]
  //s$e$^Title^Description^Author^Author Avatar^Image^Footer^Channel Name
  //e$e$^Old Title^Old Description^New Title^New Description^New Author^New Author Avatar^New Image^New Footer^Channel Name
  //d$e$^Title^Description^Channel Name
  /*
  var message = "s$e$^Event Debrief For Date: **"+edhnv[0][0]+"**^Time of Event (ET): **"+edhnv[0][1]+" - "+edhnv[0][2]+"**\n\nType(s) of Event: **"+
      edhnv[0][3]+"**\n\nWin/Loss: **"+edhnv[0][5]+"**\n\nLeader of Event: **"+edhnv[0][6]+"**\n\nSecondary Leader(s): **"+edhnv[0][7]+
      "**\n\nAttendees: **"+edhnv[0][8]+"**\n\nDebrief: **"+edhnv[0][9]+"**\n\nAdditional Notes: **"+edhnv[0][10]+"**^^^^Phoenix Era Debriefs^"+discChannels[i];
  */
  for(var i=0; i<discChannels.length; i+=1){//start 1st for
    //converts choices to their corresponding discord channels
    if(discChannels[i].toString() === ""){//start 1st if
      //nothing
    }//end 1st if
    //converts choices to their corresponding discord channels
    else if(discChannels[i].toString().indexOf("Main Channel")===-1&&discChannels[i].toString()!=="N/A"){//start 1st if
      discChannels[i] = whileReplace(discChannels[i], " ", "-");
      discChannels[i] = whileReplace(discChannels[i], ".", "");
      discChannels[i] = discChannels[i].toString().toLowerCase() + "-debriefs";
    }//end 1st if
    
    //main channel
    else if(discChannels[i].toString().indexOf("Main Channel")!==-1&&discChannels[i].toString()!=="N/A"){//start 1st if
      discChannels[i] = "all-group-debriefs";
    }//end 1st if/else
    
    discMessages.push(["Event Debrief For Date: **" + entryInfo[0] + "**", 
    "Time of Event (ET): **" + entryInfo[1] + " - " + entryInfo[2]
      + "**\n\nType(s) of Event: **" + entryInfo[3].toString() + "**\n\nWin/Loss: **" + entryInfo[5].toString()
      + "**\n\nLeader of Event: **" + entryInfo[6].toString() + "**\n\nSecondary Leader(s): **" 
      + entryInfo[7].toString() + "**\n\nAttendees: **" + entryInfo[8].toString() + "**\n\nDebrief: **" 
      + entryInfo[9].toString() + "**\n\nAdditional Notes: **" + entryInfo[10].toString() + "**", 
    "Phoenix Era Debriefs",
    discChannels[i].toString()]);
  }//end 1st for
  
  return discMessages;
  
}//end getDebriefDiscordMessages


function fixerFormDiscordRoles(givingRole,takingRole,nickname){
  var give = "a^r,";
  var take = "r^r,";
  
  var roleGive = ","+givingRole;
  var roleTake = ","+takingRole;
  
  //main url
  var discordUrl = '';
  
  //testing url
//  var discordUrl = '';
  
  //if you arnt taking away a role
  if(takingRole.toString()!=="N/A"){//start 1st if
    var message = take+nickname+roleTake;
    var payload = JSON.stringify({content: message});
    var params = {headers: {'Content-Type': 'application/json'},method: "POST",payload: payload,muteHttpExceptions: true};
    tripleTryDiscWebhook(params,discordUrl);
  }//end 1st if
  
  //if you are not giving a role
  if(givingRole.toString()!=="N/A"){//start 1st if
    var message = give+nickname+roleGive;
    var payload = JSON.stringify({content: message});
    var params = {headers: {'Content-Type': 'application/json'},method: "POST",payload: payload,muteHttpExceptions: true};
    tripleTryDiscWebhook(params,discordUrl);
  }//end 1st if
  Utilities.sleep(1500);
}//end fixerFormDiscordRoles


function discordErrorPms(pmdcmscv, perp, info, form, dllscv){
  if(perp !== "???"){//start 1st if
    //finds info for perp
    var discNick = getDiscordNickname(perp, dllscv, pmdcmscv);
    
    //dm$e$^Nickname^Title^Description^Author^Author Avatar^Image^Footer
    var message = "dm$e$^" + discNick + "^You filled out a form wrong^Below is the information you entered:" + info + "^^^^" + form;
    
    //sends command to audit log
    //main server
    var discordUrl = '';
    //testing server
//    var discordUrl = '';
    var payload = JSON.stringify({content: message});
    var params = {headers: {'Content-Type': 'application/json'},method: "POST",payload: payload,muteHttpExceptions: true};
    tripleTryDiscWebhook(params,discordUrl);
  }//end 1st if
  
}//end discordErrorPms


function formCodeCheck(dllscv, form, code){
  for(var i=0; i<6; i+=1){//start 1st for
    if(dllscv[29][i].toString() === code){//start 1st if
      var  curForms = splitEmUp(dllscv[30][i].toString());
      for(var x=0; x<curForms.length; x+=1){//start 2nd for
        if(form === curForms[x].toString()){//start 1st if
          return true;
        }//end 1st if
      }//end 2nd for
    }//end 1st if
  }//end 1st for
  return false;
}//end formCodeCheck


function getEventGroupAndDetails(str){
  var groups = str.slice(str.indexOf("Event Group(s): ")+16, str.indexOf(" ~ Extra Details: "));
  var details = str.slice(str.indexOf(" ~ Extra Details: ")+18);
  return [groups,details];
}//getEventGroupAndDetails


function updateSchedulingFormEvents(dllscv){
  var sf = FormApp.openById(dllscv[85][10].toString());
  var calendar = CalendarApp.getCalendarById(dllscv[85][11].toString());
  var events = calendar.getEvents(dllscv[10][0], dllscv[10][2]);
  var allEventInfo = [];
  for(var i=0; i<events.length; i+=1){//start 1st for
    allEventInfo.push([events[i].getTitle() + " ~ " + dateReplace(events[i].getStartTime())]);
  }//end 1st for
  //checks to see if array is empty, puts N/A if so
  if(allEventInfo.length === 0){//start 1st if
    allEventInfo = [["No Events Scheduled"]];
  }//end 1st if
  sf.getItemById("1325614275").asListItem().setChoiceValues(allEventInfo);
}//end 


function updateDiscordCalendar(dllscv){
  var calendar = CalendarApp.getCalendarById(dllscv[85][11].toString());
  var events = calendar.getEvents(dllscv[10][14], dllscv[10][11]);
  
  //still need the days of the week
  var allDaysAndEvents = [
    //today
    [dateReplace(dllscv[10][0]), getDayOfWeek(dllscv[10][0]), []], 
    //today+1
    [dateReplace(dllscv[10][10]), getDayOfWeek(dllscv[10][10]), []], 
    //today+2
    [dateReplace(dllscv[10][9]), getDayOfWeek(dllscv[10][9]), []], 
    //today+3
    [dateReplace(dllscv[10][8]), getDayOfWeek(dllscv[10][8]), []], 
    //today+4
    [dateReplace(dllscv[10][7]), getDayOfWeek(dllscv[10][7]), []], 
    //today+5
    [dateReplace(dllscv[10][6]), getDayOfWeek(dllscv[10][6]), []], 
    //today+6
    [dateReplace(dllscv[10][4]), getDayOfWeek(dllscv[10][4]), []]
  ];
  //[["date", "day of week",[events]]]
  
  //gets all events for each date if there is any
  for(var i=0; i<events.length; i+=1){//start 1st for
    var curEventDate = dateReplace(events[i].getStartTime());
    for(var x=0; x<allDaysAndEvents.length; x+=1){//start 2nd for
      
      if(curEventDate === allDaysAndEvents[x][0].toString()){//start 1st if
        allDaysAndEvents[x][2].push(
          [events[i].getTitle(), timeRetrieval12Cycle(events[i].getStartTime()),
            timeRetrieval12Cycle(events[i].getEndTime()), events[i].getLocation(), 
            getEventGroupAndDetails(events[i].getDescription())[0]
          ]
        );
      }//end 1st if
    }//end 2nd for
  }//end 1st for
  
  //clears full-schedule
  discordSchedulingFormSend("c^a");
  
  var allDaysAndEventsMessage = "";
  //no events first day
  if(allDaysAndEvents[0][2].length === 0){//start 1st if
    allDaysAndEventsMessage = allDaysAndEventsMessage + "\n • **No Events Scheduled**";
  }//end 1st if
  else{//start 1st if/else
    //cycles thru individual events for first day
    for(var i=0; i<allDaysAndEvents[0][2].length; i+=1){//start 1st for
      allDaysAndEventsMessage = allDaysAndEventsMessage + "\n • __**" + allDaysAndEvents[0][2][i][0]
      + "**__ ~ *" + allDaysAndEvents[0][2][i][1] + " - " + allDaysAndEvents[0][2][i][2] + "* ~ Led by: **"
      + allDaysAndEvents[0][2][i][3] + "** ~ Group(s): **" + allDaysAndEvents[0][2][i][4] + "**";
    }//end 1st for
  }//end 1st if/else
  //s$e$^Title^Description^Author^Author Avatar^Image^Footer^Channel Name
  discordSchedulingFormSend("s$e$^__Today ~ " + allDaysAndEvents[0][1] + ", " + allDaysAndEvents[0][0].slice(0,6) + "__^" + allDaysAndEventsMessage + "^^^^Full Schedule^full-schedule");
  
  //change it into a message to send to disc
  //cycles thru days
  for(var i=1; i<allDaysAndEvents.length; i+=1){//start 1st for
    allDaysAndEventsMessage = "";
    //no events
    if(allDaysAndEvents[i][2].length === 0){//start 1st if
      allDaysAndEventsMessage = allDaysAndEventsMessage + "\n • **No Events Scheduled**";
    }//end 1st if
    else{//start 1st if
      //cycles thru individual events
      for(var x=0; x<allDaysAndEvents[i][2].length; x+=1){//start 2nd for
        allDaysAndEventsMessage = allDaysAndEventsMessage + "\n • __**" + allDaysAndEvents[i][2][x][0]
          + "**__ ~ *" + allDaysAndEvents[i][2][x][1] + " - " + allDaysAndEvents[i][2][x][2] + "* ~ Led by: **"
          + allDaysAndEvents[i][2][x][3] + "** ~ Group(s): **" + allDaysAndEvents[i][2][x][4] + "**";
      }//end 2nd for
    }//end 1st if
    //s$e$^Title^Description^Author^Author Avatar^Image^Footer^Channel Name
    discordSchedulingFormSend("s$e$^__" + allDaysAndEvents[i][1] + ", " + allDaysAndEvents[i][0].slice(0,6) + "__^" + allDaysAndEventsMessage + "^^^^Full Schedule^full-schedule");
  }//end 1st for
  
}//end updateDiscordCalendar


function getDayOfWeek(str){
  //Wed Feb 16 2022 00:00:00 GMT-0500 (EST)
  str = str.toString();
  str = str[0] + str[1] + str[2];
  var allDaysOfWeek = [["Sun","Sunday"], ["Mon","Monday"], ["Tue","Tuesday"], 
    ["Wed", "Wednesday"], ["Thu","Thursday"], ["Fri","Friday"], ["Sat","Saturday"]];
  for(var i=0; i<allDaysOfWeek.length; i+=1){//start 1st for
    if(allDaysOfWeek[i][0].toString() === str){//start 1st if
      return allDaysOfWeek[i][1].toString();
    }//end 1st if
  }//end 1st for
}//end getDayOfWeek


function arrayLVL1Intersection(a1, a2){
var returnArray = [];
  if(a1.length >= a2.length){//start 1st if
    for(var i=0; i<a1.length; i+=1){//start 1st for
      for(var x=0; x<a2.length; x+=1){//start 2nd for
        if(a1[i].toString() === a2[x].toString()){//start 2nd if
          returnArray.push(a1[i]);
          i = a1.length;
          x = a2.length;
        }//end 2nd if
      }//end 2nd for
    }//end 1st for
  }//end 1st if

  else if(a2.length > a1.length){//start 1st if/else
    for(var i=0; i<a2.length; i+=1){//start 1st for
      for(var x=0; x<a1.length; x+=1){//start 2nd for
        if(a2[i].toString() === a1[x].toString()){//start 2nd if
          returnArray.push(a1[x]);
          i = a2.length;
          x = a1.length;
        }//end 2nd if
      }//end 2nd for
    }//end 1st for
  }//end 1st if/else
  
  //filter out duplicates
  for(var i=0; i<returnArray.length-1; i+=1){//start 1st for
    for(var x=returnArray.length-1; x<i; x-=1){//start 2nd for
      if(returnArray[i].toString() === returnArray[x].toString()){//start 1st if
        returnArray.splice(x);
      }//end 1st if
    }//end 2nd for
  }//end 1st for
  
  return returnArray;
}//end arrayLVL1Intersection

function arrayLVL1Union(a1, a2){
  var returnArray = [];
  //combine arrays
  for(var i=0; i<a2.length; i+=1){//start 1st for
    returnArray.push(a2[i].toString());
  }//end 1st for

  //filter out duplicates
  for(var i=0; i<returnArray.length-1; i+=1){//start 1st for
    for(var x=returnArray.length-1; x<i; x-=1){//start 2nd for
      if(returnArray[i].toString() === returnArray[x].toString()){//start 1st if
        returnArray.splice(x);
      }//end 1st if
    }//end 2nd for
  }//end 1st for
  
  return returnArray;
}//end arrayLVL1Union

function arrayLVL1ExclusiveOrLeft(a1, a2){
  //what’s only in left array and not in right array
  var returnArray = [];

  for(var i=0; i<a1.length; i+=1){//start 1st for
    returnArray.push(a1[i]);
    for(var x=0; x<a2.length; x+=1){//start 2nd for
      if(a2[x].toString() === a1[i].toString()){//start 1st if
        returnArray.pop();
        x = a2.length;
      }//end 1st if
    }//end 2nd for
  }//end 1st for

  //filter out duplicates
  for(var i=0; i<returnArray.length-1; i+=1){//start 1st for
    for(var x=returnArray.length-1; x<i; x-=1){//start 2nd for
      if(returnArray[i].toString() === returnArray[x].toString()){//start 1st if
        returnArray.splice(x);
      }//end 1st if
    }//end 2nd for
  }//end 1st for
  
  return returnArray;
}//end arrayLVL1ExclusiveOrLeft

function arrayLVL1MultiReplace(a1, a2){
  //a2 ==== [["string to find", "replace with"]]
  //checks to see if it equals a2[i][0] and if so replaces with a2[i][1]
  for(var i=0; i<a2.length; i+=1){//start 1st for
    for(var x=0; x<a1.length; x+=1){//start 2nd for
      if(a2[i][0].toString() === "N/A"){//start 1st if
        a1.push([a2[i][1]]);
        x = a1.length;
      }//end 1st if
      else if(a1[x].toString() === a2[i][0].toString()){//start 1st if/else
        a1[x] = [a2[i][1]];
        x = a1.length;
      }//end 1st if/else
    }//end 2nd for
  }//end 1st for
  
  //filter out duplicates and N/A's
  if(a1[0].toString() === "N/A"){//start 1st if
    a1.splice(0,1);
  }//end 1st if
  for(var i=0; i<a1.length-1; i+=1){//start 1st for
    for(var x=a1.length-1; x>i; x-=1){//start 2nd for
      if(a1[i].toString() === a1[x].toString()  ||  a1[x].toString() === "N/A"){//start 1st if
        a1.splice(x, 1);
      }//end 1st if
    }//end 2nd for
  }//end 1st for
  
  
  return a1;
}//end arrayLVL1MultiReplace


function discErrorReport(error,functionName,projectName){
  var message = "Function: **"+functionName+"**\n • Error Type: **"+error.name+"**\n • Error: **"+error.message+"**\n • Project Name: **"+projectName+"**\n • File Name: **"+error.fileName+"**\n • Line Number: **"+error.lineNumber+"**";
  //main server
  var discordUrl = '';
  //testing server
//  var discordUrl = '';
  var payload = JSON.stringify({content: message});var params = {headers: {'Content-Type': 'application/json'},method: "POST",payload: payload,muteHttpExceptions: true}
  tripleTryDiscWebhook(params,discordUrl);
}//end discErrorReport


function specificCellArrayBuilder(cv, val){
  var array = [];
  for(var i=0; i<cv.length; i+=1){//start 1st for
    if(cv[i].toString() === val.toString()){//start 1st if
      array.push([i.toString()]);
    }//end 1st if
  }//end 1st for
  console.log(array);
}//end specificCellArrayBuilder


function whileReplace(val, replaceVal, newVal){
  var val2 = val.toString();
  while(val2.toString().indexOf(replaceVal) !== -1){//start 1st while
    val2 = val2.toString().replace(replaceVal, newVal);
  }//end 1st while
  return val2;
}//end whileReplace


function tripleTrySheetTextReplacer(ss, oldVal, newVal){
  
  //tries to replace given old val with new val
  try{//start 1st try
    SpreadsheetApp.openById(ss).createTextFinder(oldVal).matchCase(true).matchEntireCell(false).replaceAllWith(newVal);
  }//end 1st try
  catch(error){//start 1st catch
            
    //logs error
    console.log(error);
    
    //if the error is the spreadsheet timed out
    if(error.name.toString()==="Exception"){//start 1st if
      Utilities.sleep(2500);
      
      //tries to replace given old val with new val
      try{//start 2nd try
        SpreadsheetApp.openById(ss).createTextFinder(oldVal).matchCase(true).matchEntireCell(false).replaceAllWith(newVal);
      }//end 2nd try
      catch(error){//start 2nd catch
            
        //logs error
        console.log(error);
        
        //if the error is the spreadsheet timed out
        if(error.name.toString()==="Exception"){//start 2nd if
          Utilities.sleep(5000);
          
          //tries to replace given old val with new val
          try{//start 3rd try
            SpreadsheetApp.openById(ss).createTextFinder(oldVal).matchCase(true).matchEntireCell(false).replaceAllWith(newVal);
          }//end 3rd try
          catch(error){//start 3rd catch
            
            //logs error
            console.log(error);
            
            throw error;
            
          }//end 3rd catch
          
        }//end 2nd if
        
        //if the error wasnt the spreadsheet timed out
        else if(error.name.toString()!=="Exception"){//start 2nd if/else
          throw error;
        }//end 2nd if/else
        
      }//end 2nd catch
      
    }//end 1st if
    
    //if the error wasnt the spreadsheet timed out
    else if(error.name.toString()!=="Exception"){//start 1st if/else
      throw error;
    }//end 1st if/else
    
  }//end 1st catch
  
}//end tripleTryGetValues


function updateAllFormLists1(dllscv, pmdcmscv){
  //Debrief Form
  DebriefFormListUpdate.formListUpdate(dllscv, pmdcmscv);
  
  //Forge Form
  ForgeFormListUpdate.formListUpdate(dllscv, pmdcmscv);
  
  //New Member Form
  NewMemberFormListUpdate.formListUpdate(dllscv, pmdcmscv);
  
  //Member Update Form
  MemberUpdateFormListUpdate.formListUpdate(dllscv, pmdcmscv);
  
  //Expansion Form
  ExpansionFormListUpdate.formListUpdate(dllscv, pmdcmscv);
}//end updateAllFormLists1


function updateAllFormLists2(dllscv, pmdcmscv){
  //Embedded Message Form
  EmbeddedMessageFormListUpdate.formListUpdate(dllscv, pmdcmscv);
  
  //Scheduling Form
  SchedulingFormListUpdate.formListUpdate(dllscv, pmdcmscv);
  
  //Fixer Form
  FixerFormListUpdate.formListUpdate(dllscv, pmdcmscv);
  
  //Group Report Form
  GroupReportFormListUpdate.formListUpdate(dllscv, pmdcmscv);
  
  //Update Control Form
  UpdateControlFormListUpdate.formListUpdate(dllscv, pmdcmscv);
  
  //Permission Form
  PermissionFormListUpdate.formListUpdate(dllscv, pmdcmscv);
}//end updateAllFormLists2


function getPossibleDates(){
  var dates = [['Jan 01'], ['Jan 02'], ['Jan 03'], ['Jan 04'], ['Jan 05'], ['Jan 06'], 
               ['Jan 07'], ['Jan 08'], ['Jan 09'], ['Jan 10'], ['Jan 11'], ['Jan 12'], 
               ['Jan 13'], ['Jan 14'], ['Jan 15'], ['Jan 16'], ['Jan 17'], ['Jan 18'], 
               ['Jan 19'], ['Jan 20'], ['Jan 21'], ['Jan 22'], ['Jan 23'], ['Jan 24'], 
               ['Jan 25'], ['Jan 26'], ['Jan 27'], ['Jan 28'], ['Jan 29'], ['Jan 30'], 
               ['Jan 31'], ['Feb 01'], ['Feb 02'], ['Feb 03'], ['Feb 04'], ['Feb 05'], 
               ['Feb 06'], ['Feb 07'], ['Feb 08'], ['Feb 09'], ['Feb 10'], ['Feb 11'], 
               ['Feb 12'], ['Feb 13'], ['Feb 14'], ['Feb 15'], ['Feb 16'], ['Feb 17'], 
               ['Feb 18'], ['Feb 19'], ['Feb 20'], ['Feb 21'], ['Feb 22'], ['Feb 23'], 
               ['Feb 24'], ['Feb 25'], ['Feb 26'], ['Feb 27'], ['Feb 28'], ['Feb 29'], 
               ['Mar 01'], ['Mar 02'], ['Mar 03'], ['Mar 04'], ['Mar 05'], ['Mar 06'], 
               ['Mar 07'], ['Mar 08'], ['Mar 09'], ['Mar 10'], ['Mar 11'], ['Mar 12'], 
               ['Mar 13'], ['Mar 14'], ['Mar 15'], ['Mar 16'], ['Mar 17'], ['Mar 18'], 
               ['Mar 19'], ['Mar 20'], ['Mar 21'], ['Mar 22'], ['Mar 23'], ['Mar 24'], 
               ['Mar 25'], ['Mar 26'], ['Mar 27'], ['Mar 28'], ['Mar 29'], ['Mar 30'], 
               ['Mar 31'], ['Apr 01'], ['Apr 02'], ['Apr 03'], ['Apr 04'], ['Apr 05'], 
               ['Apr 06'], ['Apr 07'], ['Apr 08'], ['Apr 09'], ['Apr 10'], ['Apr 11'], 
               ['Apr 12'], ['Apr 13'], ['Apr 14'], ['Apr 15'], ['Apr 16'], ['Apr 17'], 
               ['Apr 18'], ['Apr 19'], ['Apr 20'], ['Apr 21'], ['Apr 22'], ['Apr 23'], 
               ['Apr 24'], ['Apr 25'], ['Apr 26'], ['Apr 27'], ['Apr 28'], ['Apr 29'], 
               ['Apr 30'], ['May 01'], ['May 02'], ['May 03'], ['May 04'], ['May 05'], 
               ['May 06'], ['May 07'], ['May 08'], ['May 09'], ['May 10'], ['May 11'], 
               ['May 12'], ['May 13'], ['May 14'], ['May 15'], ['May 16'], ['May 17'], 
               ['May 18'], ['May 19'], ['May 20'], ['May 21'], ['May 22'], ['May 23'],
               ['May 24'], ['May 25'], ['May 26'], ['May 27'], ['May 28'], ['May 29'], 
               ['May 30'], ['May 31'], ['Jun 01'], ['Jun 02'], ['Jun 03'], ['Jun 04'], 
               ['Jun 05'], ['Jun 06'], ['Jun 07'], ['Jun 08'], ['Jun 09'], ['Jun 10'], 
               ['Jun 11'], ['Jun 12'], ['Jun 13'], ['Jun 14'], ['Jun 15'], ['Jun 16'], 
               ['Jun 17'], ['Jun 18'], ['Jun 19'], ['Jun 20'], ['Jun 21'], ['Jun 22'], 
               ['Jun 23'], ['Jun 24'], ['Jun 25'], ['Jun 26'], ['Jun 27'], ['Jun 28'], 
               ['Jun 29'], ['Jun 30'], ['Jul 01'], ['Jul 02'], ['Jul 03'],
               ['Jul 04'], ['Jul 05'], ['Jul 06'], ['Jul 07'], ['Jul 08'], ['Jul 09'], 
               ['Jul 10'], ['Jul 11'], ['Jul 12'], ['Jul 13'], ['Jul 14'], ['Jul 15'], 
               ['Jul 16'], ['Jul 17'], ['Jul 18'], ['Jul 19'], ['Jul 20'], ['Jul 21'], 
               ['Jul 22'], ['Jul 23'], ['Jul 24'], ['Jul 25'], ['Jul 26'], ['Jul 27'], 
               ['Jul 28'], ['Jul 29'], ['Jul 30'], ['Jul 31'], ['Aug 01'], ['Aug 02'], 
               ['Aug 03'], ['Aug 04'], ['Aug 05'], ['Aug 06'], ['Aug 07'], ['Aug 08'], 
               ['Aug 09'], ['Aug 10'], ['Aug 11'], ['Aug 12'], ['Aug 13'], ['Aug 14'], 
               ['Aug 15'], ['Aug 16'], ['Aug 17'], ['Aug 18'], ['Aug 19'], ['Aug 20'], 
               ['Aug 21'], ['Aug 22'], ['Aug 23'], ['Aug 24'], ['Aug 25'], ['Aug 26'], 
               ['Aug 27'], ['Aug 28'], ['Aug 29'], ['Aug 30'], ['Aug 31'], ['Sep 01'], 
               ['Sep 02'], ['Sep 03'], ['Sep 04'], ['Sep 05'], ['Sep 06'], ['Sep 07'], 
               ['Sep 08'], ['Sep 09'], ['Sep 10'], ['Sep 11'], ['Sep 12'], ['Sep 13'], 
               ['Sep 14'], ['Sep 15'], ['Sep 16'], ['Sep 17'], ['Sep 18'], ['Sep 19'], 
               ['Sep 20'], ['Sep 21'], ['Sep 22'], ['Sep 23'], ['Sep 24'], ['Sep 25'], 
               ['Sep 26'], ['Sep 27'], ['Sep 28'], ['Sep 29'], ['Sep 30'],  
               ['Oct 01'], ['Oct 02'], ['Oct 03'], ['Oct 04'], ['Oct 05'], ['Oct 06'], 
               ['Oct 07'], ['Oct 08'], ['Oct 09'], ['Oct 10'], ['Oct 11'], ['Oct 12'], 
               ['Oct 13'], ['Oct 14'], ['Oct 15'], ['Oct 16'], ['Oct 17'], ['Oct 18'], 
               ['Oct 19'], ['Oct 20'], ['Oct 21'], ['Oct 22'], ['Oct 23'], ['Oct 24'], 
               ['Oct 25'], ['Oct 26'], ['Oct 27'], ['Oct 28'], ['Oct 29'], ['Oct 30'], 
               ['Oct 31'], ['Nov 01'], ['Nov 02'], ['Nov 03'], ['Nov 04'], ['Nov 05'], 
               ['Nov 06'], ['Nov 07'], ['Nov 08'], ['Nov 09'], ['Nov 10'], ['Nov 11'], 
               ['Nov 12'], ['Nov 13'], ['Nov 14'], ['Nov 15'], ['Nov 16'], ['Nov 17'], 
               ['Nov 18'], ['Nov 19'], ['Nov 20'], ['Nov 21'], ['Nov 22'], ['Nov 23'], 
               ['Nov 24'], ['Nov 25'], ['Nov 26'], ['Nov 27'], ['Nov 28'], ['Nov 29'], 
               ['Nov 30'], ['Dec 01'], ['Dec 02'], ['Dec 03'], ['Dec 04'], 
               ['Dec 05'], ['Dec 06'], ['Dec 07'], ['Dec 08'], ['Dec 09'], ['Dec 10'], 
               ['Dec 11'], ['Dec 12'], ['Dec 13'], ['Dec 14'], ['Dec 15'], ['Dec 16'], 
               ['Dec 17'], ['Dec 18'], ['Dec 19'], ['Dec 20'], ['Dec 21'], ['Dec 22'], 
               ['Dec 23'], ['Dec 24'], ['Dec 25'], ['Dec 26'], ['Dec 27'], ['Dec 28'], 
               ['Dec 29'], ['Dec 30'], ['Dec 31']];
  return dates;
}//end getPossibleDates


function credTypeFilter(dllscv, creds){
  var authorities = [];
  var signifiers = [];
  var chessPieces = [];
  var titles = [];
  for(var i=0; i<creds.length; i+=1){//start 1st for
    for(var x=1; x<101; x+=1){//start 2nd for
      //authorities
      if(dllscv[16][x].toString() !== ""  &&  creds[i].toString() === dllscv[16][x].toString()){//start 1st if
        authorities.push([dllscv[16][x].toString()]);
        x = 101;
      }//end 1st if
      
      //signifiers
      if(dllscv[18][x].toString() !== ""  &&  creds[i].toString() === dllscv[18][x].toString()){//start 1st if
        signifiers.push([dllscv[18][x].toString()]);
        x = 101;
      }//end 1st if
      
      //chessPieces
      if(dllscv[20][x].toString() !== ""  &&  creds[i].toString() === dllscv[20][x].toString()){//start 1st if
        chessPieces.push([dllscv[20][x].toString()]);
        x = 101;
      }//end 1st if
      
      //titles
      if(dllscv[22][x].toString() !== ""  &&  creds[i].toString() === dllscv[22][x].toString()){//start 1st if
        titles.push([dllscv[22][x].toString()]);
        x = 101;
      }//end 1st if
    }//end 2nd for
  }//end 1st for
  
  //adds N/A if arrays are empty
  if(authorities.length === 0){//start 1st if
    authorities = [["N/A"]];
  }//end 1st if
  if(signifiers.length === 0){//start 1st if
    signifiers = [["N/A"]];
  }//end 1st if
  if(chessPieces.length === 0){//start 1st if
    chessPieces = [["N/A"]];
  }//end 1st if
  if(titles.length === 0){//start 1st if
    titles = [["N/A"]];
  }//end 1st if
  
  var returnVal = [authorities, signifiers, chessPieces, titles];
  
  return returnVal;
}//end credTypeFilter


function arrayLVL1Intersection(a1, a2){
  var returnArray = [];
  if(a1.length >= a2.length){//start 1st if
    for(var i=0; i<a1.length; i+=1){//start 1st for
      for(var x=0; x<a2.length; x+=1){//start 2nd for
        if(a1[i].toString() === a2[x].toString()){//start 2nd if
          returnArray.push(a1[i]);
          i = a1.length;
          x = a2 .length;
        }//end 2nd if
      }//end 2nd for
    }//end 1st for
  }//end 1st if

  else if(a2.length > a1.length){//start 1st if/else
    for(var i=0; i<a2.length; i+=1){//start 1st for
      for(var x=0; x<a1.length; x+=1){//start 2nd for
        if(a2[i].toString() === a1[x].toString()){//start 2nd if
          returnArray.push(a1[i]);
          i = a2.length;
          x = a1.length;
        }//end 2nd if
      }//end 2nd for
    }//end 1st for
  }//end 1st if/else
  return returnArray;
}//end arrayLVL1Intersection


function arrayLVL1Union(a1, a2){
  var returnArray = [];
  //combine arrays, then filter out duplicates
  for(var i=0; i<a2.length; i+=1){//start 1st for
    returnArray.push(a2[i].toString());
  }//end 1st for
  for(var i=returnArray.length-1; i<0; i-=1){//start 1st for
    for(var x=i; x<=0; x-=1){//start 2nd for
      if(returnArray[i].toString() === returnArray[x].toString()){//start 1st if
        returnArray.slice(i);
        x = -1;
      }//end 1st if
    }//end 2nd for
  }//end 1st for
  return returnArray;
}//end arrayLVL1Union

function arrayLVL1ExclusiveOrLeft(a1, a2){
  //returns 2 vars
  //what’s only in left array and not in right array
  var r1 = [];
  for(var i=0; i<a1.length; i+=1){//start 1st for
    r1.push(a1[i]);
    for(var x=0; x<a2.length; x+=1){//start 2nd for
      if(a2[x].toString() === a1[i].toString()){//start 1st if
        r1.pop();
      }//end 1st if
    }//end 2nd for
  }//end 1st for
  return r1;
}//end arrayLVL1ExclusiveOrLeft

    
function arrayLVL1ExclusiveOrRight(a1, a2){
  //what’s only in right array and not left array
  var r2 = [];
  for(var i=0; i<a2.length; i+=1){//start 1st for
    r2.push(a2[i]);
    for(var x=0; x<a1.length; x+=1){//start 2nd for
      if(a1[x].toString() === a2[i].toString()){//start 1st if
        r2.pop();
      }//end 1st if
    }//end 2nd for
  }//end 1st for
  return r2;
}//end arrayLVL1ExclusiveOrRight


function wordReplaceInSheet(sscv, ss, oldVal, newVal, cols, rows, startRow){
  for(var i=0; i<rows.length; i+=1){//start 1st for
    for(var x=0; x<cols.length; x+=1){//start 2nd for
      while(sscv[rows[i]][cols[x]].toString().indexOf(oldVal) !== -1){//start 1st while
        sscv[rows[i]][cols[x]] = sscv[rows[i]][cols[x]].toString().replace(oldVal, newVal);
      }//end 1st while
    }//end 2nd for
  }//end 1st for
  tripleTrySetSSValues(ss,startRow,1,sscv.length,sscv[0].length,sscv);
  SpreadsheetApp.flush();
}//end wordReplaceInSheet


function createNumberArray(start,end){
  var arr = [];
  for(var i=start; i<end; i+=1){//start 1st for
    arr.push(i);
  }//end 1st for
  return arr;
}//end createNumberArray


function addBlankElementsToArrayLVL1(array,numToAdd){
  for(var i=0; i<numToAdd; i+=1){//start 1st for
    array.push("");
  }//end 1st for
}//end addBlankElementsToArrayLVL1


function getCodeEmbeddedClearanceMessage(dllscv, code){
  //s$e$^Title^Description^Author^Author Avatar^Image^Footer^Channel Name
  var message = "s$e$^Code " + code + " Clearance^This **code** has access to the following forms:";
  var curForms = splitEmUp(dllscv[30][parseInt(code)-1]);
  for(var i=0; i<curForms.length; i+=1){//start 1st for
    for(var x=0; x<11; x+=1){//start 2nd for
      if(curForms[i].toString() === dllscv[89][x].toString()){//start 1st if
        message = message + "\n • [" + dllscv[84][x].toString() + "](" + dllscv[87][x].toString() + ")";
      }//end 1st if
    }//end 2nd for
  }//end 1st for
  message = message + "^^^^Code Clearance^code-" + code;
  return message;
}//end getCodeEmbeddedClearanceMessage


function getAllPossiblePCs(dllscv, pmdcmscv){
  var allPCs = [];
  var usedPCs = [];
  
  for(var i=0; i<1000; i+=1){//start 1st for
    allPCs.push([positionCodeDiscordTransformer(i)]);
  }//end 1st for
  
  for(var i=0; i<pmdcmscv.length; i+=1){//start 1st for
    if(pmdcmscv[i][7].toString() !== "N/A"){//start 1st if
      usedPCs.push([positionCodeDiscordTransformer(pmdcmscv[i][7].toString())]);
    }//end 1st if
  }//end 1st for
  
  return arrayLVL1ExclusiveOrLeft(allPCs, usedPCs);
}// end getAllPossiblePCs


function splitNumberInto2(num){
  var larger = Math.ceil(num / 2);
  var smaller = num - larger;
  return [larger, smaller];
}//end splitNumberInto2


function dateReplaceMonthDay(date){
  if(date.toString().length>8){//start 1st if
    var newDate="";
    //May 27 2022
    for(var i=0; i<6; i+=1){//start 1st for
      newDate = newDate + date.toString()[i];
    }//end 1st for
    return newDate
  }//end 1st if
  else{//start 1st if/else
    return date
  }//end 1st if
}//end dateReplaceMonthDay


function existsInArray(array, element){
  //doesnt work if array has arrays in it (only single layer array is supported)
  if(array.indexOf(element) !== -1){//end 1st if
    return true;
  }//start 1st if
  return false;
}//end existsInArray


function arrayReverse(array){
  var x = array.length-1;
  for(var i=0; i<array.length/2; i+=1){//start 1st for
    var temp = array[i];
    array[i] = array[x];
    array[x] = temp;
    x--;
  }//end 1st for
}//end arrayReverse


function addToCountingArray(array, element){
  //[element, count];
  if(array.length === 0){//end 1st if
    array.push([element, 1]);
  }//start 1st if
  else{
    var check = true;
    for(var i=0; i<array.length; i+=1){//start 1st for
      if(array[i][0].toString() === element){//end 1st if
        array[i][1]++;
        check = false;
        i = array.length+1;
      }//start 1st if
    }//end 1st for
    if(check){//end 1st if
      array.push([element, 1]);
    }//start 1st if
  }
}//end addToCountingArray


function totalCountForCountingArray(array){
  if(array.length === 0){//end 1st if
    return 0;
  }//start 1st if
  var num = 0;
  for(var i=0; i<array.length; i+=1){//start 1st for
    num = num + array[i][1];
  }//end 1st for
  return num;
}//end totalCountForCountingArray


function top3CountForCountingArrayString(array){
  arraySortDescForGivenIndex(array, 1);
  if(array.length === 0){//end 1st if
    string = "N/A ~ N/A\nN/A ~ N/A\nN/A ~ N/A";
  }//start 1st if
  else if(array.length === 1){//end 1st if
    string = array[0][0] + " ~ " + array[0][1] + "\nN/A ~ N/A\nN/A ~ N/A";
  }//start 1st if
  else if(array.length === 2){//end 1st if
    string = array[0][0] + " ~ " + array[0][1] + "\n" + array[1][0] + " ~ " + array[1][1] + "\nN/A ~ N/A";
  }//start 1st if
  else if(array.length >= 3){//end 1st if
    string = array[0][0] + " ~ " + array[0][1] + "\n" + array[1][0] + " ~ " + array[1][1]+ "\n" + array[2][0] + " ~ " + array[2][1];
  }//start 1st if
  return string;
}//end top3CountForCountingArray


function top4CountForCountingArrayString(array){
  arraySortDescForGivenIndex(array, 1);
  if(array.length === 0){//end 1st if
    string = "N/A ~ N/A\nN/A ~ N/A\nN/A ~ N/A\nN/A ~ N/A";
  }//start 1st if
  else if(array.length === 1){//end 1st if
    string = array[0][0] + " ~ " + array[0][1] + "\nN/A ~ N/A\nN/A ~ N/A\nN/A ~ N/A";
  }//start 1st if
  else if(array.length === 2){//end 1st if
    string = array[0][0] + " ~ " + array[0][1] + "\n" + array[1][0] + " ~ " + array[1][1] + "\nN/A ~ N/A\nN/A ~ N/A";
  }//start 1st if
  else if(array.length === 3){//end 1st if
    string = array[0][0] + " ~ " + array[0][1] + "\n" + array[1][0] + " ~ " + array[1][1]+ "\n" + array[2][0] + " ~ " + array[2][1] + "\nN/A ~ N/A";
  }//start 1st if
  else if(array.length >= 4){//end 1st if
    string = array[0][0] + " ~ " + array[0][1] + "\n" + array[1][0] + " ~ " + array[1][1]+ "\n" + array[2][0] + " ~ " + array[2][1]+ "\n" + array[3][0] + " ~ " + array[3][1];
  }//start 1st if
  return string;
}//end top4CountForCountingArray


function top10CountForCountingArrayString(array){
  arraySortDescForGivenIndex(array, 1);
  if(array.length === 0){//end 1st if
    string = "N/A ~ N/A\nN/A ~ N/A\nN/A ~ N/A\nN/A ~ N/A\nN/A ~ N/A\nN/A ~ N/A\nN/A ~ N/A\nN/A ~ N/A\nN/A ~ N/A\nN/A ~ N/A";
  }//start 1st if
  else if(array.length === 1){//end 1st if
    string = array[0][0] + " ~ " + array[0][1] + "\nN/A ~ N/A\nN/A ~ N/A\nN/A ~ N/A\nN/A ~ N/A\nN/A ~ N/A\nN/A ~ N/A\nN/A ~ N/A\nN/A ~ N/A\nN/A ~ N/A";
  }//start 1st if
  else if(array.length === 2){//end 1st if
    string = array[0][0] + " ~ " + array[0][1] + "\n" + array[1][0] + " ~ " + array[1][1] + "\nN/A ~ N/A\nN/A ~ N/A\nN/A ~ N/A\nN/A ~ N/A\nN/A ~ N/A\nN/A ~ N/A\nN/A ~ N/A\nN/A ~ N/A";
  }//start 1st if
  else if(array.length === 3){//end 1st if
    string = array[0][0] + " ~ " + array[0][1] + "\n" + array[1][0] + " ~ " + array[1][1]+ "\n" + array[2][0] + " ~ " + array[2][1] + "\nN/A ~ N/A\nN/A ~ N/A\nN/A ~ N/A\nN/A ~ N/A\nN/A ~ N/A\nN/A ~ N/A\nN/A ~ N/A";
  }//start 1st if
  else if(array.length === 4){//end 1st if
    string = array[0][0] + " ~ " + array[0][1] + "\n" + array[1][0] + " ~ " + array[1][1]+ "\n" + array[2][0] + " ~ " + array[2][1] + "\n" + array[3][0] + " ~ " + array[3][1]+ "\nN/A ~ N/A\nN/A ~ N/A\nN/A ~ N/A\nN/A ~ N/A\nN/A ~ N/A\nN/A ~ N/A";
  }//start 1st if
  else if(array.length === 5){//end 1st if
    string = array[0][0] + " ~ " + array[0][1] + "\n" + array[1][0] + " ~ " + array[1][1]+ "\n" + array[2][0] + " ~ " + array[2][1] + "\n" + array[3][0] + " ~ " + array[3][1]+ "\n" + array[4][0] + " ~ " + array[4][1]+ "\nN/A ~ N/A\nN/A ~ N/A\nN/A ~ N/A\nN/A ~ N/A\nN/A ~ N/A";
  }//start 1st if
  else if(array.length === 6){//end 1st if
    string = array[0][0] + " ~ " + array[0][1] + "\n" + array[1][0] + " ~ " + array[1][1]+ "\n" + array[2][0] + " ~ " + array[2][1] + "\n" + array[3][0] + " ~ " + array[3][1]+ "\n" + array[4][0] + " ~ " + array[4][1]+ "\n" + array[5][0] + " ~ " + array[5][1]+ "\nN/A ~ N/A\nN/A ~ N/A\nN/A ~ N/A\nN/A ~ N/A";
  }//start 1st if
  else if(array.length === 7){//end 1st if
    string = array[0][0] + " ~ " + array[0][1] + "\n" + array[1][0] + " ~ " + array[1][1]+ "\n" + array[2][0] + " ~ " + array[2][1] + "\n" + array[3][0] + " ~ " + array[3][1]+ "\n" + array[4][0] + " ~ " + array[4][1]+ "\n" + array[5][0] + " ~ " + array[5][1]+ "\n" + array[6][0] + " ~ " + array[6][1]+ "\nN/A ~ N/A\nN/A ~ N/A\nN/A ~ N/A";
  }//start 1st if
  else if(array.length === 8){//end 1st if
    string = array[0][0] + " ~ " + array[0][1] + "\n" + array[1][0] + " ~ " + array[1][1]+ "\n" + array[2][0] + " ~ " + array[2][1] + "\n" + array[3][0] + " ~ " + array[3][1]+ "\n" + array[4][0] + " ~ " + array[4][1]+ "\n" + array[5][0] + " ~ " + array[5][1]+ "\n" + array[6][0] + " ~ " + array[6][1]+ "\n" + array[7][0] + " ~ " + array[7][1]+ "\nN/A ~ N/A\nN/A ~ N/A";
  }//start 1st if
  else if(array.length === 9){//end 1st if
    string = array[0][0] + " ~ " + array[0][1] + "\n" + array[1][0] + " ~ " + array[1][1]+ "\n" + array[2][0] + " ~ " + array[2][1] + "\n" + array[3][0] + " ~ " + array[3][1]+ "\n" + array[4][0] + " ~ " + array[4][1]+ "\n" + array[5][0] + " ~ " + array[5][1]+ "\n" + array[6][0] + " ~ " + array[6][1]+ "\n" + array[7][0] + " ~ " + array[7][1]+ "\n" + array[8][0] + " ~ " + array[8][1]+ "\nN/A ~ N/A";
  }//start 1st if
  else if(array.length >= 10){//end 1st if
    string = array[0][0] + " ~ " + array[0][1] + "\n" + array[1][0] + " ~ " + array[1][1]+ "\n" + array[2][0] + " ~ " + array[2][1] + "\n" + array[3][0] + " ~ " + array[3][1]+ "\n" + array[4][0] + " ~ " + array[4][1]+ "\n" + array[5][0] + " ~ " + array[5][1]+ "\n" + array[6][0] + " ~ " + array[6][1]+ "\n" + array[7][0] + " ~ " + array[7][1]+ "\n" + array[8][0] + " ~ " + array[8][1]+ "\n" + array[9][0] + " ~ " + array[9][1];
  }//start 1st if
  return string;
}//end top10CountForCountingArray


function normalFilloutMetricsGroupReportPortion(allCurMembers, hubcv, personnelCol, dateCol, ffethescv, curDateNum, todayMinus29, todayMinus6, formType, text){
  // Top 3 for how many failed forms 30
  // Top 3 for how many successful forms 30
  // Total Number of successful submissions 730t
  // Total Number of failed submissions 730t
  // Top 3 reasons why form failed to submit 730t

  //failed forms
  var failed30P = [];
  var failed7P = [];
  var allFailedP = [];
  var failed30R = [];
  var failed7R = [];
  var allFailedR = [];
  for(var x=0; x<formType.length; x+=1){//start 1st for
    for(var i=0; i<ffethescv.length; i+=1){//start 2nd for
      //one of the members of the current group
      if(existsInArray(allCurMembers, ffethescv[i][3])){//end 1st if
        //form type
        if(ffethescv[i][0].toString() === formType[x]){//end 2nd if
          var curVal1 = "";
          if(ffethescv[i][4].indexOf("in an entry for __") !== -1){//end 3rd if
            curVal1 = ffethescv[i][4].toString().slice(0, ffethescv[i][4].indexOf("in an entry for __")-1)
          }//start 3rd if
          else{curVal1 = ffethescv[i][4].toString()}
          //adds to all failed
          addToCountingArray(allFailedR, curVal1);
          addToCountingArray(allFailedP, ffethescv[i][3]);
          //within 30 days
          if(todayMinus29 <= ffethescv[i][2]  &&  curDateNum >= ffethescv[i][2]){//end 3rd if
            //adds to 30 failed
            addToCountingArray(failed30R, curVal1);
            addToCountingArray(failed30P, ffethescv[i][3]);
            //within 7 days and includes member
            if(todayMinus6 <= ffethescv[i][2]  &&  curDateNum >= ffethescv[i][2]){//end 4th if
              //adds to 7 failed
              addToCountingArray(failed7R, curVal1);
              addToCountingArray(failed7P, ffethescv[i][3]);
            }//start 4th if
          }//start 3rd if
        }//start 2nd if
      }//start 1st if
    }//end 2nd for
  }//end 1st for


  //successful forms
  var succ30P = [];
  var succ7P = [];
  var allsuccP = [];
  for(var i=0; i<hubcv.length; i+=1){//start 1st for
    //one of the members of the current group
    if(existsInArray(allCurMembers, hubcv[i][personnelCol])){//end 1st if
      //adds to all succ
      addToCountingArray(allsuccP, hubcv[i][personnelCol]);
      //within 30 days
      if(todayMinus29 <= hubcv[i][dateCol]  &&  curDateNum >= hubcv[i][dateCol]){//end 2nd if
        //adds to all succ
        addToCountingArray(succ30P, hubcv[i][personnelCol]);
        //within 7 days and includes member
        if(todayMinus6 <= hubcv[i][dateCol]  &&  curDateNum >= hubcv[i][dateCol]){//end 3rd if
          //adds to all succ
          addToCountingArray(succ7P, hubcv[i][personnelCol]);
        }//start 3rd if
      }//start 2nd if
    }//start 1st if
  }//end 1st for

  text = text + "\n\n\n\nForm Fillout Failures\n\n\nTotal numbers of fillout errors\n\nSince Aug 30 2022: " + totalCountForCountingArray(allFailedP) + "\n\nLast 30 days: " + totalCountForCountingArray(failed30P) + "\n\nLast 7 days: " + totalCountForCountingArray(failed7P) + "\n\n\nTop 3 members of fillout errors\n\nSince Aug 30 2022:\n" + top3CountForCountingArrayString(allFailedP) + "\n\nLast 30 days:\n" + top3CountForCountingArrayString(failed30P) + "\n\nLast 7 days:\n" + top3CountForCountingArrayString(failed7P) + "\n\n\nTop 3 reasons of fillout errors\n\nSince Aug 30 2022:\n" + top3CountForCountingArrayString(allFailedR) + "\n\nLast 30 days:\n" + top3CountForCountingArrayString(failed30R) + "\n\nLast 7 days:\n" + top3CountForCountingArrayString(failed7R) + "\n\n\n\nSuccessful Form Fillouts\n\n\nTotal numbers of successful fillouts\n\nAll Time: " + totalCountForCountingArray(allsuccP) + "\n\nLast 30 days: " + totalCountForCountingArray(succ30P) + "\n\nLast 7 days: " + totalCountForCountingArray(succ7P) + "\n\n\nTop 3 submission personnel of successful fillouts\n\nAll Time:\n" + top3CountForCountingArrayString(allsuccP) + "\n\nLast 30 days:\n" + top3CountForCountingArrayString(succ30P) + "\n\nLast 7 days:\n" + top3CountForCountingArrayString(succ7P);
  

  return text;
}// end normalFilloutMetricsGroupReportPortion


function miscFormsFilloutMetricsGroupReportPortion(allCurMembers, hubcv, personnelCol, dateCol, ffethescv, curDateNum, todayMinus29, todayMinus6, formType, text, formName){
  // Top 3 for how many failed forms 30
  // Top 3 for how many successful forms 30
  // Total Number of successful submissions 730t
  // Total Number of failed submissions 730t
  // Top 3 reasons why form failed to submit 730t

  //failed forms
  var failed30P = [];
  var failed7P = [];
  var allFailedP = [];
  var failed30R = [];
  var failed7R = [];
  var allFailedR = [];
  for(var x=0; x<formType.length; x+=1){//start 1st for
    for(var i=0; i<ffethescv.length; i+=1){//start 2nd for
      //one of the members of the current group
      if(existsInArray(allCurMembers, ffethescv[i][3])){//end 1st if
        //form type
        if(ffethescv[i][0].toString() === formType[x]){//end 2nd if
          var curVal1 = "";
          if(ffethescv[i][4].indexOf("in an entry for __") !== -1){//end 3rd if
            curVal1 = ffethescv[i][4].toString().slice(0, ffethescv[i][4].indexOf("in an entry for __")-1)
          }//start 3rd if
          else{curVal1 = ffethescv[i][4].toString()}
          //adds to all failed
          addToCountingArray(allFailedR, curVal1);
          addToCountingArray(allFailedP, ffethescv[i][3]);
          //within 30 days
          if(todayMinus29 <= ffethescv[i][2]  &&  curDateNum >= ffethescv[i][2]){//end 3rd if
            //adds to all failed
            addToCountingArray(failed30R, curVal1);
            addToCountingArray(failed30P, ffethescv[i][3]);
            //within 7 days and includes member
            if(todayMinus6 <= ffethescv[i][2]  &&  curDateNum >= ffethescv[i][2]){//end 4th if
              //adds to all failed
              addToCountingArray(failed7R, curVal1);
              addToCountingArray(failed7P, ffethescv[i][3]);
            }//start 4th if
          }//start 3rd if
        }//start 2nd if
      }//start 1st if
    }//end 2nd for
  }//end 1st for


  //successful forms
  var succ30P = [];
  var succ7P = [];
  var allsuccP = [];
  for(var i=0; i<hubcv.length; i+=1){//start 1st for
    //one of the members of the current group and its the correct form name
    if(existsInArray(allCurMembers, hubcv[i][personnelCol])  &&  formName === hubcv[i][0]){//end 1st if
      //adds to all succ
      addToCountingArray(allsuccP, hubcv[i][personnelCol]);
      //within 30 days
      if(todayMinus29 <= hubcv[i][dateCol]  &&  curDateNum >= hubcv[i][dateCol]){//end 2nd if
        //adds to all succ
        addToCountingArray(succ30P, hubcv[i][personnelCol]);
        //within 7 days and includes member
        if(todayMinus6 <= hubcv[i][dateCol]  &&  curDateNum >= hubcv[i][dateCol]){//end 3rd if
          //adds to all succ
          addToCountingArray(succ7P, hubcv[i][personnelCol]);
        }//start 3rd if
      }//start 2nd if
    }//start 1st if
  }//end 1st for

  text = text + "\n\n\n\nForm Fillout Failures\n\n\nTotal numbers of fillout errors\n\nSince Aug 30 2022: " + totalCountForCountingArray(allFailedP) + "\n\nLast 30 days: " + totalCountForCountingArray(failed30P) + "\n\nLast 7 days: " + totalCountForCountingArray(failed7P) + "\n\n\nTop 3 members of fillout errors\n\nSince Aug 30 2022:\n" + top3CountForCountingArrayString(allFailedP) + "\n\nLast 30 days:\n" + top3CountForCountingArrayString(failed30P) + "\n\nLast 7 days:\n" + top3CountForCountingArrayString(failed7P) + "\n\n\nTop 3 reasons of fillout errors\n\nSince Aug 30 2022:\n" + top3CountForCountingArrayString(allFailedR) + "\n\nLast 30 days:\n" + top3CountForCountingArrayString(failed30R) + "\n\nLast 7 days:\n" + top3CountForCountingArrayString(failed7R) + "\n\n\n\nSuccessful Form Fillouts\n\n\nTotal numbers of successful fillouts\n\nAll Time: " + totalCountForCountingArray(allsuccP) + "\n\nLast 30 days: " + totalCountForCountingArray(succ30P) + "\n\nLast 7 days: " + totalCountForCountingArray(succ7P) + "\n\n\nTop 3 submission personnel of successful fillouts\n\nAll Time:\n" + top3CountForCountingArrayString(allsuccP) + "\n\nLast 30 days:\n" + top3CountForCountingArrayString(succ30P) + "\n\nLast 7 days:\n" + top3CountForCountingArrayString(succ7P);
  

  return text;
}// end miscFormsFilloutMetricsGroupReportPortion


function memberUpdateMetricsGroupReportPortion(allCurMembers, hubcv, personnelCol, dateCol, curDateNum, todayMinus29, todayMinus6, updateType){
  // Top 3 for how many successful forms 30
  // Total Number of successful submissions 730t
  // Top 3 members in question

  //successful forms
  var succ30P = [];
  var succ7P = [];
  var allsuccP = [];
  var mem30P = [];
  var mem7P = [];
  var allmemP = [];
  var details30 = [];
  var details7 = [];
  var allDetails = [];
  var allDetailsArray = [];
  var details30Array = [];
  var details7Array = [];
  for(var i=0; i<hubcv.length; i+=1){//start 1st for
    //one of the members of the current group and its the correct form name
    if(existsInArray(allCurMembers, hubcv[i][personnelCol])  &&  updateType === hubcv[i][0]){//end 1st if
      //adds to all succ
      addToCountingArray(allsuccP, hubcv[i][personnelCol]);
      //within 30 days
      if(todayMinus29 <= hubcv[i][dateCol]  &&  curDateNum >= hubcv[i][dateCol]){//end 2nd if
        //adds to all succ
        addToCountingArray(succ30P, hubcv[i][personnelCol]);
        //within 7 days and includes member
        if(todayMinus6 <= hubcv[i][dateCol]  &&  curDateNum >= hubcv[i][dateCol]){//end 3rd if
          //adds to all succ
          addToCountingArray(succ7P, hubcv[i][personnelCol]);
        }//start 3rd if
      }//start 2nd if
    }//start 1st if
    if(existsInArray(allCurMembers, hubcv[i][1])  &&  updateType === hubcv[i][0]){//end 1st if
      allDetailsArray.push(hubcv[i][2]);
      addToCountingArray(allmemP, hubcv[i][1]);
      addToCountingArray(allDetails, hubcv[i][2]);
      //within 30 days
      if(todayMinus29 <= hubcv[i][dateCol]  &&  curDateNum >= hubcv[i][dateCol]){//end 2nd if
        details30Array.push(hubcv[i][2]);
        addToCountingArray(mem30P, hubcv[i][1]);
        addToCountingArray(details30, hubcv[i][2]);
        //within 7 days and includes member
        if(todayMinus6 <= hubcv[i][dateCol]  &&  curDateNum >= hubcv[i][dateCol]){//end 3rd if
          details7Array.push(hubcv[i][2]);
          addToCountingArray(mem7P, hubcv[i][1]);
          addToCountingArray(details7, hubcv[i][2]);
        }//start 3rd if
      }//start 2nd if
    }//start 1st if
  }//end 1st for
  
  return [allsuccP, succ30P, succ7P, allmemP, mem30P, mem7P, allDetails, details30, details7, allDetailsArray, details30Array, details7Array];
}// end memberUpdateMetricsGroupReportPortion


function memberUpdateMetricsGroupReportText(text, allsuccP, succ30P, succ7P, allmemP, mem30P, mem7P, updateType){
  var newText = text + "\n\n\n\n~~~~~~~~~~" + updateType + "~~~~~~~~~~\n\n\nTotal numbers of entries\n\nAll Time: " + totalCountForCountingArray(allmemP) + "\n\nLast 30 days: " + totalCountForCountingArray(mem30P) + "\n\nLast 7 days: " + totalCountForCountingArray(mem7P) + "\n\n\nTop 3 submission personnel\n\nAll Time:\n" + top3CountForCountingArrayString(allsuccP) + "\n\nLast 30 days:\n" + top3CountForCountingArrayString(succ30P) + "\n\nLast 7 days:\n" + top3CountForCountingArrayString(succ7P) + "\n\n\nTop 3 members in question\n\nAll Time:\n" + top3CountForCountingArrayString(allmemP) + "\n\nLast 30 days:\n" + top3CountForCountingArrayString(mem30P) + "\n\nLast 7 days:\n" + top3CountForCountingArrayString(mem7P);
  return newText;
}//end memberUpdateMetricsGroupReportText


function memberUpdateMetricsGroupReportText3(text, allsuccP, succ30P, succ7P, allmemP, mem30P, mem7P, updateType){
  var newText = text + "\n\n\n\n~~~~~~~~~~" + updateType + "~~~~~~~~~~\n\n\nTotal numbers of entries\n\nAll Time: " + totalCountForCountingArray(allmemP) + "\n\nLast 30 days: " + totalCountForCountingArray(mem30P) + "\n\nLast 7 days: " + totalCountForCountingArray(mem7P) + "\n\n\nTop 3 submission personnel\n\nAll Time:\n" + top3CountForCountingArrayString(allsuccP) + "\n\nLast 30 days:\n" + top3CountForCountingArrayString(succ30P) + "\n\nLast 7 days:\n" + top3CountForCountingArrayString(succ7P) + "\n\n\nTop 10 members in question\n\nAll Time:\n" + top10CountForCountingArrayString(allmemP) + "\n\nLast 30 days:\n" + top10CountForCountingArrayString(mem30P) + "\n\nLast 7 days:\n" + top10CountForCountingArrayString(mem7P);
  return newText;
}//end memberUpdateMetricsGroupReportText3


function memberUpdateMetricsGroupReportText2(text, allDetails, details30, details7){
  var newText = text + "\n\n\nTop 3 details of entries\n\nAll Time:\n" + top3CountForCountingArrayString(allDetails) + "\n\nLast 30 days:\n" + top3CountForCountingArrayString(details30) + "\n\nLast 7 days:\n" + top3CountForCountingArrayString(details7);
  return newText;
}//end memberUpdateMetricsGroupReportText


function arrayAverage(array){
  var sum = 0;
  for(var i=0; i<array.length; i+=1){//start 1st for
    sum = sum + array[i];
  }//end 1st for
  return (sum/array.length)
}//end arrayAverage

function percentageString(num){
  var val = Math.round(num*100);
  return val + "%"
}

function existsInArrayBulk(array,array2){
  //only works with single level array searching
  for(var i=0; i<array2.length; i+=1){//start 1st for
    var element = array2[i].toString();
    if(existsInArray(array, element)){//end 1st if
      return true;
    }//start 1st if
  }//end 1st for
  return false;
}